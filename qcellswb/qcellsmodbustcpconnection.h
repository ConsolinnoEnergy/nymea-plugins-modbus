/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Copyright 2013 - 2024, nymea GmbH
* Contact: contact@nymea.io
*
* This fileDescriptor is part of nymea.
* This project including source code and documentation is protected by
* copyright law, and remains the property of nymea GmbH. All rights, including
* reproduction, publication, editing and translation, are reserved. The use of
* this project is subject to the terms of a license agreement to be concluded
* with nymea GmbH in accordance with the terms of use of nymea GmbH, available
* under https://nymea.io/license
*
* GNU Lesser General Public License Usage
* Alternatively, this project may be redistributed and/or modified under the
* terms of the GNU Lesser General Public License as published by the Free
* Software Foundation; version 3. This project is distributed in the hope that
* it will be useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this project. If not, see <https://www.gnu.org/licenses/>.
*
* For any further details and any questions please contact us under
* contact@nymea.io or see our FAQ/Licensing Information on
* https://nymea.io/license/faq
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* WARNING
*
* This file has been autogenerated. Any changes in this file may be overwritten.
* If you want to change something, update the register json or the tool.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef QCELLSMODBUSTCPCONNECTION_H
#define QCELLSMODBUSTCPCONNECTION_H

#include <QObject>

#include <modbusdatautils.h>
#include <modbustcpmaster.h>

class QCellsModbusTcpConnection : public ModbusTCPMaster
{
    Q_OBJECT
public:
    enum Registers {
        RegisterDeviceAddress = 4096,
        RegisterFirmwareVersion = 4097,
        RegisterStopReason = 4098,
        RegisterDeviceStatus = 4099,
        RegisterCpStatus = 4100,
        RegisterPlugStatus = 4101,
        RegisterCpTemperature = 4102,
        RegisterEnvTemperature = 4103,
        RegisterVoltagePhaseA = 4104,
        RegisterVoltagePhaseB = 4105,
        RegisterVoltagePhaseC = 4106,
        RegisterCurrentPhaseA = 4107,
        RegisterCurrentPhaseB = 4108,
        RegisterCurrentPhaseC = 4109,
        RegisterCurrentPower = 4110,
        RegisterLockState = 4111,
        RegisterChargePhase = 4112,
        RegisterMaxSupportedPower = 4113,
        RegisterMinSupportedPower = 4114,
        RegisterMaxSupportedCurrent = 4115,
        RegisterMinSupportedCurrent = 4116,
        RegisterAlarmInfo = 4117,
        RegisterTotalEnergy = 4118,
        RegisterSessionEnergyConsumed = 4120,
        RegisterFaultInfo = 4122,
        RegisterModelCode = 4126,
        RegisterSerialNumber = 4130,
        RegisterWorkMode = 12288,
        RegisterMaxChargeCurrent = 12289,
        RegisterMaxChargePower = 12290,
        RegisterMaxChargeTime = 12291,
        RegisterMaxChargeEnergy = 12292,
        RegisterTimeValidity = 12293,
        RegisterDefaultCurrent = 12294,
        RegisterChargingControl = 16385
    };
    Q_ENUM(Registers)

    enum EVCStatus {
        EVCStatusIdle = 0,
        EVCStatusConnected = 1,
        EVCStatusStarting = 2,
        EVCStatusCharging = 3,
        EVCStatusPausing = 4,
        EVCStatusFinishing = 5,
        EVCStatusFaulted = 6
    };
    Q_ENUM(EVCStatus)

    explicit QCellsModbusTcpConnection(const QHostAddress &hostAddress, uint port, quint16 slaveId, QObject *parent = nullptr);
    ~QCellsModbusTcpConnection() = default;

    bool reachable() const;

    ModbusDataUtils::ByteOrder endianness() const;
    void setEndianness(ModbusDataUtils::ByteOrder endianness);

    uint checkReachableRetries() const;
    void setCheckReachableRetries(uint checkReachableRetries);

    /* Control charing of the EVC (0x4001) - Address: 16385, Size: 1 */
    QModbusReply *setChargingControl(quint16 chargingControl);

    /* Work Mode of the EVC (0x3000) - Address: 12288, Size: 2 */
    quint32 workMode() const;
    QModbusReply *setWorkMode(quint32 workMode);

    /* Software version of EVC (0x1001) - Address: 4097, Size: 1 */
    quint16 firmwareVersion() const;

    /* Maximum supported power of the EVC (0x1011) [kW] - Address: 4113, Size: 1 */
    float maxSupportedPower() const;

    /* Modbus Address of the EVC (0x1000) - Address: 4096, Size: 1 */
    quint16 deviceAddress() const;

    /* Unused Software version of EVC (0x1001) - Address: 4097, Size: 1 */
    quint16 firmwareVersionUnused() const;

    /* Stop reason of the EVC (0x1002) - Address: 4098, Size: 1 */
    quint16 stopReason() const;

    /* Status of the EVC (0x1003) - Address: 4099, Size: 1 */
    EVCStatus deviceStatus() const;

    /* CP voltage level status of the EVC (0x1004) - Address: 4100, Size: 1 */
    quint16 cpStatus() const;

    /* Plug status of the EVC (0x1005) - Address: 4101, Size: 1 */
    quint16 plugStatus() const;

    /* Charging Port Temperature of the EVC (0x1006) [째C] - Address: 4102, Size: 1 */
    float cpTemperature() const;

    /* Environment Temperature of the EVC (0x1007) [째C] - Address: 4103, Size: 1 */
    float envTemperature() const;

    /* Voltage of phase A (0x1008) [V] - Address: 4104, Size: 1 */
    float voltagePhaseA() const;

    /* Voltage of phase B (0x1009) [V] - Address: 4105, Size: 1 */
    float voltagePhaseB() const;

    /* Voltage of phase C (0x100A) [V] - Address: 4106, Size: 1 */
    float voltagePhaseC() const;

    /* Current of phase A (0x100B) [A] - Address: 4107, Size: 1 */
    float currentPhaseA() const;

    /* Current of phase B (0x100C) [A] - Address: 4108, Size: 1 */
    float currentPhaseB() const;

    /* Current of phase C (0x100D) [A] - Address: 4109, Size: 1 */
    float currentPhaseC() const;

    /* Current power of the EVC (0x100E) [kW] - Address: 4110, Size: 1 */
    float currentPower() const;

    /* State of the electronic lock (0x100F) - Address: 4111, Size: 1 */
    quint16 lockState() const;

    /* Charging phase of EVC (0x1010) - Address: 4112, Size: 1 */
    quint16 chargePhase() const;

    /* Unused Maximum supported power of the EVC (0x1011) [kW] - Address: 4113, Size: 1 */
    float maxSupportedPowerUnused() const;

    /* Minimum supported power of the EVC (0x1012) [kW] - Address: 4114, Size: 1 */
    float minSupportedPower() const;

    /* Maximum supported current of the EVC (0x1013) [A] - Address: 4115, Size: 1 */
    float maxSupportedCurrent() const;

    /* Minimum supported current of the EVC (0x1014) [A] - Address: 4116, Size: 1 */
    float minSupportedCurrent() const;

    /* System alarm info of the EVC (0x1015) - Address: 4117, Size: 1 */
    quint16 alarmInfo() const;

    /* Total energy conumed by the EVC (0x101A) [kWh] - Address: 4118, Size: 2 */
    float totalEnergy() const;

    /* Session energy consumed by the EVC (0x1016) [kWh] - Address: 4120, Size: 2 */
    float sessionEnergyConsumed() const;

    /* System fault info of the EVC (0x101C) - Address: 4122, Size: 2 */
    quint32 faultInfo() const;

    /* Model code of the EVC (0x101E) - Address: 4126, Size: 4 */
    QString modelCode() const;

    /* Serial number of the EVC (0x1022) - Address: 4130, Size: 16 */
    QString serialNumber() const;

    /* Maximum charging current of the EVC (0x3001) [A] - Address: 12289, Size: 1 */
    float maxChargeCurrent() const;
    QModbusReply *setMaxChargeCurrent(float maxChargeCurrent);

    /* Maximum charging power of the EVC (0x3002) [kW] - Address: 12290, Size: 1 */
    float maxChargePower() const;
    QModbusReply *setMaxChargePower(float maxChargePower);

    /* Maximum charge time (minutes) of the EVC (0x3003) - Address: 12291, Size: 1 */
    quint16 maxChargeTime() const;
    QModbusReply *setMaxChargeTime(quint16 maxChargeTime);

    /* Maximum charge energy of the EVC (0x3004) [kWh] - Address: 12292, Size: 1 */
    quint16 maxChargeEnergy() const;
    QModbusReply *setMaxChargeEnergy(quint16 maxChargeEnergy);

    /* Maximum charge time (minutes) of the EVC (0x3005) [kWh] - Address: 12293, Size: 1 */
    quint16 timeValidity() const;
    QModbusReply *setTimeValidity(quint16 timeValidity);

    /* Default charging current of the EVC (0x3006) [A] - Address: 12294, Size: 1 */
    float defaultCurrent() const;
    QModbusReply *setDefaultCurrent(float defaultCurrent);

    /* Read block from start addess 4096 with size of 28 registers containing following 25 properties:
      - Modbus Address of the EVC (0x1000) - Address: 4096, Size: 1
      - Unused Software version of EVC (0x1001) - Address: 4097, Size: 1
      - Stop reason of the EVC (0x1002) - Address: 4098, Size: 1
      - Status of the EVC (0x1003) - Address: 4099, Size: 1
      - CP voltage level status of the EVC (0x1004) - Address: 4100, Size: 1
      - Plug status of the EVC (0x1005) - Address: 4101, Size: 1
      - Charging Port Temperature of the EVC (0x1006) [째C] - Address: 4102, Size: 1
      - Environment Temperature of the EVC (0x1007) [째C] - Address: 4103, Size: 1
      - Voltage of phase A (0x1008) [V] - Address: 4104, Size: 1
      - Voltage of phase B (0x1009) [V] - Address: 4105, Size: 1
      - Voltage of phase C (0x100A) [V] - Address: 4106, Size: 1
      - Current of phase A (0x100B) [A] - Address: 4107, Size: 1
      - Current of phase B (0x100C) [A] - Address: 4108, Size: 1
      - Current of phase C (0x100D) [A] - Address: 4109, Size: 1
      - Current power of the EVC (0x100E) [kW] - Address: 4110, Size: 1
      - State of the electronic lock (0x100F) - Address: 4111, Size: 1
      - Charging phase of EVC (0x1010) - Address: 4112, Size: 1
      - Unused Maximum supported power of the EVC (0x1011) [kW] - Address: 4113, Size: 1
      - Minimum supported power of the EVC (0x1012) [kW] - Address: 4114, Size: 1
      - Maximum supported current of the EVC (0x1013) [A] - Address: 4115, Size: 1
      - Minimum supported current of the EVC (0x1014) [A] - Address: 4116, Size: 1
      - System alarm info of the EVC (0x1015) - Address: 4117, Size: 1
      - Total energy conumed by the EVC (0x101A) [kWh] - Address: 4118, Size: 2
      - Session energy consumed by the EVC (0x1016) [kWh] - Address: 4120, Size: 2
      - System fault info of the EVC (0x101C) - Address: 4122, Size: 2
    */
    void updateChargingInfoBlock();

    /* Read block from start addess 4126 with size of 20 registers containing following 2 properties:
      - Model code of the EVC (0x101E) - Address: 4126, Size: 4
      - Serial number of the EVC (0x1022) - Address: 4130, Size: 16
    */
    void updateSystemInfoBlock();

    /* Read block from start addess 12289 with size of 6 registers containing following 6 properties:
      - Maximum charging current of the EVC (0x3001) [A] - Address: 12289, Size: 1
      - Maximum charging power of the EVC (0x3002) [kW] - Address: 12290, Size: 1
      - Maximum charge time (minutes) of the EVC (0x3003) - Address: 12291, Size: 1
      - Maximum charge energy of the EVC (0x3004) [kWh] - Address: 12292, Size: 1
      - Maximum charge time (minutes) of the EVC (0x3005) [kWh] - Address: 12293, Size: 1
      - Default charging current of the EVC (0x3006) [A] - Address: 12294, Size: 1
    */
    void updateChargeSettingsBlock();

    void updateWorkMode();

    void updateDeviceAddress();
    void updateFirmwareVersionUnused();
    void updateStopReason();
    void updateDeviceStatus();
    void updateCpStatus();
    void updatePlugStatus();
    void updateCpTemperature();
    void updateEnvTemperature();
    void updateVoltagePhaseA();
    void updateVoltagePhaseB();
    void updateVoltagePhaseC();
    void updateCurrentPhaseA();
    void updateCurrentPhaseB();
    void updateCurrentPhaseC();
    void updateCurrentPower();
    void updateLockState();
    void updateChargePhase();
    void updateMaxSupportedPowerUnused();
    void updateMinSupportedPower();
    void updateMaxSupportedCurrent();
    void updateMinSupportedCurrent();
    void updateAlarmInfo();
    void updateTotalEnergy();
    void updateSessionEnergyConsumed();
    void updateFaultInfo();
    void updateModelCode();
    void updateSerialNumber();
    void updateMaxChargeCurrent();
    void updateMaxChargePower();
    void updateMaxChargeTime();
    void updateMaxChargeEnergy();
    void updateTimeValidity();
    void updateDefaultCurrent();

    QModbusReply *readWorkMode();
    QModbusReply *readFirmwareVersion();
    QModbusReply *readMaxSupportedPower();
    QModbusReply *readDeviceAddress();
    QModbusReply *readFirmwareVersionUnused();
    QModbusReply *readStopReason();
    QModbusReply *readDeviceStatus();
    QModbusReply *readCpStatus();
    QModbusReply *readPlugStatus();
    QModbusReply *readCpTemperature();
    QModbusReply *readEnvTemperature();
    QModbusReply *readVoltagePhaseA();
    QModbusReply *readVoltagePhaseB();
    QModbusReply *readVoltagePhaseC();
    QModbusReply *readCurrentPhaseA();
    QModbusReply *readCurrentPhaseB();
    QModbusReply *readCurrentPhaseC();
    QModbusReply *readCurrentPower();
    QModbusReply *readLockState();
    QModbusReply *readChargePhase();
    QModbusReply *readMaxSupportedPowerUnused();
    QModbusReply *readMinSupportedPower();
    QModbusReply *readMaxSupportedCurrent();
    QModbusReply *readMinSupportedCurrent();
    QModbusReply *readAlarmInfo();
    QModbusReply *readTotalEnergy();
    QModbusReply *readSessionEnergyConsumed();
    QModbusReply *readFaultInfo();
    QModbusReply *readModelCode();
    QModbusReply *readSerialNumber();
    QModbusReply *readMaxChargeCurrent();
    QModbusReply *readMaxChargePower();
    QModbusReply *readMaxChargeTime();
    QModbusReply *readMaxChargeEnergy();
    QModbusReply *readTimeValidity();
    QModbusReply *readDefaultCurrent();

    /* Read block from start addess 4096 with size of 28 registers containing following 25 properties:
     - Modbus Address of the EVC (0x1000) - Address: 4096, Size: 1
     - Unused Software version of EVC (0x1001) - Address: 4097, Size: 1
     - Stop reason of the EVC (0x1002) - Address: 4098, Size: 1
     - Status of the EVC (0x1003) - Address: 4099, Size: 1
     - CP voltage level status of the EVC (0x1004) - Address: 4100, Size: 1
     - Plug status of the EVC (0x1005) - Address: 4101, Size: 1
     - Charging Port Temperature of the EVC (0x1006) [째C] - Address: 4102, Size: 1
     - Environment Temperature of the EVC (0x1007) [째C] - Address: 4103, Size: 1
     - Voltage of phase A (0x1008) [V] - Address: 4104, Size: 1
     - Voltage of phase B (0x1009) [V] - Address: 4105, Size: 1
     - Voltage of phase C (0x100A) [V] - Address: 4106, Size: 1
     - Current of phase A (0x100B) [A] - Address: 4107, Size: 1
     - Current of phase B (0x100C) [A] - Address: 4108, Size: 1
     - Current of phase C (0x100D) [A] - Address: 4109, Size: 1
     - Current power of the EVC (0x100E) [kW] - Address: 4110, Size: 1
     - State of the electronic lock (0x100F) - Address: 4111, Size: 1
     - Charging phase of EVC (0x1010) - Address: 4112, Size: 1
     - Unused Maximum supported power of the EVC (0x1011) [kW] - Address: 4113, Size: 1
     - Minimum supported power of the EVC (0x1012) [kW] - Address: 4114, Size: 1
     - Maximum supported current of the EVC (0x1013) [A] - Address: 4115, Size: 1
     - Minimum supported current of the EVC (0x1014) [A] - Address: 4116, Size: 1
     - System alarm info of the EVC (0x1015) - Address: 4117, Size: 1
     - Total energy conumed by the EVC (0x101A) [kWh] - Address: 4118, Size: 2
     - Session energy consumed by the EVC (0x1016) [kWh] - Address: 4120, Size: 2
     - System fault info of the EVC (0x101C) - Address: 4122, Size: 2
    */
    QModbusReply *readBlockChargingInfo();

    /* Read block from start addess 4126 with size of 20 registers containing following 2 properties:
     - Model code of the EVC (0x101E) - Address: 4126, Size: 4
     - Serial number of the EVC (0x1022) - Address: 4130, Size: 16
    */
    QModbusReply *readBlockSystemInfo();

    /* Read block from start addess 12289 with size of 6 registers containing following 6 properties:
     - Maximum charging current of the EVC (0x3001) [A] - Address: 12289, Size: 1
     - Maximum charging power of the EVC (0x3002) [kW] - Address: 12290, Size: 1
     - Maximum charge time (minutes) of the EVC (0x3003) - Address: 12291, Size: 1
     - Maximum charge energy of the EVC (0x3004) [kWh] - Address: 12292, Size: 1
     - Maximum charge time (minutes) of the EVC (0x3005) [kWh] - Address: 12293, Size: 1
     - Default charging current of the EVC (0x3006) [A] - Address: 12294, Size: 1
    */
    QModbusReply *readBlockChargeSettings();


    virtual bool initialize();
    virtual bool update();

signals:
    void reachableChanged(bool reachable);
    void checkReachabilityFailed();
    void checkReachableRetriesChanged(uint checkReachableRetries);

    void initializationFinished(bool success);
    void updateFinished();

    void endiannessChanged(ModbusDataUtils::ByteOrder endianness);

    void workModeChanged(quint32 workMode);
    void workModeReadFinished(quint32 workMode);
    void firmwareVersionChanged(quint16 firmwareVersion);
    void firmwareVersionReadFinished(quint16 firmwareVersion);
    void maxSupportedPowerChanged(float maxSupportedPower);
    void maxSupportedPowerReadFinished(float maxSupportedPower);

    void deviceAddressChanged(quint16 deviceAddress);
    void deviceAddressReadFinished(quint16 deviceAddress);
    void firmwareVersionUnusedChanged(quint16 firmwareVersionUnused);
    void firmwareVersionUnusedReadFinished(quint16 firmwareVersionUnused);
    void stopReasonChanged(quint16 stopReason);
    void stopReasonReadFinished(quint16 stopReason);
    void deviceStatusChanged(EVCStatus deviceStatus);
    void deviceStatusReadFinished(EVCStatus deviceStatus);
    void cpStatusChanged(quint16 cpStatus);
    void cpStatusReadFinished(quint16 cpStatus);
    void plugStatusChanged(quint16 plugStatus);
    void plugStatusReadFinished(quint16 plugStatus);
    void cpTemperatureChanged(float cpTemperature);
    void cpTemperatureReadFinished(float cpTemperature);
    void envTemperatureChanged(float envTemperature);
    void envTemperatureReadFinished(float envTemperature);
    void voltagePhaseAChanged(float voltagePhaseA);
    void voltagePhaseAReadFinished(float voltagePhaseA);
    void voltagePhaseBChanged(float voltagePhaseB);
    void voltagePhaseBReadFinished(float voltagePhaseB);
    void voltagePhaseCChanged(float voltagePhaseC);
    void voltagePhaseCReadFinished(float voltagePhaseC);
    void currentPhaseAChanged(float currentPhaseA);
    void currentPhaseAReadFinished(float currentPhaseA);
    void currentPhaseBChanged(float currentPhaseB);
    void currentPhaseBReadFinished(float currentPhaseB);
    void currentPhaseCChanged(float currentPhaseC);
    void currentPhaseCReadFinished(float currentPhaseC);
    void currentPowerChanged(float currentPower);
    void currentPowerReadFinished(float currentPower);
    void lockStateChanged(quint16 lockState);
    void lockStateReadFinished(quint16 lockState);
    void chargePhaseChanged(quint16 chargePhase);
    void chargePhaseReadFinished(quint16 chargePhase);
    void maxSupportedPowerUnusedChanged(float maxSupportedPowerUnused);
    void maxSupportedPowerUnusedReadFinished(float maxSupportedPowerUnused);
    void minSupportedPowerChanged(float minSupportedPower);
    void minSupportedPowerReadFinished(float minSupportedPower);
    void maxSupportedCurrentChanged(float maxSupportedCurrent);
    void maxSupportedCurrentReadFinished(float maxSupportedCurrent);
    void minSupportedCurrentChanged(float minSupportedCurrent);
    void minSupportedCurrentReadFinished(float minSupportedCurrent);
    void alarmInfoChanged(quint16 alarmInfo);
    void alarmInfoReadFinished(quint16 alarmInfo);
    void totalEnergyChanged(float totalEnergy);
    void totalEnergyReadFinished(float totalEnergy);
    void sessionEnergyConsumedChanged(float sessionEnergyConsumed);
    void sessionEnergyConsumedReadFinished(float sessionEnergyConsumed);
    void faultInfoChanged(quint32 faultInfo);
    void faultInfoReadFinished(quint32 faultInfo);
    void modelCodeChanged(const QString &modelCode);
    void modelCodeReadFinished(const QString &modelCode);
    void serialNumberChanged(const QString &serialNumber);
    void serialNumberReadFinished(const QString &serialNumber);
    void maxChargeCurrentChanged(float maxChargeCurrent);
    void maxChargeCurrentReadFinished(float maxChargeCurrent);
    void maxChargePowerChanged(float maxChargePower);
    void maxChargePowerReadFinished(float maxChargePower);
    void maxChargeTimeChanged(quint16 maxChargeTime);
    void maxChargeTimeReadFinished(quint16 maxChargeTime);
    void maxChargeEnergyChanged(quint16 maxChargeEnergy);
    void maxChargeEnergyReadFinished(quint16 maxChargeEnergy);
    void timeValidityChanged(quint16 timeValidity);
    void timeValidityReadFinished(quint16 timeValidity);
    void defaultCurrentChanged(float defaultCurrent);
    void defaultCurrentReadFinished(float defaultCurrent);

protected:
    quint16 m_chargingControl;
    quint32 m_workMode = 0;
    quint16 m_firmwareVersion = 0x0000;
    float m_maxSupportedPower = 0;
    quint16 m_deviceAddress = 1;
    quint16 m_firmwareVersionUnused = 0x0000;
    quint16 m_stopReason = 0;
    EVCStatus m_deviceStatus = EVCStatusIdle;
    quint16 m_cpStatus = 0;
    quint16 m_plugStatus = 0;
    float m_cpTemperature = 0;
    float m_envTemperature = 0;
    float m_voltagePhaseA = 0;
    float m_voltagePhaseB = 0;
    float m_voltagePhaseC = 0;
    float m_currentPhaseA = 0;
    float m_currentPhaseB = 0;
    float m_currentPhaseC = 0;
    float m_currentPower = 0;
    quint16 m_lockState = 0;
    quint16 m_chargePhase = 0;
    float m_maxSupportedPowerUnused = 0;
    float m_minSupportedPower = 0;
    float m_maxSupportedCurrent = 0;
    float m_minSupportedCurrent = 0;
    quint16 m_alarmInfo = 0;
    float m_totalEnergy = 0;
    float m_sessionEnergyConsumed = 0;
    quint32 m_faultInfo = 0;
    QString m_modelCode = 0;
    QString m_serialNumber = 0;
    float m_maxChargeCurrent = 0;
    float m_maxChargePower = 0;
    quint16 m_maxChargeTime = 0;
    quint16 m_maxChargeEnergy = 0;
    quint16 m_timeValidity = 30;
    float m_defaultCurrent = 6;

    void processWorkModeRegisterValues(const QVector<quint16> values);
    void processFirmwareVersionRegisterValues(const QVector<quint16> values);
    void processMaxSupportedPowerRegisterValues(const QVector<quint16> values);

    void processDeviceAddressRegisterValues(const QVector<quint16> values);
    void processFirmwareVersionUnusedRegisterValues(const QVector<quint16> values);
    void processStopReasonRegisterValues(const QVector<quint16> values);
    void processDeviceStatusRegisterValues(const QVector<quint16> values);
    void processCpStatusRegisterValues(const QVector<quint16> values);
    void processPlugStatusRegisterValues(const QVector<quint16> values);
    void processCpTemperatureRegisterValues(const QVector<quint16> values);
    void processEnvTemperatureRegisterValues(const QVector<quint16> values);
    void processVoltagePhaseARegisterValues(const QVector<quint16> values);
    void processVoltagePhaseBRegisterValues(const QVector<quint16> values);
    void processVoltagePhaseCRegisterValues(const QVector<quint16> values);
    void processCurrentPhaseARegisterValues(const QVector<quint16> values);
    void processCurrentPhaseBRegisterValues(const QVector<quint16> values);
    void processCurrentPhaseCRegisterValues(const QVector<quint16> values);
    void processCurrentPowerRegisterValues(const QVector<quint16> values);
    void processLockStateRegisterValues(const QVector<quint16> values);
    void processChargePhaseRegisterValues(const QVector<quint16> values);
    void processMaxSupportedPowerUnusedRegisterValues(const QVector<quint16> values);
    void processMinSupportedPowerRegisterValues(const QVector<quint16> values);
    void processMaxSupportedCurrentRegisterValues(const QVector<quint16> values);
    void processMinSupportedCurrentRegisterValues(const QVector<quint16> values);
    void processAlarmInfoRegisterValues(const QVector<quint16> values);
    void processTotalEnergyRegisterValues(const QVector<quint16> values);
    void processSessionEnergyConsumedRegisterValues(const QVector<quint16> values);
    void processFaultInfoRegisterValues(const QVector<quint16> values);

    void processModelCodeRegisterValues(const QVector<quint16> values);
    void processSerialNumberRegisterValues(const QVector<quint16> values);

    void processMaxChargeCurrentRegisterValues(const QVector<quint16> values);
    void processMaxChargePowerRegisterValues(const QVector<quint16> values);
    void processMaxChargeTimeRegisterValues(const QVector<quint16> values);
    void processMaxChargeEnergyRegisterValues(const QVector<quint16> values);
    void processTimeValidityRegisterValues(const QVector<quint16> values);
    void processDefaultCurrentRegisterValues(const QVector<quint16> values);

    void handleModbusError(QModbusDevice::Error error);
    void testReachability();

private:
    ModbusDataUtils::ByteOrder m_endianness = ModbusDataUtils::ByteOrderBigEndian;
    quint16 m_slaveId = 1;

    bool m_reachable = false;
    QModbusReply *m_checkRechableReply = nullptr;
    uint m_checkReachableRetries = 0;
    uint m_checkReachableRetriesCount = 0;
    bool m_communicationWorking = false;
    quint8 m_communicationFailedMax = 10;
    quint8 m_communicationFailedCounter = 0;

    QVector<QModbusReply *> m_pendingInitReplies;
    QVector<QModbusReply *> m_pendingUpdateReplies;

    QObject *m_initObject = nullptr;
    void verifyInitFinished();
    void finishInitialization(bool success);

    void verifyUpdateFinished();

    void onReachabilityCheckFailed();
    void evaluateReachableState();

};

QDebug operator<<(QDebug debug, QCellsModbusTcpConnection *qCellsModbusTcpConnection);

#endif // QCELLSMODBUSTCPCONNECTION_H
