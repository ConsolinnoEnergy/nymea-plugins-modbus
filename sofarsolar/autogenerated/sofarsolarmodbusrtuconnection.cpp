/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Copyright 2013 - 2025, nymea GmbH
 * Contact: contact@nymea.io
 *
 * This fileDescriptor is part of nymea.
 * This project including source code and documentation is protected by
 * copyright law, and remains the property of nymea GmbH. All rights, including
 * reproduction, publication, editing and translation, are reserved. The use of
 * this project is subject to the terms of a license agreement to be concluded
 * with nymea GmbH in accordance with the terms of use of nymea GmbH, available
 * under https://nymea.io/license
 *
 * GNU Lesser General Public License Usage
 * Alternatively, this project may be redistributed and/or modified under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; version 3. This project is distributed in the hope that
 * it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this project. If not, see <https://www.gnu.org/licenses/>.
 *
 * For any further details and any questions please contact us under
 * contact@nymea.io or see our FAQ/Licensing Information on
 * https://nymea.io/license/faq
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * WARNING
 *
 * This file has been autogenerated. Any changes in this file may be overwritten.
 * If you want to change something, update the register json or the tool.
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#include "sofarsolarmodbusrtuconnection.h"
#include <loggingcategories.h>
#include <math.h>
#include <QTimer>

NYMEA_LOGGING_CATEGORY(dcSofarsolarModbusRtuConnection, "SofarsolarModbusRtuConnection")

SofarsolarModbusRtuConnection::SofarsolarModbusRtuConnection(ModbusRtuMaster *modbusRtuMaster, quint16 slaveId, QObject *parent) : QObject(parent),
                                                                                                                                   m_modbusRtuMaster(modbusRtuMaster),
                                                                                                                                   m_slaveId(slaveId)
{
    connect(m_modbusRtuMaster, &ModbusRtuMaster::connectedChanged, this, [=](bool connected)
            {
        if (connected) {
            qCDebug(dcSofarsolarModbusRtuConnection()) << "Modbus RTU resource" << m_modbusRtuMaster->serialPort() << "connected again. Start testing if the connection is reachable...";
            m_pendingInitReplies.clear();
            m_pendingUpdateReplies.clear();
            m_communicationWorking = false;
            m_communicationFailedCounter = 0;
            m_checkReachableRetriesCount = 0;
            testReachability();
        } else {
            qCWarning(dcSofarsolarModbusRtuConnection()) << "Modbus RTU resource" << m_modbusRtuMaster->serialPort() << "disconnected. The connection is not reachable any more.";
            m_communicationWorking = false;
            m_communicationFailedCounter = 0;
            m_checkReachableRetriesCount = 0;
        }

        evaluateReachableState(); });

    if (m_modbusRtuMaster->connected())
    {
        testReachability();
    }
    else
    {
        evaluateReachableState();
    }
}

ModbusRtuMaster *SofarsolarModbusRtuConnection::modbusRtuMaster() const
{
    return m_modbusRtuMaster;
}
quint16 SofarsolarModbusRtuConnection::slaveId() const
{
    return m_slaveId;
}

bool SofarsolarModbusRtuConnection::reachable() const
{
    return m_reachable;
}

uint SofarsolarModbusRtuConnection::checkReachableRetries() const
{
    return m_checkReachableRetries;
}

void SofarsolarModbusRtuConnection::setCheckReachableRetries(uint checkReachableRetries)
{
    if (m_checkReachableRetries == checkReachableRetries)
        return;

    m_checkReachableRetries = checkReachableRetries;
    emit checkReachableRetriesChanged(m_checkReachableRetries);
}

ModbusDataUtils::ByteOrder SofarsolarModbusRtuConnection::endianness() const
{
    return m_endianness;
}

void SofarsolarModbusRtuConnection::setEndianness(ModbusDataUtils::ByteOrder endianness)
{
    if (m_endianness == endianness)
        return;

    m_endianness = endianness;
    emit endiannessChanged(m_endianness);
}

SofarsolarModbusRtuConnection::SystemStatus SofarsolarModbusRtuConnection::systemStatus() const
{
    return m_systemStatus;
}

float SofarsolarModbusRtuConnection::frequencyGrid() const
{
    return m_frequencyGrid;
}

float SofarsolarModbusRtuConnection::activePowerPcc() const
{
    return m_activePowerPcc;
}

float SofarsolarModbusRtuConnection::voltagePhaseR() const
{
    return m_voltagePhaseR;
}

float SofarsolarModbusRtuConnection::voltagePhaseS() const
{
    return m_voltagePhaseS;
}

float SofarsolarModbusRtuConnection::voltagePhaseT() const
{
    return m_voltagePhaseT;
}

float SofarsolarModbusRtuConnection::powerPv1() const
{
    return m_powerPv1;
}

float SofarsolarModbusRtuConnection::powerPv2() const
{
    return m_powerPv2;
}

float SofarsolarModbusRtuConnection::pvGenerationTotal() const
{
    return m_pvGenerationTotal;
}

float SofarsolarModbusRtuConnection::energyPurchaseTotal() const
{
    return m_energyPurchaseTotal;
}

float SofarsolarModbusRtuConnection::energySellingTotal() const
{
    return m_energySellingTotal;
}

float SofarsolarModbusRtuConnection::currentPccR() const
{
    return m_currentPccR;
}

float SofarsolarModbusRtuConnection::activePowerPccR() const
{
    return m_activePowerPccR;
}

float SofarsolarModbusRtuConnection::currentPccS() const
{
    return m_currentPccS;
}

float SofarsolarModbusRtuConnection::activePowerPccS() const
{
    return m_activePowerPccS;
}

float SofarsolarModbusRtuConnection::currentPccT() const
{
    return m_currentPccT;
}

float SofarsolarModbusRtuConnection::activePowerPccT() const
{
    return m_activePowerPccT;
}

float SofarsolarModbusRtuConnection::voltageBat1() const
{
    return m_voltageBat1;
}

float SofarsolarModbusRtuConnection::currentBat1() const
{
    return m_currentBat1;
}

qint16 SofarsolarModbusRtuConnection::powerBat1() const
{
    return m_powerBat1;
}

qint16 SofarsolarModbusRtuConnection::tempBat1() const
{
    return m_tempBat1;
}

quint16 SofarsolarModbusRtuConnection::socBat1() const
{
    return m_socBat1;
}

quint16 SofarsolarModbusRtuConnection::sohBat1() const
{
    return m_sohBat1;
}

quint16 SofarsolarModbusRtuConnection::cycleBat1() const
{
    return m_cycleBat1;
}

float SofarsolarModbusRtuConnection::powerControl() const
{
    return m_powerControl;
}

ModbusRtuReply *SofarsolarModbusRtuConnection::setPowerControl(float powerControl)
{
    QVector<quint16> values = ModbusDataUtils::convertFromUInt16(static_cast<quint16>(powerControl * 1.0 / pow(10, 0)));
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Write \"bit-coded control register (0x1105)\" register:" << 4357 << "size:" << 1 << values;
    return m_modbusRtuMaster->writeHoldingRegisters(m_slaveId, 4357, values);
}

float SofarsolarModbusRtuConnection::activePowerOutputLimit() const
{
    return m_activePowerOutputLimit;
}

ModbusRtuReply *SofarsolarModbusRtuConnection::setActivePowerOutputLimit(float activePowerOutputLimit)
{
    QVector<quint16> values = ModbusDataUtils::convertFromUInt16(static_cast<quint16>(activePowerOutputLimit * 1.0 / pow(10, 0)));
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Write \"Active power export limit (0x1106)\" register:" << 4358 << "size:" << 1 << values;
    return m_modbusRtuMaster->writeHoldingRegisters(m_slaveId, 4358, values);
}

bool SofarsolarModbusRtuConnection::initialize()
{
    if (!m_reachable)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Tried to initialize but the device is not to be reachable.";
        return false;
    }
    // No init registers defined. Nothing to be done and we are finished.
    emit initializationFinished(true);
    return true;
}

bool SofarsolarModbusRtuConnection::update()
{
    if (!m_modbusRtuMaster->connected())
    {
        qCDebug(dcSofarsolarModbusRtuConnection()) << "Tried to update the registers but the hardware resource seems not to be connected.";
        return false;
    }

    if (!m_pendingUpdateReplies.isEmpty())
    {
        qCDebug(dcSofarsolarModbusRtuConnection()) << "Tried to update the registers but there are still some update replies pending. Waiting for them to be finished...";
        return true;
    }

    // Hardware resource available but communication not working.
    // Try to read the check reachability register to re-evaluatoe the communication...
    if (m_modbusRtuMaster->connected() && !m_communicationWorking)
    {
        testReachability();
        return false;
    }

    ModbusRtuReply *reply = nullptr;

    // Read System status, address is 0x0404
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"System status, address is 0x0404\" register:" << 1028 << "size:" << 1;
    reply = readSystemStatus();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"System status, address is 0x0404\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"System status, address is 0x0404\" register" << 1028 << "size:" << 1 << values;
        processSystemStatusRegisterValues(values);
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"System status, address is 0x0404\" registers" << error << reply->errorString(); });

    // Read Frequency grid (0x0484)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Frequency grid (0x0484)\" register:" << 1156 << "size:" << 1;
    reply = readFrequencyGrid();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Frequency grid (0x0484)\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Frequency grid (0x0484)\" register" << 1156 << "size:" << 1 << values;
        processFrequencyGridRegisterValues(values);
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Frequency grid (0x0484)\" registers" << error << reply->errorString(); });

    // Read Active power at point of common coupling (0x0488)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Active power at point of common coupling (0x0488)\" register:" << 1160 << "size:" << 1;
    reply = readActivePowerPcc();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Active power at point of common coupling (0x0488)\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Active power at point of common coupling (0x0488)\" register" << 1160 << "size:" << 1 << values;
        processActivePowerPccRegisterValues(values);
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Active power at point of common coupling (0x0488)\" registers" << error << reply->errorString(); });

    // Read Voltage phase R (0x048D)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Voltage phase R (0x048D)\" register:" << 1165 << "size:" << 1;
    reply = readVoltagePhaseR();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Voltage phase R (0x048D)\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Voltage phase R (0x048D)\" register" << 1165 << "size:" << 1 << values;
        processVoltagePhaseRRegisterValues(values);
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Voltage phase R (0x048D)\" registers" << error << reply->errorString(); });

    // Read Voltage phase S (0x0498)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Voltage phase S (0x0498)\" register:" << 1176 << "size:" << 1;
    reply = readVoltagePhaseS();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Voltage phase S (0x0498)\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Voltage phase S (0x0498)\" register" << 1176 << "size:" << 1 << values;
        processVoltagePhaseSRegisterValues(values);
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Voltage phase S (0x0498)\" registers" << error << reply->errorString(); });

    // Read Voltage phase T (0x04A3)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Voltage phase T (0x04A3)\" register:" << 1187 << "size:" << 1;
    reply = readVoltagePhaseT();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Voltage phase T (0x04A3)\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Voltage phase T (0x04A3)\" register" << 1187 << "size:" << 1 << values;
        processVoltagePhaseTRegisterValues(values);
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Voltage phase T (0x04A3)\" registers" << error << reply->errorString(); });

    // Read Power PV1 (0x0586)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Power PV1 (0x0586)\" register:" << 1414 << "size:" << 1;
    reply = readPowerPv1();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Power PV1 (0x0586)\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Power PV1 (0x0586)\" register" << 1414 << "size:" << 1 << values;
        processPowerPv1RegisterValues(values);
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Power PV1 (0x0586)\" registers" << error << reply->errorString(); });

    // Read Power PV2 (0x0589)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Power PV2 (0x0589)\" register:" << 1417 << "size:" << 1;
    reply = readPowerPv2();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Power PV2 (0x0589)\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Power PV2 (0x0589)\" register" << 1417 << "size:" << 1 << values;
        processPowerPv2RegisterValues(values);
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Power PV2 (0x0589)\" registers" << error << reply->errorString(); });

    // Read PV generation total (0x0686)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"PV generation total (0x0686)\" register:" << 1670 << "size:" << 2;
    reply = readPvGenerationTotal();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"PV generation total (0x0686)\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"PV generation total (0x0686)\" register" << 1670 << "size:" << 2 << values;
        processPvGenerationTotalRegisterValues(values);
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"PV generation total (0x0686)\" registers" << error << reply->errorString(); });

    // Read Energy purchase total (0x068E)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Energy purchase total (0x068E)\" register:" << 1678 << "size:" << 2;
    reply = readEnergyPurchaseTotal();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Energy purchase total (0x068E)\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Energy purchase total (0x068E)\" register" << 1678 << "size:" << 2 << values;
        processEnergyPurchaseTotalRegisterValues(values);
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Energy purchase total (0x068E)\" registers" << error << reply->errorString(); });

    // Read Energy selling total (0x0692)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Energy selling total (0x0692)\" register:" << 1682 << "size:" << 2;
    reply = readEnergySellingTotal();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Energy selling total (0x0692)\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Energy selling total (0x0692)\" register" << 1682 << "size:" << 2 << values;
        processEnergySellingTotalRegisterValues(values);
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Energy selling total (0x0692)\" registers" << error << reply->errorString(); });

    // Read phaseR
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read block \"phaseR\" registers from:" << 1170 << "size:" << 2;
    reply = readBlockPhaseR();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading block \"phaseR\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> blockValues = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from reading block \"phaseR\" register" << 1170 << "size:" << 2 << blockValues;
        processCurrentPccRRegisterValues(blockValues.mid(0, 1));
        processActivePowerPccRRegisterValues(blockValues.mid(1, 1));
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"phaseR\" registers" << error << reply->errorString(); });

    // Read phaseS
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read block \"phaseS\" registers from:" << 1181 << "size:" << 2;
    reply = readBlockPhaseS();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading block \"phaseS\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> blockValues = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from reading block \"phaseS\" register" << 1181 << "size:" << 2 << blockValues;
        processCurrentPccSRegisterValues(blockValues.mid(0, 1));
        processActivePowerPccSRegisterValues(blockValues.mid(1, 1));
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"phaseS\" registers" << error << reply->errorString(); });

    // Read phaseT
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read block \"phaseT\" registers from:" << 1192 << "size:" << 2;
    reply = readBlockPhaseT();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading block \"phaseT\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> blockValues = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from reading block \"phaseT\" register" << 1192 << "size:" << 2 << blockValues;
        processCurrentPccTRegisterValues(blockValues.mid(0, 1));
        processActivePowerPccTRegisterValues(blockValues.mid(1, 1));
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"phaseT\" registers" << error << reply->errorString(); });

    // Read battery
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read block \"battery\" registers from:" << 1540 << "size:" << 7;
    reply = readBlockBattery();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading block \"battery\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> blockValues = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from reading block \"battery\" register" << 1540 << "size:" << 7 << blockValues;
        processVoltageBat1RegisterValues(blockValues.mid(0, 1));
        processCurrentBat1RegisterValues(blockValues.mid(1, 1));
        processPowerBat1RegisterValues(blockValues.mid(2, 1));
        processTempBat1RegisterValues(blockValues.mid(3, 1));
        processSocBat1RegisterValues(blockValues.mid(4, 1));
        processSohBat1RegisterValues(blockValues.mid(5, 1));
        processCycleBat1RegisterValues(blockValues.mid(6, 1));
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"battery\" registers" << error << reply->errorString(); });

    // Read powerControl
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read block \"powerControl\" registers from:" << 4357 << "size:" << 2;
    reply = readBlockPowerControl();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading block \"powerControl\" registers";
        return false;
    }

    if (reply->isFinished())
    {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
            {
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> blockValues = reply->result();
        qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from reading block \"powerControl\" register" << 4357 << "size:" << 2 << blockValues;
        processPowerControlRegisterValues(blockValues.mid(0, 1));
        processActivePowerOutputLimitRegisterValues(blockValues.mid(1, 1));
        verifyUpdateFinished(); });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
            { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"powerControl\" registers" << error << reply->errorString(); });

    return true;
}

void SofarsolarModbusRtuConnection::updateSystemStatus()
{
    // Update registers from System status, address is 0x0404
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"System status, address is 0x0404\" register:" << 1028 << "size:" << 1;
    ModbusRtuReply *reply = readSystemStatus();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"System status, address is 0x0404\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"System status, address is 0x0404\" register" << 1028 << "size:" << 1 << values;
                processSystemStatusRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"System status, address is 0x0404\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateFrequencyGrid()
{
    // Update registers from Frequency grid (0x0484)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Frequency grid (0x0484)\" register:" << 1156 << "size:" << 1;
    ModbusRtuReply *reply = readFrequencyGrid();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Frequency grid (0x0484)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Frequency grid (0x0484)\" register" << 1156 << "size:" << 1 << values;
                processFrequencyGridRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Frequency grid (0x0484)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateActivePowerPcc()
{
    // Update registers from Active power at point of common coupling (0x0488)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Active power at point of common coupling (0x0488)\" register:" << 1160 << "size:" << 1;
    ModbusRtuReply *reply = readActivePowerPcc();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Active power at point of common coupling (0x0488)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Active power at point of common coupling (0x0488)\" register" << 1160 << "size:" << 1 << values;
                processActivePowerPccRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Active power at point of common coupling (0x0488)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateVoltagePhaseR()
{
    // Update registers from Voltage phase R (0x048D)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Voltage phase R (0x048D)\" register:" << 1165 << "size:" << 1;
    ModbusRtuReply *reply = readVoltagePhaseR();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Voltage phase R (0x048D)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Voltage phase R (0x048D)\" register" << 1165 << "size:" << 1 << values;
                processVoltagePhaseRRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Voltage phase R (0x048D)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateVoltagePhaseS()
{
    // Update registers from Voltage phase S (0x0498)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Voltage phase S (0x0498)\" register:" << 1176 << "size:" << 1;
    ModbusRtuReply *reply = readVoltagePhaseS();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Voltage phase S (0x0498)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Voltage phase S (0x0498)\" register" << 1176 << "size:" << 1 << values;
                processVoltagePhaseSRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Voltage phase S (0x0498)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateVoltagePhaseT()
{
    // Update registers from Voltage phase T (0x04A3)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Voltage phase T (0x04A3)\" register:" << 1187 << "size:" << 1;
    ModbusRtuReply *reply = readVoltagePhaseT();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Voltage phase T (0x04A3)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Voltage phase T (0x04A3)\" register" << 1187 << "size:" << 1 << values;
                processVoltagePhaseTRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Voltage phase T (0x04A3)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updatePowerPv1()
{
    // Update registers from Power PV1 (0x0586)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Power PV1 (0x0586)\" register:" << 1414 << "size:" << 1;
    ModbusRtuReply *reply = readPowerPv1();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Power PV1 (0x0586)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Power PV1 (0x0586)\" register" << 1414 << "size:" << 1 << values;
                processPowerPv1RegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Power PV1 (0x0586)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updatePowerPv2()
{
    // Update registers from Power PV2 (0x0589)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Power PV2 (0x0589)\" register:" << 1417 << "size:" << 1;
    ModbusRtuReply *reply = readPowerPv2();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Power PV2 (0x0589)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Power PV2 (0x0589)\" register" << 1417 << "size:" << 1 << values;
                processPowerPv2RegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Power PV2 (0x0589)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updatePvGenerationTotal()
{
    // Update registers from PV generation total (0x0686)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"PV generation total (0x0686)\" register:" << 1670 << "size:" << 2;
    ModbusRtuReply *reply = readPvGenerationTotal();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"PV generation total (0x0686)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"PV generation total (0x0686)\" register" << 1670 << "size:" << 2 << values;
                processPvGenerationTotalRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"PV generation total (0x0686)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateEnergyPurchaseTotal()
{
    // Update registers from Energy purchase total (0x068E)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Energy purchase total (0x068E)\" register:" << 1678 << "size:" << 2;
    ModbusRtuReply *reply = readEnergyPurchaseTotal();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Energy purchase total (0x068E)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Energy purchase total (0x068E)\" register" << 1678 << "size:" << 2 << values;
                processEnergyPurchaseTotalRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Energy purchase total (0x068E)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateEnergySellingTotal()
{
    // Update registers from Energy selling total (0x0692)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Energy selling total (0x0692)\" register:" << 1682 << "size:" << 2;
    ModbusRtuReply *reply = readEnergySellingTotal();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Energy selling total (0x0692)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Energy selling total (0x0692)\" register" << 1682 << "size:" << 2 << values;
                processEnergySellingTotalRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Energy selling total (0x0692)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateCurrentPccR()
{
    // Update registers from Current phase R at PCC (0x0492)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Current phase R at PCC (0x0492)\" register:" << 1170 << "size:" << 1;
    ModbusRtuReply *reply = readCurrentPccR();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Current phase R at PCC (0x0492)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Current phase R at PCC (0x0492)\" register" << 1170 << "size:" << 1 << values;
                processCurrentPccRRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Current phase R at PCC (0x0492)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateActivePowerPccR()
{
    // Update registers from Active power phase R at PCC (0x0493)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Active power phase R at PCC (0x0493)\" register:" << 1171 << "size:" << 1;
    ModbusRtuReply *reply = readActivePowerPccR();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Active power phase R at PCC (0x0493)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Active power phase R at PCC (0x0493)\" register" << 1171 << "size:" << 1 << values;
                processActivePowerPccRRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Active power phase R at PCC (0x0493)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateCurrentPccS()
{
    // Update registers from Current phase S at PCC (0x049D)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Current phase S at PCC (0x049D)\" register:" << 1181 << "size:" << 1;
    ModbusRtuReply *reply = readCurrentPccS();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Current phase S at PCC (0x049D)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Current phase S at PCC (0x049D)\" register" << 1181 << "size:" << 1 << values;
                processCurrentPccSRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Current phase S at PCC (0x049D)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateActivePowerPccS()
{
    // Update registers from Active power phase S at PCC (0x049E)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Active power phase S at PCC (0x049E)\" register:" << 1182 << "size:" << 1;
    ModbusRtuReply *reply = readActivePowerPccS();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Active power phase S at PCC (0x049E)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Active power phase S at PCC (0x049E)\" register" << 1182 << "size:" << 1 << values;
                processActivePowerPccSRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Active power phase S at PCC (0x049E)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateCurrentPccT()
{
    // Update registers from Current phase T at PCC (0x04A8)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Current phase T at PCC (0x04A8)\" register:" << 1192 << "size:" << 1;
    ModbusRtuReply *reply = readCurrentPccT();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Current phase T at PCC (0x04A8)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Current phase T at PCC (0x04A8)\" register" << 1192 << "size:" << 1 << values;
                processCurrentPccTRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Current phase T at PCC (0x04A8)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateActivePowerPccT()
{
    // Update registers from Active power phase T at PCC (0x04A9)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Active power phase T at PCC (0x04A9)\" register:" << 1193 << "size:" << 1;
    ModbusRtuReply *reply = readActivePowerPccT();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Active power phase T at PCC (0x04A9)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Active power phase T at PCC (0x04A9)\" register" << 1193 << "size:" << 1 << values;
                processActivePowerPccTRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Active power phase T at PCC (0x04A9)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateVoltageBat1()
{
    // Update registers from Voltage battery 1 (0x0604)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Voltage battery 1 (0x0604)\" register:" << 1540 << "size:" << 1;
    ModbusRtuReply *reply = readVoltageBat1();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Voltage battery 1 (0x0604)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Voltage battery 1 (0x0604)\" register" << 1540 << "size:" << 1 << values;
                processVoltageBat1RegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Voltage battery 1 (0x0604)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateCurrentBat1()
{
    // Update registers from Current battery 1 (0x0605)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Current battery 1 (0x0605)\" register:" << 1541 << "size:" << 1;
    ModbusRtuReply *reply = readCurrentBat1();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Current battery 1 (0x0605)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Current battery 1 (0x0605)\" register" << 1541 << "size:" << 1 << values;
                processCurrentBat1RegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Current battery 1 (0x0605)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updatePowerBat1()
{
    // Update registers from Power battery 1 (0x0606)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Power battery 1 (0x0606)\" register:" << 1542 << "size:" << 1;
    ModbusRtuReply *reply = readPowerBat1();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Power battery 1 (0x0606)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Power battery 1 (0x0606)\" register" << 1542 << "size:" << 1 << values;
                processPowerBat1RegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Power battery 1 (0x0606)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateTempBat1()
{
    // Update registers from Temperature battery 1 (0x0607)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Temperature battery 1 (0x0607)\" register:" << 1543 << "size:" << 1;
    ModbusRtuReply *reply = readTempBat1();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Temperature battery 1 (0x0607)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Temperature battery 1 (0x0607)\" register" << 1543 << "size:" << 1 << values;
                processTempBat1RegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Temperature battery 1 (0x0607)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateSocBat1()
{
    // Update registers from State of charge battery 1 (0x0608)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"State of charge battery 1 (0x0608)\" register:" << 1544 << "size:" << 1;
    ModbusRtuReply *reply = readSocBat1();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"State of charge battery 1 (0x0608)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"State of charge battery 1 (0x0608)\" register" << 1544 << "size:" << 1 << values;
                processSocBat1RegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"State of charge battery 1 (0x0608)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateSohBat1()
{
    // Update registers from State of health battery 1 (0x0609)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"State of health battery 1 (0x0609)\" register:" << 1545 << "size:" << 1;
    ModbusRtuReply *reply = readSohBat1();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"State of health battery 1 (0x0609)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"State of health battery 1 (0x0609)\" register" << 1545 << "size:" << 1 << values;
                processSohBat1RegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"State of health battery 1 (0x0609)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateCycleBat1()
{
    // Update registers from Charge cycles battery 1 (0x060A)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Charge cycles battery 1 (0x060A)\" register:" << 1546 << "size:" << 1;
    ModbusRtuReply *reply = readCycleBat1();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Charge cycles battery 1 (0x060A)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Charge cycles battery 1 (0x060A)\" register" << 1546 << "size:" << 1 << values;
                processCycleBat1RegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Charge cycles battery 1 (0x060A)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updatePowerControl()
{
    // Update registers from bit-coded control register (0x1105)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"bit-coded control register (0x1105)\" register:" << 4357 << "size:" << 1;
    ModbusRtuReply *reply = readPowerControl();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"bit-coded control register (0x1105)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"bit-coded control register (0x1105)\" register" << 4357 << "size:" << 1 << values;
                processPowerControlRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"bit-coded control register (0x1105)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateActivePowerOutputLimit()
{
    // Update registers from Active power export limit (0x1106)
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read \"Active power export limit (0x1106)\" register:" << 4358 << "size:" << 1;
    ModbusRtuReply *reply = readActivePowerOutputLimit();
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading \"Active power export limit (0x1106)\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from \"Active power export limit (0x1106)\" register" << 4358 << "size:" << 1 << values;
                processActivePowerOutputLimitRegisterValues(values);
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Active power export limit (0x1106)\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updatePhaseRBlock()
{
    // Update register block "phaseR"
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read block \"phaseR\" registers from:" << 1170 << "size:" << 2;
    ModbusRtuReply *reply = m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1170, 2);
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading block \"phaseR\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> blockValues = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from reading block \"phaseR\" register" << 1170 << "size:" << 2 << blockValues;
                processCurrentPccRRegisterValues(blockValues.mid(0, 1));
                processActivePowerPccRRegisterValues(blockValues.mid(1, 1));
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"phaseR\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updatePhaseSBlock()
{
    // Update register block "phaseS"
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read block \"phaseS\" registers from:" << 1181 << "size:" << 2;
    ModbusRtuReply *reply = m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1181, 2);
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading block \"phaseS\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> blockValues = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from reading block \"phaseS\" register" << 1181 << "size:" << 2 << blockValues;
                processCurrentPccSRegisterValues(blockValues.mid(0, 1));
                processActivePowerPccSRegisterValues(blockValues.mid(1, 1));
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"phaseS\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updatePhaseTBlock()
{
    // Update register block "phaseT"
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read block \"phaseT\" registers from:" << 1192 << "size:" << 2;
    ModbusRtuReply *reply = m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1192, 2);
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading block \"phaseT\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> blockValues = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from reading block \"phaseT\" register" << 1192 << "size:" << 2 << blockValues;
                processCurrentPccTRegisterValues(blockValues.mid(0, 1));
                processActivePowerPccTRegisterValues(blockValues.mid(1, 1));
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"phaseT\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updateBatteryBlock()
{
    // Update register block "battery"
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read block \"battery\" registers from:" << 1540 << "size:" << 7;
    ModbusRtuReply *reply = m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1540, 7);
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading block \"battery\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> blockValues = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from reading block \"battery\" register" << 1540 << "size:" << 7 << blockValues;
                processVoltageBat1RegisterValues(blockValues.mid(0, 1));
                processCurrentBat1RegisterValues(blockValues.mid(1, 1));
                processPowerBat1RegisterValues(blockValues.mid(2, 1));
                processTempBat1RegisterValues(blockValues.mid(3, 1));
                processSocBat1RegisterValues(blockValues.mid(4, 1));
                processSohBat1RegisterValues(blockValues.mid(5, 1));
                processCycleBat1RegisterValues(blockValues.mid(6, 1));
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"battery\" registers" << error << reply->errorString(); });
    }
}

void SofarsolarModbusRtuConnection::updatePowerControlBlock()
{
    // Update register block "powerControl"
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Read block \"powerControl\" registers from:" << 4357 << "size:" << 2;
    ModbusRtuReply *reply = m_modbusRtuMaster->readHoldingRegister(m_slaveId, 4357, 2);
    if (!reply)
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Error occurred while reading block \"powerControl\" registers";
        return;
    }

    if (!reply->isFinished())
    {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply]()
                {
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> blockValues = reply->result();
                qCDebug(dcSofarsolarModbusRtuConnection()) << "<-- Response from reading block \"powerControl\" register" << 4357 << "size:" << 2 << blockValues;
                processPowerControlRegisterValues(blockValues.mid(0, 1));
                processActivePowerOutputLimitRegisterValues(blockValues.mid(1, 1));
            } });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply](ModbusRtuReply::Error error)
                { qCWarning(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"powerControl\" registers" << error << reply->errorString(); });
    }
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readSystemStatus()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1028, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readFrequencyGrid()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1156, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readActivePowerPcc()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1160, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readVoltagePhaseR()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1165, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readVoltagePhaseS()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1176, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readVoltagePhaseT()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1187, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readPowerPv1()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1414, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readPowerPv2()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1417, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readPvGenerationTotal()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1670, 2);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readEnergyPurchaseTotal()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1678, 2);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readEnergySellingTotal()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1682, 2);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readCurrentPccR()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1170, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readActivePowerPccR()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1171, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readCurrentPccS()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1181, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readActivePowerPccS()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1182, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readCurrentPccT()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1192, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readActivePowerPccT()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1193, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readVoltageBat1()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1540, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readCurrentBat1()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1541, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readPowerBat1()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1542, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readTempBat1()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1543, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readSocBat1()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1544, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readSohBat1()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1545, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readCycleBat1()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1546, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readPowerControl()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 4357, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readActivePowerOutputLimit()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 4358, 1);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readBlockPhaseR()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1170, 2);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readBlockPhaseS()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1181, 2);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readBlockPhaseT()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1192, 2);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readBlockBattery()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 1540, 7);
}

ModbusRtuReply *SofarsolarModbusRtuConnection::readBlockPowerControl()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 4357, 2);
}

void SofarsolarModbusRtuConnection::processSystemStatusRegisterValues(const QVector<quint16> values)
{
    SystemStatus receivedSystemStatus = static_cast<SystemStatus>(ModbusDataUtils::convertToUInt16(values));
    emit systemStatusReadFinished(receivedSystemStatus);

    if (m_systemStatus != receivedSystemStatus)
    {
        m_systemStatus = receivedSystemStatus;
        emit systemStatusChanged(m_systemStatus);
    }
}

void SofarsolarModbusRtuConnection::processFrequencyGridRegisterValues(const QVector<quint16> values)
{
    float receivedFrequencyGrid = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -2);
    emit frequencyGridReadFinished(receivedFrequencyGrid);

    if (m_frequencyGrid != receivedFrequencyGrid)
    {
        m_frequencyGrid = receivedFrequencyGrid;
        emit frequencyGridChanged(m_frequencyGrid);
    }
}

void SofarsolarModbusRtuConnection::processActivePowerPccRegisterValues(const QVector<quint16> values)
{
    float receivedActivePowerPcc = ModbusDataUtils::convertToInt16(values) * 1.0 * pow(10, 1);
    emit activePowerPccReadFinished(receivedActivePowerPcc);

    if (m_activePowerPcc != receivedActivePowerPcc)
    {
        m_activePowerPcc = receivedActivePowerPcc;
        emit activePowerPccChanged(m_activePowerPcc);
    }
}

void SofarsolarModbusRtuConnection::processVoltagePhaseRRegisterValues(const QVector<quint16> values)
{
    float receivedVoltagePhaseR = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -1);
    emit voltagePhaseRReadFinished(receivedVoltagePhaseR);

    if (m_voltagePhaseR != receivedVoltagePhaseR)
    {
        m_voltagePhaseR = receivedVoltagePhaseR;
        emit voltagePhaseRChanged(m_voltagePhaseR);
    }
}

void SofarsolarModbusRtuConnection::processVoltagePhaseSRegisterValues(const QVector<quint16> values)
{
    float receivedVoltagePhaseS = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -1);
    emit voltagePhaseSReadFinished(receivedVoltagePhaseS);

    if (m_voltagePhaseS != receivedVoltagePhaseS)
    {
        m_voltagePhaseS = receivedVoltagePhaseS;
        emit voltagePhaseSChanged(m_voltagePhaseS);
    }
}

void SofarsolarModbusRtuConnection::processVoltagePhaseTRegisterValues(const QVector<quint16> values)
{
    float receivedVoltagePhaseT = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -1);
    emit voltagePhaseTReadFinished(receivedVoltagePhaseT);

    if (m_voltagePhaseT != receivedVoltagePhaseT)
    {
        m_voltagePhaseT = receivedVoltagePhaseT;
        emit voltagePhaseTChanged(m_voltagePhaseT);
    }
}

void SofarsolarModbusRtuConnection::processPowerPv1RegisterValues(const QVector<quint16> values)
{
    float receivedPowerPv1 = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, 1);
    emit powerPv1ReadFinished(receivedPowerPv1);

    if (m_powerPv1 != receivedPowerPv1)
    {
        m_powerPv1 = receivedPowerPv1;
        emit powerPv1Changed(m_powerPv1);
    }
}

void SofarsolarModbusRtuConnection::processPowerPv2RegisterValues(const QVector<quint16> values)
{
    float receivedPowerPv2 = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, 1);
    emit powerPv2ReadFinished(receivedPowerPv2);

    if (m_powerPv2 != receivedPowerPv2)
    {
        m_powerPv2 = receivedPowerPv2;
        emit powerPv2Changed(m_powerPv2);
    }
}

void SofarsolarModbusRtuConnection::processPvGenerationTotalRegisterValues(const QVector<quint16> values)
{
    float receivedPvGenerationTotal = ModbusDataUtils::convertToUInt32(values, m_endianness) * 1.0 * pow(10, -1);
    emit pvGenerationTotalReadFinished(receivedPvGenerationTotal);

    if (m_pvGenerationTotal != receivedPvGenerationTotal)
    {
        m_pvGenerationTotal = receivedPvGenerationTotal;
        emit pvGenerationTotalChanged(m_pvGenerationTotal);
    }
}

void SofarsolarModbusRtuConnection::processEnergyPurchaseTotalRegisterValues(const QVector<quint16> values)
{
    float receivedEnergyPurchaseTotal = ModbusDataUtils::convertToUInt32(values, m_endianness) * 1.0 * pow(10, -1);
    emit energyPurchaseTotalReadFinished(receivedEnergyPurchaseTotal);

    if (m_energyPurchaseTotal != receivedEnergyPurchaseTotal)
    {
        m_energyPurchaseTotal = receivedEnergyPurchaseTotal;
        emit energyPurchaseTotalChanged(m_energyPurchaseTotal);
    }
}

void SofarsolarModbusRtuConnection::processEnergySellingTotalRegisterValues(const QVector<quint16> values)
{
    float receivedEnergySellingTotal = ModbusDataUtils::convertToUInt32(values, m_endianness) * 1.0 * pow(10, -1);
    emit energySellingTotalReadFinished(receivedEnergySellingTotal);

    if (m_energySellingTotal != receivedEnergySellingTotal)
    {
        m_energySellingTotal = receivedEnergySellingTotal;
        emit energySellingTotalChanged(m_energySellingTotal);
    }
}

void SofarsolarModbusRtuConnection::processCurrentPccRRegisterValues(const QVector<quint16> values)
{
    float receivedCurrentPccR = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -2);
    emit currentPccRReadFinished(receivedCurrentPccR);

    if (m_currentPccR != receivedCurrentPccR)
    {
        m_currentPccR = receivedCurrentPccR;
        emit currentPccRChanged(m_currentPccR);
    }
}

void SofarsolarModbusRtuConnection::processActivePowerPccRRegisterValues(const QVector<quint16> values)
{
    float receivedActivePowerPccR = ModbusDataUtils::convertToInt16(values) * 1.0 * pow(10, 1);
    emit activePowerPccRReadFinished(receivedActivePowerPccR);

    if (m_activePowerPccR != receivedActivePowerPccR)
    {
        m_activePowerPccR = receivedActivePowerPccR;
        emit activePowerPccRChanged(m_activePowerPccR);
    }
}

void SofarsolarModbusRtuConnection::processCurrentPccSRegisterValues(const QVector<quint16> values)
{
    float receivedCurrentPccS = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -2);
    emit currentPccSReadFinished(receivedCurrentPccS);

    if (m_currentPccS != receivedCurrentPccS)
    {
        m_currentPccS = receivedCurrentPccS;
        emit currentPccSChanged(m_currentPccS);
    }
}

void SofarsolarModbusRtuConnection::processActivePowerPccSRegisterValues(const QVector<quint16> values)
{
    float receivedActivePowerPccS = ModbusDataUtils::convertToInt16(values) * 1.0 * pow(10, 1);
    emit activePowerPccSReadFinished(receivedActivePowerPccS);

    if (m_activePowerPccS != receivedActivePowerPccS)
    {
        m_activePowerPccS = receivedActivePowerPccS;
        emit activePowerPccSChanged(m_activePowerPccS);
    }
}

void SofarsolarModbusRtuConnection::processCurrentPccTRegisterValues(const QVector<quint16> values)
{
    float receivedCurrentPccT = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -2);
    emit currentPccTReadFinished(receivedCurrentPccT);

    if (m_currentPccT != receivedCurrentPccT)
    {
        m_currentPccT = receivedCurrentPccT;
        emit currentPccTChanged(m_currentPccT);
    }
}

void SofarsolarModbusRtuConnection::processActivePowerPccTRegisterValues(const QVector<quint16> values)
{
    float receivedActivePowerPccT = ModbusDataUtils::convertToInt16(values) * 1.0 * pow(10, 1);
    emit activePowerPccTReadFinished(receivedActivePowerPccT);

    if (m_activePowerPccT != receivedActivePowerPccT)
    {
        m_activePowerPccT = receivedActivePowerPccT;
        emit activePowerPccTChanged(m_activePowerPccT);
    }
}

void SofarsolarModbusRtuConnection::processVoltageBat1RegisterValues(const QVector<quint16> values)
{
    float receivedVoltageBat1 = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -1);
    emit voltageBat1ReadFinished(receivedVoltageBat1);

    if (m_voltageBat1 != receivedVoltageBat1)
    {
        m_voltageBat1 = receivedVoltageBat1;
        emit voltageBat1Changed(m_voltageBat1);
    }
}

void SofarsolarModbusRtuConnection::processCurrentBat1RegisterValues(const QVector<quint16> values)
{
    float receivedCurrentBat1 = ModbusDataUtils::convertToInt16(values) * 1.0 * pow(10, -2);
    emit currentBat1ReadFinished(receivedCurrentBat1);

    if (m_currentBat1 != receivedCurrentBat1)
    {
        m_currentBat1 = receivedCurrentBat1;
        emit currentBat1Changed(m_currentBat1);
    }
}

void SofarsolarModbusRtuConnection::processPowerBat1RegisterValues(const QVector<quint16> values)
{
    qint16 receivedPowerBat1 = ModbusDataUtils::convertToInt16(values);
    emit powerBat1ReadFinished(receivedPowerBat1);

    if (m_powerBat1 != receivedPowerBat1)
    {
        m_powerBat1 = receivedPowerBat1;
        emit powerBat1Changed(m_powerBat1);
    }
}

void SofarsolarModbusRtuConnection::processTempBat1RegisterValues(const QVector<quint16> values)
{
    qint16 receivedTempBat1 = ModbusDataUtils::convertToInt16(values);
    emit tempBat1ReadFinished(receivedTempBat1);

    if (m_tempBat1 != receivedTempBat1)
    {
        m_tempBat1 = receivedTempBat1;
        emit tempBat1Changed(m_tempBat1);
    }
}

void SofarsolarModbusRtuConnection::processSocBat1RegisterValues(const QVector<quint16> values)
{
    quint16 receivedSocBat1 = ModbusDataUtils::convertToUInt16(values);
    emit socBat1ReadFinished(receivedSocBat1);

    if (m_socBat1 != receivedSocBat1)
    {
        m_socBat1 = receivedSocBat1;
        emit socBat1Changed(m_socBat1);
    }
}

void SofarsolarModbusRtuConnection::processSohBat1RegisterValues(const QVector<quint16> values)
{
    quint16 receivedSohBat1 = ModbusDataUtils::convertToUInt16(values);
    emit sohBat1ReadFinished(receivedSohBat1);

    if (m_sohBat1 != receivedSohBat1)
    {
        m_sohBat1 = receivedSohBat1;
        emit sohBat1Changed(m_sohBat1);
    }
}

void SofarsolarModbusRtuConnection::processCycleBat1RegisterValues(const QVector<quint16> values)
{
    quint16 receivedCycleBat1 = ModbusDataUtils::convertToUInt16(values);
    emit cycleBat1ReadFinished(receivedCycleBat1);

    if (m_cycleBat1 != receivedCycleBat1)
    {
        m_cycleBat1 = receivedCycleBat1;
        emit cycleBat1Changed(m_cycleBat1);
    }
}

void SofarsolarModbusRtuConnection::processPowerControlRegisterValues(const QVector<quint16> values)
{
    float receivedPowerControl = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, 0);
    emit powerControlReadFinished(receivedPowerControl);

    if (m_powerControl != receivedPowerControl)
    {
        m_powerControl = receivedPowerControl;
        emit powerControlChanged(m_powerControl);
    }
}

void SofarsolarModbusRtuConnection::processActivePowerOutputLimitRegisterValues(const QVector<quint16> values)
{
    float receivedActivePowerOutputLimit = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, 0);
    emit activePowerOutputLimitReadFinished(receivedActivePowerOutputLimit);

    if (m_activePowerOutputLimit != receivedActivePowerOutputLimit)
    {
        m_activePowerOutputLimit = receivedActivePowerOutputLimit;
        emit activePowerOutputLimitChanged(m_activePowerOutputLimit);
    }
}

void SofarsolarModbusRtuConnection::handleModbusError(ModbusRtuReply::Error error)
{
    if (error == ModbusRtuReply::NoError)
    {
        // Reset the communication counter and we know we can reach the device
        m_communicationFailedCounter = 0;
        if (!m_communicationWorking)
            qCDebug(dcSofarsolarModbusRtuConnection()) << "Received a reply without any errors. The communication with the device seems to work now.";

        m_communicationWorking = true;
        evaluateReachableState();
    }
    else
    {
        m_communicationFailedCounter++;
        if (m_communicationWorking && m_communicationFailedCounter >= m_communicationFailedMax)
        {
            m_communicationWorking = false;
            qCWarning(dcSofarsolarModbusRtuConnection()) << "Received" << m_communicationFailedCounter << "errors while communicating with the RTU master. Mark as not reachable until the communication works again.";
            evaluateReachableState();
        }
    }
}

void SofarsolarModbusRtuConnection::testReachability()
{
    if (m_checkRechableReply)
        return;

    // Try to read the check reachability register systemStatus in order to verify if the communication is working or not.
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Test reachability by reading \"System status, address is 0x0404\" register:" << 1028 << "size:" << 1;
    m_checkRechableReply = readSystemStatus();
    if (!m_checkRechableReply)
    {
        qCDebug(dcSofarsolarModbusRtuConnection()) << "Error occurred verifying reachability by reading \"System status, address is 0x0404\" register";
        onReachabilityCheckFailed();
        return;
    }

    if (m_checkRechableReply->isFinished())
    {
        m_checkRechableReply = nullptr;
        onReachabilityCheckFailed();
        return;
    }

    connect(m_checkRechableReply, &ModbusRtuReply::finished, this, [this]()
            {
        // Note: we don't care about the result here, only the error
        handleModbusError(m_checkRechableReply->error());
        if (m_checkRechableReply->error() != ModbusRtuReply::NoError)
            onReachabilityCheckFailed();

        m_checkRechableReply = nullptr; });

    connect(m_checkRechableReply, &ModbusRtuReply::errorOccurred, this, [this](ModbusRtuReply::Error error)
            { qCDebug(dcSofarsolarModbusRtuConnection()) << "ModbusRtu reply error occurred while verifying reachability by reading \"System status, address is 0x0404\" register" << error << m_checkRechableReply->errorString(); });
}

void SofarsolarModbusRtuConnection::verifyInitFinished()
{
    if (m_pendingInitReplies.isEmpty())
    {
        finishInitialization(true);
    }
}

void SofarsolarModbusRtuConnection::finishInitialization(bool success)
{
    if (success)
    {
        qCDebug(dcSofarsolarModbusRtuConnection()) << "Initialization finished of SofarsolarModbusRtuConnection finished successfully";
    }
    else
    {
        qCWarning(dcSofarsolarModbusRtuConnection()) << "Initialization finished of SofarsolarModbusRtuConnection failed.";
    }

    // Cleanup init
    delete m_initObject;
    m_initObject = nullptr;
    m_pendingInitReplies.clear();

    emit initializationFinished(success);
}

void SofarsolarModbusRtuConnection::verifyUpdateFinished()
{
    if (m_pendingUpdateReplies.isEmpty())
    {
        emit updateFinished();
    }
}

void SofarsolarModbusRtuConnection::onReachabilityCheckFailed()
{
    m_checkReachableRetriesCount++;

    if (m_checkReachableRetriesCount <= m_checkReachableRetries)
    {
        qCDebug(dcSofarsolarModbusRtuConnection()) << "Reachability test failed. Retry in on second" << m_checkReachableRetriesCount << "/" << m_checkReachableRetries;
        QTimer::singleShot(1000, this, &SofarsolarModbusRtuConnection::testReachability);
        return;
    }

    // The test reachability method failed, not retrying any more
    emit checkReachabilityFailed();
}

void SofarsolarModbusRtuConnection::evaluateReachableState()
{
    bool reachable = m_communicationWorking && m_modbusRtuMaster->connected();
    if (m_reachable == reachable)
        return;

    m_reachable = reachable;
    emit reachableChanged(m_reachable);
    m_checkReachableRetriesCount = 0;
}

ModbusRtuReply* SofarsolarModbusRtuConnection::writePowerControlBlock(QVector<quint16> values)
{
    // Write register block "powerControl"
    qCDebug(dcSofarsolarModbusRtuConnection()) << "--> Write block \"powerControl\" registers from:" << 4357 << "size:" << 2;
    return m_modbusRtuMaster->writeHoldingRegisters(m_slaveId, 4357, values);
}

QDebug operator<<(QDebug debug, SofarsolarModbusRtuConnection *sofarsolarModbusRtuConnection)
{
    debug.nospace().noquote() << "SofarsolarModbusRtuConnection(" << sofarsolarModbusRtuConnection->modbusRtuMaster()->modbusUuid().toString() << ", " << sofarsolarModbusRtuConnection->modbusRtuMaster()->serialPort() << ", slave ID:" << sofarsolarModbusRtuConnection->slaveId() << ")" << "\n";
    debug.nospace().noquote() << "    - System status, address is 0x0404: " << sofarsolarModbusRtuConnection->systemStatus() << "\n";
    debug.nospace().noquote() << "    - Frequency grid (0x0484): " << sofarsolarModbusRtuConnection->frequencyGrid() << " [Hz]" << "\n";
    debug.nospace().noquote() << "    - Active power at point of common coupling (0x0488): " << sofarsolarModbusRtuConnection->activePowerPcc() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Voltage phase R (0x048D): " << sofarsolarModbusRtuConnection->voltagePhaseR() << " [V]" << "\n";
    debug.nospace().noquote() << "    - Voltage phase S (0x0498): " << sofarsolarModbusRtuConnection->voltagePhaseS() << " [V]" << "\n";
    debug.nospace().noquote() << "    - Voltage phase T (0x04A3): " << sofarsolarModbusRtuConnection->voltagePhaseT() << " [V]" << "\n";
    debug.nospace().noquote() << "    - Power PV1 (0x0586): " << sofarsolarModbusRtuConnection->powerPv1() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Power PV2 (0x0589): " << sofarsolarModbusRtuConnection->powerPv2() << " [W]" << "\n";
    debug.nospace().noquote() << "    - PV generation total (0x0686): " << sofarsolarModbusRtuConnection->pvGenerationTotal() << " [kWh]" << "\n";
    debug.nospace().noquote() << "    - Energy purchase total (0x068E): " << sofarsolarModbusRtuConnection->energyPurchaseTotal() << " [kWh]" << "\n";
    debug.nospace().noquote() << "    - Energy selling total (0x0692): " << sofarsolarModbusRtuConnection->energySellingTotal() << " [kWh]" << "\n";
    debug.nospace().noquote() << "    - Current phase R at PCC (0x0492): " << sofarsolarModbusRtuConnection->currentPccR() << " [A]" << "\n";
    debug.nospace().noquote() << "    - Active power phase R at PCC (0x0493): " << sofarsolarModbusRtuConnection->activePowerPccR() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Current phase S at PCC (0x049D): " << sofarsolarModbusRtuConnection->currentPccS() << " [A]" << "\n";
    debug.nospace().noquote() << "    - Active power phase S at PCC (0x049E): " << sofarsolarModbusRtuConnection->activePowerPccS() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Current phase T at PCC (0x04A8): " << sofarsolarModbusRtuConnection->currentPccT() << " [A]" << "\n";
    debug.nospace().noquote() << "    - Active power phase T at PCC (0x04A9): " << sofarsolarModbusRtuConnection->activePowerPccT() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Voltage battery 1 (0x0604): " << sofarsolarModbusRtuConnection->voltageBat1() << " [V]" << "\n";
    debug.nospace().noquote() << "    - Current battery 1 (0x0605): " << sofarsolarModbusRtuConnection->currentBat1() << " [A]" << "\n";
    debug.nospace().noquote() << "    - Power battery 1 (0x0606): " << sofarsolarModbusRtuConnection->powerBat1() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Temperature battery 1 (0x0607): " << sofarsolarModbusRtuConnection->tempBat1() << " [°C]" << "\n";
    debug.nospace().noquote() << "    - State of charge battery 1 (0x0608): " << sofarsolarModbusRtuConnection->socBat1() << " [%]" << "\n";
    debug.nospace().noquote() << "    - State of health battery 1 (0x0609): " << sofarsolarModbusRtuConnection->sohBat1() << " [%]" << "\n";
    debug.nospace().noquote() << "    - Charge cycles battery 1 (0x060A): " << sofarsolarModbusRtuConnection->cycleBat1() << "\n";
    debug.nospace().noquote() << "    - bit-coded control register (0x1105): " << sofarsolarModbusRtuConnection->powerControl() << "\n";
    debug.nospace().noquote() << "    - Active power export limit (0x1106): " << sofarsolarModbusRtuConnection->activePowerOutputLimit() << " [W]" << "\n";
    return debug.quote().space();
}
