/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Copyright 2013 - 2024, nymea GmbH
* Contact: contact@nymea.io
*
* This fileDescriptor is part of nymea.
* This project including source code and documentation is protected by
* copyright law, and remains the property of nymea GmbH. All rights, including
* reproduction, publication, editing and translation, are reserved. The use of
* this project is subject to the terms of a license agreement to be concluded
* with nymea GmbH in accordance with the terms of use of nymea GmbH, available
* under https://nymea.io/license
*
* GNU Lesser General Public License Usage
* Alternatively, this project may be redistributed and/or modified under the
* terms of the GNU Lesser General Public License as published by the Free
* Software Foundation; version 3. This project is distributed in the hope that
* it will be useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this project. If not, see <https://www.gnu.org/licenses/>.
*
* For any further details and any questions please contact us under
* contact@nymea.io or see our FAQ/Licensing Information on
* https://nymea.io/license/faq
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* WARNING
*
* This file has been autogenerated. Any changes in this file may be overwritten.
* If you want to change something, update the register json or the tool.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef LAMBDAMODBUSTCPCONNECTION_H
#define LAMBDAMODBUSTCPCONNECTION_H

#include <QObject>

#include <modbusdatautils.h>
#include <modbustcpmaster.h>

class LambdaModbusTcpConnection : public ModbusTCPMaster
{
    Q_OBJECT
public:
    enum Registers {
        RegisterOutdoorTemperature = 3,
        RegisterPowerDemand = 103,
        RegisterPowerActual = 104,
        RegisterPowerSetpoint = 105,
        RegisterSystemStatus = 1003,
        RegisterFlowTemperature = 1005,
        RegisterReturnTemperature = 1006,
        RegisterHeatSourceInletTemperature = 1008,
        RegisterHeatSourceOutletTemperature = 1009,
        RegisterRoomTemperature = 5005,
        RegisterHotWaterTemperature = 5006
    };
    Q_ENUM(Registers)

    enum SystemStatus {
        SystemStatusInit = 0,
        SystemStatusReference = 1,
        SystemStatusRestartBlock = 2,
        SystemStatusReady = 3,
        SystemStatusStartPumps = 4,
        SystemStatusStartCompressor = 5,
        SystemStatusPreRegulation = 6,
        SystemStatusRegulation = 7,
        SystemStatusNotUsed = 8,
        SystemStatusCooling = 9,
        SystemStatusDefrosting = 10
    };
    Q_ENUM(SystemStatus)

    explicit LambdaModbusTcpConnection(const QHostAddress &hostAddress, uint port, quint16 slaveId, QObject *parent = nullptr);
    ~LambdaModbusTcpConnection() = default;

    bool reachable() const;

    ModbusDataUtils::ByteOrder endianness() const;
    void setEndianness(ModbusDataUtils::ByteOrder endianness);

    uint checkReachableRetries() const;
    void setCheckReachableRetries(uint checkReachableRetries);

    /* Outdoor temperature [°C] - Address: 3, Size: 1 */
    float outdoorTemperature() const;

    /* power demand written by EMS [W] - Address: 103, Size: 1 */
    quint16 powerDemand() const;
    QModbusReply *setPowerDemand(quint16 powerDemand);

    /* System status - Address: 1003, Size: 1 */
    SystemStatus systemStatus() const;

    /* actual power consumption of all configured heat pumps [W] - Address: 104, Size: 1 */
    qint16 powerActual() const;

    /* realized power consumption setpoint of all configured heat pumps [W] - Address: 105, Size: 1 */
    qint16 powerSetpoint() const;

    /* Flow [°C] - Address: 1005, Size: 1 */
    float flowTemperature() const;

    /* Return [°C] - Address: 1006, Size: 1 */
    float returnTemperature() const;

    /* Heat source inlet temperature [°C] - Address: 1008, Size: 1 */
    float heatSourceInletTemperature() const;

    /* Heat source outlet temperature [°C] - Address: 1009, Size: 1 */
    float heatSourceOutletTemperature() const;

    /* actual temperatur room device sensor [°C] - Address: 5005, Size: 1 */
    float roomTemperature() const;

    /* Hot water temperature [°C] - Address: 5006, Size: 1 */
    float hotWaterTemperature() const;

    /* Read block from start addess 104 with size of 2 registers containing following 2 properties:
      - actual power consumption of all configured heat pumps [W] - Address: 104, Size: 1
      - realized power consumption setpoint of all configured heat pumps [W] - Address: 105, Size: 1
    */
    void updatePowerBlock();

    /* Read block from start addess 1005 with size of 2 registers containing following 2 properties:
      - Flow [°C] - Address: 1005, Size: 1
      - Return [°C] - Address: 1006, Size: 1
    */
    void updateLineTempBlock();

    /* Read block from start addess 1008 with size of 2 registers containing following 2 properties:
      - Heat source inlet temperature [°C] - Address: 1008, Size: 1
      - Heat source outlet temperature [°C] - Address: 1009, Size: 1
    */
    void updateHeatSourceBlock();

    /* Read block from start addess 5005 with size of 2 registers containing following 2 properties:
      - actual temperatur room device sensor [°C] - Address: 5005, Size: 1
      - Hot water temperature [°C] - Address: 5006, Size: 1
    */
    void updateHeatingCircuitBlock();

    void updateOutdoorTemperature();
    void updatePowerDemand();
    void updateSystemStatus();

    void updatePowerActual();
    void updatePowerSetpoint();
    void updateFlowTemperature();
    void updateReturnTemperature();
    void updateHeatSourceInletTemperature();
    void updateHeatSourceOutletTemperature();
    void updateRoomTemperature();
    void updateHotWaterTemperature();

    QModbusReply *readOutdoorTemperature();
    QModbusReply *readPowerDemand();
    QModbusReply *readSystemStatus();
    QModbusReply *readPowerActual();
    QModbusReply *readPowerSetpoint();
    QModbusReply *readFlowTemperature();
    QModbusReply *readReturnTemperature();
    QModbusReply *readHeatSourceInletTemperature();
    QModbusReply *readHeatSourceOutletTemperature();
    QModbusReply *readRoomTemperature();
    QModbusReply *readHotWaterTemperature();

    /* Read block from start addess 104 with size of 2 registers containing following 2 properties:
     - actual power consumption of all configured heat pumps [W] - Address: 104, Size: 1
     - realized power consumption setpoint of all configured heat pumps [W] - Address: 105, Size: 1
    */
    QModbusReply *readBlockPower();

    /* Read block from start addess 1005 with size of 2 registers containing following 2 properties:
     - Flow [°C] - Address: 1005, Size: 1
     - Return [°C] - Address: 1006, Size: 1
    */
    QModbusReply *readBlockLineTemp();

    /* Read block from start addess 1008 with size of 2 registers containing following 2 properties:
     - Heat source inlet temperature [°C] - Address: 1008, Size: 1
     - Heat source outlet temperature [°C] - Address: 1009, Size: 1
    */
    QModbusReply *readBlockHeatSource();

    /* Read block from start addess 5005 with size of 2 registers containing following 2 properties:
     - actual temperatur room device sensor [°C] - Address: 5005, Size: 1
     - Hot water temperature [°C] - Address: 5006, Size: 1
    */
    QModbusReply *readBlockHeatingCircuit();


    virtual bool initialize();
    virtual bool update();
    virtual void update2();
    virtual void update3();
    virtual void update4();
    virtual void update5();
    virtual void update6();
    virtual void update7();


signals:
    void reachableChanged(bool reachable);
    void checkReachabilityFailed();
    void checkReachableRetriesChanged(uint checkReachableRetries);

    void initializationFinished(bool success);
    void updateFinished();

    void endiannessChanged(ModbusDataUtils::ByteOrder endianness);

    void outdoorTemperatureChanged(float outdoorTemperature);
    void outdoorTemperatureReadFinished(float outdoorTemperature);
    void powerDemandChanged(quint16 powerDemand);
    void powerDemandReadFinished(quint16 powerDemand);
    void systemStatusChanged(SystemStatus systemStatus);
    void systemStatusReadFinished(SystemStatus systemStatus);

    void powerActualChanged(qint16 powerActual);
    void powerActualReadFinished(qint16 powerActual);
    void powerSetpointChanged(qint16 powerSetpoint);
    void powerSetpointReadFinished(qint16 powerSetpoint);
    void flowTemperatureChanged(float flowTemperature);
    void flowTemperatureReadFinished(float flowTemperature);
    void returnTemperatureChanged(float returnTemperature);
    void returnTemperatureReadFinished(float returnTemperature);
    void heatSourceInletTemperatureChanged(float heatSourceInletTemperature);
    void heatSourceInletTemperatureReadFinished(float heatSourceInletTemperature);
    void heatSourceOutletTemperatureChanged(float heatSourceOutletTemperature);
    void heatSourceOutletTemperatureReadFinished(float heatSourceOutletTemperature);
    void roomTemperatureChanged(float roomTemperature);
    void roomTemperatureReadFinished(float roomTemperature);
    void hotWaterTemperatureChanged(float hotWaterTemperature);
    void hotWaterTemperatureReadFinished(float hotWaterTemperature);

protected:
    float m_outdoorTemperature = 0;
    quint16 m_powerDemand = 0;
    SystemStatus m_systemStatus = SystemStatusRegulation;
    qint16 m_powerActual = 0;
    qint16 m_powerSetpoint = 0;
    float m_flowTemperature = 0;
    float m_returnTemperature = 0;
    float m_heatSourceInletTemperature = 0;
    float m_heatSourceOutletTemperature = 0;
    float m_roomTemperature = 0;
    float m_hotWaterTemperature = 0;

    void processOutdoorTemperatureRegisterValues(const QVector<quint16> values);
    void processPowerDemandRegisterValues(const QVector<quint16> values);
    void processSystemStatusRegisterValues(const QVector<quint16> values);

    void processPowerActualRegisterValues(const QVector<quint16> values);
    void processPowerSetpointRegisterValues(const QVector<quint16> values);

    void processFlowTemperatureRegisterValues(const QVector<quint16> values);
    void processReturnTemperatureRegisterValues(const QVector<quint16> values);

    void processHeatSourceInletTemperatureRegisterValues(const QVector<quint16> values);
    void processHeatSourceOutletTemperatureRegisterValues(const QVector<quint16> values);

    void processRoomTemperatureRegisterValues(const QVector<quint16> values);
    void processHotWaterTemperatureRegisterValues(const QVector<quint16> values);

    void handleModbusError(QModbusDevice::Error error);
    void testReachability();

private:
    ModbusDataUtils::ByteOrder m_endianness = ModbusDataUtils::ByteOrderBigEndian;
    quint16 m_slaveId = 1;

    bool m_reachable = false;
    QModbusReply *m_checkRechableReply = nullptr;
    uint m_checkReachableRetries = 0;
    uint m_checkReachableRetriesCount = 0;
    bool m_communicationWorking = false;
    quint8 m_communicationFailedMax = 30;
    quint8 m_communicationFailedCounter = 0;

    QVector<QModbusReply *> m_pendingInitReplies;
    QVector<QModbusReply *> m_pendingUpdateReplies;

    QObject *m_initObject = nullptr;
    void verifyInitFinished();
    void finishInitialization(bool success);

    void verifyUpdateFinished();

    void onReachabilityCheckFailed();
    void evaluateReachableState();

};

QDebug operator<<(QDebug debug, LambdaModbusTcpConnection *lambdaModbusTcpConnection);

#endif // LAMBDAMODBUSTCPCONNECTION_H
