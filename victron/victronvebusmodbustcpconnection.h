/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Copyright 2013 - 2025, nymea GmbH
* Contact: contact@nymea.io
*
* This fileDescriptor is part of nymea.
* This project including source code and documentation is protected by
* copyright law, and remains the property of nymea GmbH. All rights, including
* reproduction, publication, editing and translation, are reserved. The use of
* this project is subject to the terms of a license agreement to be concluded
* with nymea GmbH in accordance with the terms of use of nymea GmbH, available
* under https://nymea.io/license
*
* GNU Lesser General Public License Usage
* Alternatively, this project may be redistributed and/or modified under the
* terms of the GNU Lesser General Public License as published by the Free
* Software Foundation; version 3. This project is distributed in the hope that
* it will be useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this project. If not, see <https://www.gnu.org/licenses/>.
*
* For any further details and any questions please contact us under
* contact@nymea.io or see our FAQ/Licensing Information on
* https://nymea.io/license/faq
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* WARNING
*
* This file has been autogenerated. Any changes in this file may be overwritten.
* If you want to change something, update the register json or the tool.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef VICTRONVEBUSMODBUSTCPCONNECTION_H
#define VICTRONVEBUSMODBUSTCPCONNECTION_H

#include <QObject>

#include <modbusdatautils.h>
#include <modbustcpmaster.h>

class VictronVebusModbusTcpConnection : public ModbusTCPMaster
{
    Q_OBJECT
public:
    enum Registers {
        RegisterPowerSetpointPhaseA = 37,
        RegisterDisableCharge = 38,
        RegisterDisableFeedIn = 39,
        RegisterPowerSetpointPhaseB = 40,
        RegisterPowerSetpointPhaseC = 41
    };
    Q_ENUM(Registers)

    explicit VictronVebusModbusTcpConnection(const QHostAddress &hostAddress, uint port, quint16 slaveId, QObject *parent = nullptr);
    ~VictronVebusModbusTcpConnection() = default;

    bool reachable() const;

    ModbusDataUtils::ByteOrder endianness() const;
    void setEndianness(ModbusDataUtils::ByteOrder endianness);

    uint checkReachableRetries() const;
    void setCheckReachableRetries(uint checkReachableRetries);

    void tryConnect(QVector<quint16> adresses, int it);

    /* ESS power setpoint phase 1 [W] - Address: 37, Size: 1 */
    qint16 powerSetpointPhaseA() const;
    QModbusReply *setPowerSetpointPhaseA(qint16 powerSetpointPhaseA);

    /* disable charge flag [-] - Address: 38, Size: 1 */
    quint16 disableCharge() const;
    QModbusReply *setDisableCharge(quint16 disableCharge);

    /* disable feed in flag [-] - Address: 39, Size: 1 */
    quint16 disableFeedIn() const;
    QModbusReply *setDisableFeedIn(quint16 disableFeedIn);

    /* ESS power setpoint phase 2 [W] - Address: 40, Size: 1 */
    qint16 powerSetpointPhaseB() const;
    QModbusReply *setPowerSetpointPhaseB(qint16 powerSetpointPhaseB);

    /* ESS power setpoint phase 3 [W] - Address: 41, Size: 1 */
    qint16 powerSetpointPhaseC() const;
    QModbusReply *setPowerSetpointPhaseC(qint16 powerSetpointPhaseC);

    /* Read block from start addess 37 with size of 5 registers containing following 5 properties:
      - ESS power setpoint phase 1 [W] - Address: 37, Size: 1
      - disable charge flag [-] - Address: 38, Size: 1
      - disable feed in flag [-] - Address: 39, Size: 1
      - ESS power setpoint phase 2 [W] - Address: 40, Size: 1
      - ESS power setpoint phase 3 [W] - Address: 41, Size: 1
    */
    void updateVebussetpBlock();


    void updatePowerSetpointPhaseA();
    void updateDisableCharge();
    void updateDisableFeedIn();
    void updatePowerSetpointPhaseB();
    void updatePowerSetpointPhaseC();

    QModbusReply *readPowerSetpointPhaseA();
    QModbusReply *readDisableCharge();
    QModbusReply *readDisableFeedIn();
    QModbusReply *readPowerSetpointPhaseB();
    QModbusReply *readPowerSetpointPhaseC();

    /* Read block from start addess 37 with size of 5 registers containing following 5 properties:
     - ESS power setpoint phase 1 [W] - Address: 37, Size: 1
     - disable charge flag [-] - Address: 38, Size: 1
     - disable feed in flag [-] - Address: 39, Size: 1
     - ESS power setpoint phase 2 [W] - Address: 40, Size: 1
     - ESS power setpoint phase 3 [W] - Address: 41, Size: 1
    */
    QModbusReply *readBlockVebussetp();


    virtual bool initialize();
    virtual bool update();
    virtual void writeSetpoints(int16_t powerSetPhase);

signals:
    void reachableChanged(bool reachable);
    void checkReachabilityFailed();
    void checkReachableRetriesChanged(uint checkReachableRetries);

    void initializationFinished(bool success);
    void updateFinished();

    void endiannessChanged(ModbusDataUtils::ByteOrder endianness);


    void powerSetpointPhaseAChanged(qint16 powerSetpointPhaseA);
    void powerSetpointPhaseAReadFinished(qint16 powerSetpointPhaseA);
    void disableChargeChanged(quint16 disableCharge);
    void disableChargeReadFinished(quint16 disableCharge);
    void disableFeedInChanged(quint16 disableFeedIn);
    void disableFeedInReadFinished(quint16 disableFeedIn);
    void powerSetpointPhaseBChanged(qint16 powerSetpointPhaseB);
    void powerSetpointPhaseBReadFinished(qint16 powerSetpointPhaseB);
    void powerSetpointPhaseCChanged(qint16 powerSetpointPhaseC);
    void powerSetpointPhaseCReadFinished(qint16 powerSetpointPhaseC);

protected:
    qint16 m_powerSetpointPhaseA = 0;
    quint16 m_disableCharge = 0;
    quint16 m_disableFeedIn = 0;
    qint16 m_powerSetpointPhaseB = 0;
    qint16 m_powerSetpointPhaseC = 0;


    void processPowerSetpointPhaseARegisterValues(const QVector<quint16> values);
    void processDisableChargeRegisterValues(const QVector<quint16> values);
    void processDisableFeedInRegisterValues(const QVector<quint16> values);
    void processPowerSetpointPhaseBRegisterValues(const QVector<quint16> values);
    void processPowerSetpointPhaseCRegisterValues(const QVector<quint16> values);

    void handleModbusError(QModbusDevice::Error error);
    void testReachability();

private:
    ModbusDataUtils::ByteOrder m_endianness = ModbusDataUtils::ByteOrderLittleEndian;
    quint16 m_slaveId = 1;

    bool m_reachable = false;
    QModbusReply *m_checkRechableReply = nullptr;
    uint m_checkReachableRetries = 0;
    uint m_checkReachableRetriesCount = 0;
    bool m_communicationWorking = false;
    quint8 m_communicationFailedMax = 5;
    quint8 m_communicationFailedCounter = 0;

    QVector<QModbusReply *> m_pendingInitReplies;
    QVector<QModbusReply *> m_pendingUpdateReplies;

    QObject *m_initObject = nullptr;
    void verifyInitFinished();
    void finishInitialization(bool success);

    void verifyUpdateFinished();

    void onReachabilityCheckFailed();
    void evaluateReachableState();

};

QDebug operator<<(QDebug debug, VictronVebusModbusTcpConnection *victronVebusModbusTcpConnection);

#endif // VICTRONVEBUSMODBUSTCPCONNECTION_H
