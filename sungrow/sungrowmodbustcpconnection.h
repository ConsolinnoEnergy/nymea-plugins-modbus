/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Copyright 2013 - 2024, nymea GmbH
* Contact: contact@nymea.io
*
* This fileDescriptor is part of nymea.
* This project including source code and documentation is protected by
* copyright law, and remains the property of nymea GmbH. All rights, including
* reproduction, publication, editing and translation, are reserved. The use of
* this project is subject to the terms of a license agreement to be concluded
* with nymea GmbH in accordance with the terms of use of nymea GmbH, available
* under https://nymea.io/license
*
* GNU Lesser General Public License Usage
* Alternatively, this project may be redistributed and/or modified under the
* terms of the GNU Lesser General Public License as published by the Free
* Software Foundation; version 3. This project is distributed in the hope that
* it will be useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this project. If not, see <https://www.gnu.org/licenses/>.
*
* For any further details and any questions please contact us under
* contact@nymea.io or see our FAQ/Licensing Information on
* https://nymea.io/license/faq
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* WARNING
*
* This file has been autogenerated. Any changes in this file may be overwritten.
* If you want to change something, update the register json or the tool.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef SUNGROWMODBUSTCPCONNECTION_H
#define SUNGROWMODBUSTCPCONNECTION_H

#include <QObject>

#include <modbusdatautils.h>
#include <modbustcpmaster.h>

class SungrowModbusTcpConnection : public ModbusTCPMaster
{
    Q_OBJECT
public:
    enum Registers {
        RegisterProtocolNumber = 4949,
        RegisterProtocolVersion = 4951,
        RegisterArmSoftwareVersion = 4953,
        RegisterDspSoftwareVersion = 4968,
        RegisterSerialNumber = 4989,
        RegisterDeviceTypeCode = 4999,
        RegisterNominalOutputPower = 5000,
        RegisterInverterTemperature = 5007,
        RegisterDummy0 = 5008,
        RegisterTotalPVPower = 5016,
        RegisterPhaseAVoltage = 5018,
        RegisterPhaseBVoltage = 5019,
        RegisterPhaseCVoltage = 5020,
        RegisterDummy1 = 5021,
        RegisterReactivePower = 5032,
        RegisterPowerFactor = 5034,
        RegisterGridFrequency = 5035,
        RegisterSystemState = 12999,
        RegisterRunningState = 13000,
        RegisterDailyPVGeneration = 13001,
        RegisterTotalPVGeneration = 13002,
        RegisterDailyPVExport = 13004,
        RegisterTotalPVExport = 13005,
        RegisterLoadPower = 13007,
        RegisterExportPower = 13009,
        RegisterDailyBatteryChargePV = 13011,
        RegisterTotalBatteryChargePV = 13012,
        RegisterDummy2 = 13014,
        RegisterBatteryVoltage = 13019,
        RegisterBatteryCurrent = 13020,
        RegisterBatteryPower = 13021,
        RegisterBatteryLevel = 13022,
        RegisterBatteryHealthState = 13023,
        RegisterBatteryTemperature = 13024,
        RegisterDummy3 = 13025,
        RegisterGridState = 13029,
        RegisterPhaseACurrent = 13030,
        RegisterPhaseBCurrent = 13031,
        RegisterPhaseCCurrent = 13032,
        RegisterTotalActivePower = 13033,
        RegisterDailyImportEnergy = 13035,
        RegisterTotalImportEnergy = 13036,
        RegisterDummy4 = 13038,
        RegisterTotalExportEnergy = 13045,
        RegisterBatteryType = 13054,
        RegisterBatteryNominalVoltage = 13055,
        RegisterBatteryCapacity = 13056
    };
    Q_ENUM(Registers)

    enum SystemState {
        SystemStateStop = 2,
        SystemStateStandby = 8,
        SystemStateInitialStandby = 16,
        SystemStateStartup = 32,
        SystemStateRunning = 64,
        SystemStateFault = 256,
        SystemStateRunningMainMode = 1024,
        SystemStateRunningForcedMode = 2048,
        SystemStateRunningOffGridMode = 4096,
        SystemStateRestarting = 9473,
        SystemStateRunningExternalEMSMode = 16384
    };
    Q_ENUM(SystemState)

    enum BatteryType {
        BatteryTypeLeadAcidNarada = 0,
        BatteryTypeLiIonSamsung = 1,
        BatteryTypeNoBattery = 2,
        BatteryTypeLeadAcidOther = 3,
        BatteryTypeLiIonUS2000A = 4,
        BatteryTypeLiIonLG = 5,
        BatteryTypeLiIonUS2000B = 6,
        BatteryTypeLiIonGCL = 7,
        BatteryTypeLiIonBSG = 8,
        BatteryTypeLiIonSungrow = 9,
        BatteryTypeLiIonBYD = 10,
        BatteryTypeLiIonTawaki = 11
    };
    Q_ENUM(BatteryType)

    explicit SungrowModbusTcpConnection(const QHostAddress &hostAddress, uint port, quint16 slaveId, QObject *parent = nullptr);
    ~SungrowModbusTcpConnection() = default;

    bool reachable() const;

    ModbusDataUtils::ByteOrder endianness() const;
    void setEndianness(ModbusDataUtils::ByteOrder endianness);

    uint checkReachableRetries() const;
    void setCheckReachableRetries(uint checkReachableRetries);

    /* Protocol number - Address: 4949, Size: 2 */
    quint32 protocolNumber() const;

    /* Device type code - Address: 4951, Size: 2 */
    quint32 protocolVersion() const;

    /* ARM software version - Address: 4953, Size: 15 */
    QString armSoftwareVersion() const;

    /* ARM software version - Address: 4968, Size: 15 */
    QString dspSoftwareVersion() const;

    /* Serial number - Address: 4989, Size: 10 */
    QString serialNumber() const;

    /* Device type code - Address: 4999, Size: 1 */
    quint16 deviceTypeCode() const;

    /* Nominal output power [kW] - Address: 5000, Size: 1 */
    float nominalOutputPower() const;

    /* Inverter temperature [°C] - Address: 5007, Size: 1 */
    float inverterTemperature() const;

    /* none - Address: 5008, Size: 8 */
    QVector<quint16> dummy0() const;

    /* Total PV power [W] - Address: 5016, Size: 2 */
    quint32 totalPVPower() const;

    /* Phase A voltage [V] - Address: 5018, Size: 1 */
    float phaseAVoltage() const;

    /* Phase B voltage [V] - Address: 5019, Size: 1 */
    float phaseBVoltage() const;

    /* Phase C voltage [V] - Address: 5020, Size: 1 */
    float phaseCVoltage() const;

    /* none - Address: 5021, Size: 11 */
    QVector<quint16> dummy1() const;

    /* Reactive power [var] - Address: 5032, Size: 2 */
    qint32 reactivePower() const;

    /* Power factor - Address: 5034, Size: 1 */
    float powerFactor() const;

    /* Grid frequency [Hz] - Address: 5035, Size: 1 */
    float gridFrequency() const;

    /* System state - Address: 12999, Size: 1 */
    SystemState systemState() const;

    /* Running state - Address: 13000, Size: 1 */
    quint16 runningState() const;

    /* Daily PV generation [kWh] - Address: 13001, Size: 1 */
    float dailyPVGeneration() const;

    /* Total PV generation [kWh] - Address: 13002, Size: 2 */
    float totalPVGeneration() const;

    /* Daily PV export [kWh] - Address: 13004, Size: 1 */
    float dailyPVExport() const;

    /* Total PV export´ [kWh] - Address: 13005, Size: 2 */
    float totalPVExport() const;

    /* Load power [W] - Address: 13007, Size: 2 */
    qint32 loadPower() const;

    /* Export power [W] - Address: 13009, Size: 2 */
    qint32 exportPower() const;

    /* Daily battery charge from PV [kWh] - Address: 13011, Size: 1 */
    float dailyBatteryChargePV() const;

    /* Total battery charge from PV [kWh] - Address: 13012, Size: 2 */
    float totalBatteryChargePV() const;

    /* none - Address: 13014, Size: 5 */
    QVector<quint16> dummy2() const;

    /* Battery voltage [V] - Address: 13019, Size: 1 */
    float batteryVoltage() const;

    /* Battery current [A] - Address: 13020, Size: 1 */
    float batteryCurrent() const;

    /* Battery power [W] - Address: 13021, Size: 1 */
    quint16 batteryPower() const;

    /* Battery level [%] - Address: 13022, Size: 1 */
    float batteryLevel() const;

    /* Battery health state [%] - Address: 13023, Size: 1 */
    float batteryHealthState() const;

    /* Battery temperature [°C] - Address: 13024, Size: 1 */
    float batteryTemperature() const;

    /* none - Address: 13025, Size: 4 */
    QVector<quint16> dummy3() const;

    /* Grid state - Address: 13029, Size: 1 */
    quint16 gridState() const;

    /* Phase A current [A] - Address: 13030, Size: 1 */
    float phaseACurrent() const;

    /* Phase B current [A] - Address: 13031, Size: 1 */
    float phaseBCurrent() const;

    /* Phase C current [A] - Address: 13032, Size: 1 */
    float phaseCCurrent() const;

    /* Total active power [W] - Address: 13033, Size: 2 */
    qint32 totalActivePower() const;

    /* Daily import energy [kWh] - Address: 13035, Size: 1 */
    float dailyImportEnergy() const;

    /* Total import energy [kWh] - Address: 13036, Size: 2 */
    float totalImportEnergy() const;

    /* none - Address: 13038, Size: 7 */
    QVector<quint16> dummy4() const;

    /* Total export energy [kWh] - Address: 13045, Size: 2 */
    float totalExportEnergy() const;

    /* Battery type - Address: 13054, Size: 1 */
    BatteryType batteryType() const;

    /* Battery nominal voltage [V] - Address: 13055, Size: 1 */
    float batteryNominalVoltage() const;

    /* Battery capacity [Ah] - Address: 13056, Size: 1 */
    quint16 batteryCapacity() const;

    /* Read block from start addess 4949 with size of 34 registers containing following 4 properties:
      - Protocol number - Address: 4949, Size: 2
      - Device type code - Address: 4951, Size: 2
      - ARM software version - Address: 4953, Size: 15
      - ARM software version - Address: 4968, Size: 15
    */
    void updateVersionBlock();

    /* Read block from start addess 4989 with size of 12 registers containing following 3 properties:
      - Serial number - Address: 4989, Size: 10
      - Device type code - Address: 4999, Size: 1
      - Nominal output power [kW] - Address: 5000, Size: 1
    */
    void updateIdentificationBlock();

    /* Read block from start addess 5007 with size of 29 registers containing following 10 properties:
      - Inverter temperature [°C] - Address: 5007, Size: 1
      - none - Address: 5008, Size: 8
      - Total PV power [W] - Address: 5016, Size: 2
      - Phase A voltage [V] - Address: 5018, Size: 1
      - Phase B voltage [V] - Address: 5019, Size: 1
      - Phase C voltage [V] - Address: 5020, Size: 1
      - none - Address: 5021, Size: 11
      - Reactive power [var] - Address: 5032, Size: 2
      - Power factor - Address: 5034, Size: 1
      - Grid frequency [Hz] - Address: 5035, Size: 1
    */
    void updateEnergyValues1Block();

    /* Read block from start addess 12999 with size of 48 registers containing following 27 properties:
      - System state - Address: 12999, Size: 1
      - Running state - Address: 13000, Size: 1
      - Daily PV generation [kWh] - Address: 13001, Size: 1
      - Total PV generation [kWh] - Address: 13002, Size: 2
      - Daily PV export [kWh] - Address: 13004, Size: 1
      - Total PV export´ [kWh] - Address: 13005, Size: 2
      - Load power [W] - Address: 13007, Size: 2
      - Export power [W] - Address: 13009, Size: 2
      - Daily battery charge from PV [kWh] - Address: 13011, Size: 1
      - Total battery charge from PV [kWh] - Address: 13012, Size: 2
      - none - Address: 13014, Size: 5
      - Battery voltage [V] - Address: 13019, Size: 1
      - Battery current [A] - Address: 13020, Size: 1
      - Battery power [W] - Address: 13021, Size: 1
      - Battery level [%] - Address: 13022, Size: 1
      - Battery health state [%] - Address: 13023, Size: 1
      - Battery temperature [°C] - Address: 13024, Size: 1
      - none - Address: 13025, Size: 4
      - Grid state - Address: 13029, Size: 1
      - Phase A current [A] - Address: 13030, Size: 1
      - Phase B current [A] - Address: 13031, Size: 1
      - Phase C current [A] - Address: 13032, Size: 1
      - Total active power [W] - Address: 13033, Size: 2
      - Daily import energy [kWh] - Address: 13035, Size: 1
      - Total import energy [kWh] - Address: 13036, Size: 2
      - none - Address: 13038, Size: 7
      - Total export energy [kWh] - Address: 13045, Size: 2
    */
    void updateEnergyValues2Block();

    /* Read block from start addess 13054 with size of 3 registers containing following 3 properties:
      - Battery type - Address: 13054, Size: 1
      - Battery nominal voltage [V] - Address: 13055, Size: 1
      - Battery capacity [Ah] - Address: 13056, Size: 1
    */
    void updateBatteryInformationBlock();


    void updateProtocolNumber();
    void updateProtocolVersion();
    void updateArmSoftwareVersion();
    void updateDspSoftwareVersion();
    void updateSerialNumber();
    void updateDeviceTypeCode();
    void updateNominalOutputPower();
    void updateInverterTemperature();
    void updateDummy0();
    void updateTotalPVPower();
    void updatePhaseAVoltage();
    void updatePhaseBVoltage();
    void updatePhaseCVoltage();
    void updateDummy1();
    void updateReactivePower();
    void updatePowerFactor();
    void updateGridFrequency();
    void updateSystemState();
    void updateRunningState();
    void updateDailyPVGeneration();
    void updateTotalPVGeneration();
    void updateDailyPVExport();
    void updateTotalPVExport();
    void updateLoadPower();
    void updateExportPower();
    void updateDailyBatteryChargePV();
    void updateTotalBatteryChargePV();
    void updateDummy2();
    void updateBatteryVoltage();
    void updateBatteryCurrent();
    void updateBatteryPower();
    void updateBatteryLevel();
    void updateBatteryHealthState();
    void updateBatteryTemperature();
    void updateDummy3();
    void updateGridState();
    void updatePhaseACurrent();
    void updatePhaseBCurrent();
    void updatePhaseCCurrent();
    void updateTotalActivePower();
    void updateDailyImportEnergy();
    void updateTotalImportEnergy();
    void updateDummy4();
    void updateTotalExportEnergy();
    void updateBatteryType();
    void updateBatteryNominalVoltage();
    void updateBatteryCapacity();

    QModbusReply *readProtocolNumber();
    QModbusReply *readProtocolVersion();
    QModbusReply *readArmSoftwareVersion();
    QModbusReply *readDspSoftwareVersion();
    QModbusReply *readSerialNumber();
    QModbusReply *readDeviceTypeCode();
    QModbusReply *readNominalOutputPower();
    QModbusReply *readInverterTemperature();
    QModbusReply *readDummy0();
    QModbusReply *readTotalPVPower();
    QModbusReply *readPhaseAVoltage();
    QModbusReply *readPhaseBVoltage();
    QModbusReply *readPhaseCVoltage();
    QModbusReply *readDummy1();
    QModbusReply *readReactivePower();
    QModbusReply *readPowerFactor();
    QModbusReply *readGridFrequency();
    QModbusReply *readSystemState();
    QModbusReply *readRunningState();
    QModbusReply *readDailyPVGeneration();
    QModbusReply *readTotalPVGeneration();
    QModbusReply *readDailyPVExport();
    QModbusReply *readTotalPVExport();
    QModbusReply *readLoadPower();
    QModbusReply *readExportPower();
    QModbusReply *readDailyBatteryChargePV();
    QModbusReply *readTotalBatteryChargePV();
    QModbusReply *readDummy2();
    QModbusReply *readBatteryVoltage();
    QModbusReply *readBatteryCurrent();
    QModbusReply *readBatteryPower();
    QModbusReply *readBatteryLevel();
    QModbusReply *readBatteryHealthState();
    QModbusReply *readBatteryTemperature();
    QModbusReply *readDummy3();
    QModbusReply *readGridState();
    QModbusReply *readPhaseACurrent();
    QModbusReply *readPhaseBCurrent();
    QModbusReply *readPhaseCCurrent();
    QModbusReply *readTotalActivePower();
    QModbusReply *readDailyImportEnergy();
    QModbusReply *readTotalImportEnergy();
    QModbusReply *readDummy4();
    QModbusReply *readTotalExportEnergy();
    QModbusReply *readBatteryType();
    QModbusReply *readBatteryNominalVoltage();
    QModbusReply *readBatteryCapacity();

    /* Read block from start addess 4949 with size of 34 registers containing following 4 properties:
     - Protocol number - Address: 4949, Size: 2
     - Device type code - Address: 4951, Size: 2
     - ARM software version - Address: 4953, Size: 15
     - ARM software version - Address: 4968, Size: 15
    */
    QModbusReply *readBlockVersion();

    /* Read block from start addess 4989 with size of 12 registers containing following 3 properties:
     - Serial number - Address: 4989, Size: 10
     - Device type code - Address: 4999, Size: 1
     - Nominal output power [kW] - Address: 5000, Size: 1
    */
    QModbusReply *readBlockIdentification();

    /* Read block from start addess 5007 with size of 29 registers containing following 10 properties:
     - Inverter temperature [°C] - Address: 5007, Size: 1
     - none - Address: 5008, Size: 8
     - Total PV power [W] - Address: 5016, Size: 2
     - Phase A voltage [V] - Address: 5018, Size: 1
     - Phase B voltage [V] - Address: 5019, Size: 1
     - Phase C voltage [V] - Address: 5020, Size: 1
     - none - Address: 5021, Size: 11
     - Reactive power [var] - Address: 5032, Size: 2
     - Power factor - Address: 5034, Size: 1
     - Grid frequency [Hz] - Address: 5035, Size: 1
    */
    QModbusReply *readBlockEnergyValues1();

    /* Read block from start addess 12999 with size of 48 registers containing following 27 properties:
     - System state - Address: 12999, Size: 1
     - Running state - Address: 13000, Size: 1
     - Daily PV generation [kWh] - Address: 13001, Size: 1
     - Total PV generation [kWh] - Address: 13002, Size: 2
     - Daily PV export [kWh] - Address: 13004, Size: 1
     - Total PV export´ [kWh] - Address: 13005, Size: 2
     - Load power [W] - Address: 13007, Size: 2
     - Export power [W] - Address: 13009, Size: 2
     - Daily battery charge from PV [kWh] - Address: 13011, Size: 1
     - Total battery charge from PV [kWh] - Address: 13012, Size: 2
     - none - Address: 13014, Size: 5
     - Battery voltage [V] - Address: 13019, Size: 1
     - Battery current [A] - Address: 13020, Size: 1
     - Battery power [W] - Address: 13021, Size: 1
     - Battery level [%] - Address: 13022, Size: 1
     - Battery health state [%] - Address: 13023, Size: 1
     - Battery temperature [°C] - Address: 13024, Size: 1
     - none - Address: 13025, Size: 4
     - Grid state - Address: 13029, Size: 1
     - Phase A current [A] - Address: 13030, Size: 1
     - Phase B current [A] - Address: 13031, Size: 1
     - Phase C current [A] - Address: 13032, Size: 1
     - Total active power [W] - Address: 13033, Size: 2
     - Daily import energy [kWh] - Address: 13035, Size: 1
     - Total import energy [kWh] - Address: 13036, Size: 2
     - none - Address: 13038, Size: 7
     - Total export energy [kWh] - Address: 13045, Size: 2
    */
    QModbusReply *readBlockEnergyValues2();

    /* Read block from start addess 13054 with size of 3 registers containing following 3 properties:
     - Battery type - Address: 13054, Size: 1
     - Battery nominal voltage [V] - Address: 13055, Size: 1
     - Battery capacity [Ah] - Address: 13056, Size: 1
    */
    QModbusReply *readBlockBatteryInformation();


    virtual bool initialize();
    virtual void initialize1();
    virtual void initialize2();
    virtual bool update();
    virtual void update2();

signals:
    void reachableChanged(bool reachable);
    void checkReachabilityFailed();
    void checkReachableRetriesChanged(uint checkReachableRetries);

    void initializationFinished(bool success);
    void updateFinished();

    void endiannessChanged(ModbusDataUtils::ByteOrder endianness);


    void protocolNumberChanged(quint32 protocolNumber);
    void protocolNumberReadFinished(quint32 protocolNumber);
    void protocolVersionChanged(quint32 protocolVersion);
    void protocolVersionReadFinished(quint32 protocolVersion);
    void armSoftwareVersionChanged(const QString &armSoftwareVersion);
    void armSoftwareVersionReadFinished(const QString &armSoftwareVersion);
    void dspSoftwareVersionChanged(const QString &dspSoftwareVersion);
    void dspSoftwareVersionReadFinished(const QString &dspSoftwareVersion);
    void serialNumberChanged(const QString &serialNumber);
    void serialNumberReadFinished(const QString &serialNumber);
    void deviceTypeCodeChanged(quint16 deviceTypeCode);
    void deviceTypeCodeReadFinished(quint16 deviceTypeCode);
    void nominalOutputPowerChanged(float nominalOutputPower);
    void nominalOutputPowerReadFinished(float nominalOutputPower);
    void inverterTemperatureChanged(float inverterTemperature);
    void inverterTemperatureReadFinished(float inverterTemperature);
    void dummy0Changed(QVector<quint16> dummy0);
    void dummy0ReadFinished(QVector<quint16> dummy0);
    void totalPVPowerChanged(quint32 totalPVPower);
    void totalPVPowerReadFinished(quint32 totalPVPower);
    void phaseAVoltageChanged(float phaseAVoltage);
    void phaseAVoltageReadFinished(float phaseAVoltage);
    void phaseBVoltageChanged(float phaseBVoltage);
    void phaseBVoltageReadFinished(float phaseBVoltage);
    void phaseCVoltageChanged(float phaseCVoltage);
    void phaseCVoltageReadFinished(float phaseCVoltage);
    void dummy1Changed(QVector<quint16> dummy1);
    void dummy1ReadFinished(QVector<quint16> dummy1);
    void reactivePowerChanged(qint32 reactivePower);
    void reactivePowerReadFinished(qint32 reactivePower);
    void powerFactorChanged(float powerFactor);
    void powerFactorReadFinished(float powerFactor);
    void gridFrequencyChanged(float gridFrequency);
    void gridFrequencyReadFinished(float gridFrequency);
    void systemStateChanged(SystemState systemState);
    void systemStateReadFinished(SystemState systemState);
    void runningStateChanged(quint16 runningState);
    void runningStateReadFinished(quint16 runningState);
    void dailyPVGenerationChanged(float dailyPVGeneration);
    void dailyPVGenerationReadFinished(float dailyPVGeneration);
    void totalPVGenerationChanged(float totalPVGeneration);
    void totalPVGenerationReadFinished(float totalPVGeneration);
    void dailyPVExportChanged(float dailyPVExport);
    void dailyPVExportReadFinished(float dailyPVExport);
    void totalPVExportChanged(float totalPVExport);
    void totalPVExportReadFinished(float totalPVExport);
    void loadPowerChanged(qint32 loadPower);
    void loadPowerReadFinished(qint32 loadPower);
    void exportPowerChanged(qint32 exportPower);
    void exportPowerReadFinished(qint32 exportPower);
    void dailyBatteryChargePVChanged(float dailyBatteryChargePV);
    void dailyBatteryChargePVReadFinished(float dailyBatteryChargePV);
    void totalBatteryChargePVChanged(float totalBatteryChargePV);
    void totalBatteryChargePVReadFinished(float totalBatteryChargePV);
    void dummy2Changed(QVector<quint16> dummy2);
    void dummy2ReadFinished(QVector<quint16> dummy2);
    void batteryVoltageChanged(float batteryVoltage);
    void batteryVoltageReadFinished(float batteryVoltage);
    void batteryCurrentChanged(float batteryCurrent);
    void batteryCurrentReadFinished(float batteryCurrent);
    void batteryPowerChanged(quint16 batteryPower);
    void batteryPowerReadFinished(quint16 batteryPower);
    void batteryLevelChanged(float batteryLevel);
    void batteryLevelReadFinished(float batteryLevel);
    void batteryHealthStateChanged(float batteryHealthState);
    void batteryHealthStateReadFinished(float batteryHealthState);
    void batteryTemperatureChanged(float batteryTemperature);
    void batteryTemperatureReadFinished(float batteryTemperature);
    void dummy3Changed(QVector<quint16> dummy3);
    void dummy3ReadFinished(QVector<quint16> dummy3);
    void gridStateChanged(quint16 gridState);
    void gridStateReadFinished(quint16 gridState);
    void phaseACurrentChanged(float phaseACurrent);
    void phaseACurrentReadFinished(float phaseACurrent);
    void phaseBCurrentChanged(float phaseBCurrent);
    void phaseBCurrentReadFinished(float phaseBCurrent);
    void phaseCCurrentChanged(float phaseCCurrent);
    void phaseCCurrentReadFinished(float phaseCCurrent);
    void totalActivePowerChanged(qint32 totalActivePower);
    void totalActivePowerReadFinished(qint32 totalActivePower);
    void dailyImportEnergyChanged(float dailyImportEnergy);
    void dailyImportEnergyReadFinished(float dailyImportEnergy);
    void totalImportEnergyChanged(float totalImportEnergy);
    void totalImportEnergyReadFinished(float totalImportEnergy);
    void dummy4Changed(QVector<quint16> dummy4);
    void dummy4ReadFinished(QVector<quint16> dummy4);
    void totalExportEnergyChanged(float totalExportEnergy);
    void totalExportEnergyReadFinished(float totalExportEnergy);
    void batteryTypeChanged(BatteryType batteryType);
    void batteryTypeReadFinished(BatteryType batteryType);
    void batteryNominalVoltageChanged(float batteryNominalVoltage);
    void batteryNominalVoltageReadFinished(float batteryNominalVoltage);
    void batteryCapacityChanged(quint16 batteryCapacity);
    void batteryCapacityReadFinished(quint16 batteryCapacity);

protected:
    quint32 m_protocolNumber = 0;
    quint32 m_protocolVersion = 0;
    QString m_armSoftwareVersion;
    QString m_dspSoftwareVersion;
    QString m_serialNumber;
    quint16 m_deviceTypeCode = 0;
    float m_nominalOutputPower = 0;
    float m_inverterTemperature = 0;
    QVector<quint16> m_dummy0;
    quint32 m_totalPVPower = 0;
    float m_phaseAVoltage = 0;
    float m_phaseBVoltage = 0;
    float m_phaseCVoltage = 0;
    QVector<quint16> m_dummy1;
    qint32 m_reactivePower = 0;
    float m_powerFactor = 0;
    float m_gridFrequency = 0;
    SystemState m_systemState = SystemStateStop;
    quint16 m_runningState = 0;
    float m_dailyPVGeneration = 0;
    float m_totalPVGeneration = 0;
    float m_dailyPVExport = 0;
    float m_totalPVExport = 0;
    qint32 m_loadPower = 0;
    qint32 m_exportPower = 0;
    float m_dailyBatteryChargePV = 0;
    float m_totalBatteryChargePV = 0;
    QVector<quint16> m_dummy2;
    float m_batteryVoltage = 0;
    float m_batteryCurrent = 0;
    quint16 m_batteryPower = 0;
    float m_batteryLevel = 0;
    float m_batteryHealthState = 0;
    float m_batteryTemperature = 0;
    QVector<quint16> m_dummy3;
    quint16 m_gridState = 0;
    float m_phaseACurrent = 0;
    float m_phaseBCurrent = 0;
    float m_phaseCCurrent = 0;
    qint32 m_totalActivePower = 0;
    float m_dailyImportEnergy = 0;
    float m_totalImportEnergy = 0;
    QVector<quint16> m_dummy4;
    float m_totalExportEnergy = 0;
    BatteryType m_batteryType = BatteryTypeNoBattery;
    float m_batteryNominalVoltage = 0;
    quint16 m_batteryCapacity = 10;


    void processProtocolNumberRegisterValues(const QVector<quint16> values);
    void processProtocolVersionRegisterValues(const QVector<quint16> values);
    void processArmSoftwareVersionRegisterValues(const QVector<quint16> values);
    void processDspSoftwareVersionRegisterValues(const QVector<quint16> values);

    void processSerialNumberRegisterValues(const QVector<quint16> values);
    void processDeviceTypeCodeRegisterValues(const QVector<quint16> values);
    void processNominalOutputPowerRegisterValues(const QVector<quint16> values);

    void processInverterTemperatureRegisterValues(const QVector<quint16> values);
    void processDummy0RegisterValues(const QVector<quint16> values);
    void processTotalPVPowerRegisterValues(const QVector<quint16> values);
    void processPhaseAVoltageRegisterValues(const QVector<quint16> values);
    void processPhaseBVoltageRegisterValues(const QVector<quint16> values);
    void processPhaseCVoltageRegisterValues(const QVector<quint16> values);
    void processDummy1RegisterValues(const QVector<quint16> values);
    void processReactivePowerRegisterValues(const QVector<quint16> values);
    void processPowerFactorRegisterValues(const QVector<quint16> values);
    void processGridFrequencyRegisterValues(const QVector<quint16> values);

    void processSystemStateRegisterValues(const QVector<quint16> values);
    void processRunningStateRegisterValues(const QVector<quint16> values);
    void processDailyPVGenerationRegisterValues(const QVector<quint16> values);
    void processTotalPVGenerationRegisterValues(const QVector<quint16> values);
    void processDailyPVExportRegisterValues(const QVector<quint16> values);
    void processTotalPVExportRegisterValues(const QVector<quint16> values);
    void processLoadPowerRegisterValues(const QVector<quint16> values);
    void processExportPowerRegisterValues(const QVector<quint16> values);
    void processDailyBatteryChargePVRegisterValues(const QVector<quint16> values);
    void processTotalBatteryChargePVRegisterValues(const QVector<quint16> values);
    void processDummy2RegisterValues(const QVector<quint16> values);
    void processBatteryVoltageRegisterValues(const QVector<quint16> values);
    void processBatteryCurrentRegisterValues(const QVector<quint16> values);
    void processBatteryPowerRegisterValues(const QVector<quint16> values);
    void processBatteryLevelRegisterValues(const QVector<quint16> values);
    void processBatteryHealthStateRegisterValues(const QVector<quint16> values);
    void processBatteryTemperatureRegisterValues(const QVector<quint16> values);
    void processDummy3RegisterValues(const QVector<quint16> values);
    void processGridStateRegisterValues(const QVector<quint16> values);
    void processPhaseACurrentRegisterValues(const QVector<quint16> values);
    void processPhaseBCurrentRegisterValues(const QVector<quint16> values);
    void processPhaseCCurrentRegisterValues(const QVector<quint16> values);
    void processTotalActivePowerRegisterValues(const QVector<quint16> values);
    void processDailyImportEnergyRegisterValues(const QVector<quint16> values);
    void processTotalImportEnergyRegisterValues(const QVector<quint16> values);
    void processDummy4RegisterValues(const QVector<quint16> values);
    void processTotalExportEnergyRegisterValues(const QVector<quint16> values);

    void processBatteryTypeRegisterValues(const QVector<quint16> values);
    void processBatteryNominalVoltageRegisterValues(const QVector<quint16> values);
    void processBatteryCapacityRegisterValues(const QVector<quint16> values);

    void handleModbusError(QModbusDevice::Error error);
    void testReachability();

private:
    ModbusDataUtils::ByteOrder m_endianness = ModbusDataUtils::ByteOrderLittleEndian;
    quint16 m_slaveId = 1;

    bool m_reachable = false;
    QModbusReply *m_checkRechableReply = nullptr;
    uint m_checkReachableRetries = 0;
    uint m_checkReachableRetriesCount = 0;
    bool m_communicationWorking = false;
    quint8 m_communicationFailedMax = 5;
    quint8 m_communicationFailedCounter = 0;

    QVector<QModbusReply *> m_pendingInitReplies;
    QVector<QModbusReply *> m_pendingUpdateReplies;

    QObject *m_initObject = nullptr;
    void verifyInitFinished();
    void finishInitialization(bool success);

    void verifyUpdateFinished();

    void onReachabilityCheckFailed();
    void evaluateReachableState();

};

QDebug operator<<(QDebug debug, SungrowModbusTcpConnection *sungrowModbusTcpConnection);

#endif // SUNGROWMODBUSTCPCONNECTION_H
