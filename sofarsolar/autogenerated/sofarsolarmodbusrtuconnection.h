/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Copyright 2013 - 2025, nymea GmbH
 * Contact: contact@nymea.io
 *
 * This fileDescriptor is part of nymea.
 * This project including source code and documentation is protected by
 * copyright law, and remains the property of nymea GmbH. All rights, including
 * reproduction, publication, editing and translation, are reserved. The use of
 * this project is subject to the terms of a license agreement to be concluded
 * with nymea GmbH in accordance with the terms of use of nymea GmbH, available
 * under https://nymea.io/license
 *
 * GNU Lesser General Public License Usage
 * Alternatively, this project may be redistributed and/or modified under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; version 3. This project is distributed in the hope that
 * it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this project. If not, see <https://www.gnu.org/licenses/>.
 *
 * For any further details and any questions please contact us under
 * contact@nymea.io or see our FAQ/Licensing Information on
 * https://nymea.io/license/faq
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * WARNING
 *
 * This file has been autogenerated. Any changes in this file may be overwritten.
 * If you want to change something, update the register json or the tool.
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef SOFARSOLARMODBUSRTUCONNECTION_H
#define SOFARSOLARMODBUSRTUCONNECTION_H

#include <QObject>

#include <modbusdatautils.h>
#include <hardware/modbus/modbusrtumaster.h>

class SofarsolarModbusRtuConnection : public QObject
{
  Q_OBJECT
public:
  enum Registers
  {
    RegisterSystemStatus = 1028,
    RegisterFrequencyGrid = 1156,
    RegisterActivePowerPcc = 1160,
    RegisterVoltagePhaseR = 1165,
    RegisterCurrentPccR = 1170,
    RegisterActivePowerPccR = 1171,
    RegisterVoltagePhaseS = 1176,
    RegisterCurrentPccS = 1181,
    RegisterActivePowerPccS = 1182,
    RegisterVoltagePhaseT = 1187,
    RegisterCurrentPccT = 1192,
    RegisterActivePowerPccT = 1193,
    RegisterPowerPv1 = 1414,
    RegisterPowerPv2 = 1417,
    RegisterVoltageBat1 = 1540,
    RegisterCurrentBat1 = 1541,
    RegisterPowerBat1 = 1542,
    RegisterTempBat1 = 1543,
    RegisterSocBat1 = 1544,
    RegisterSohBat1 = 1545,
    RegisterCycleBat1 = 1546,
    RegisterPvGenerationTotal = 1670,
    RegisterEnergyPurchaseTotal = 1678,
    RegisterEnergySellingTotal = 1682,
    RegisterPowerControl = 4357,
    RegisterActivePowerOutputLimit = 4358
  };
  Q_ENUM(Registers)

  enum SystemStatus
  {
    SystemStatusWaiting = 0,
    SystemStatusDetection = 1,
    SystemStatusGridConnected = 2,
    SystemStatusEmergencyPowerSupply = 3,
    SystemStatusRecoverableFault = 4,
    SystemStatusPermanentFault = 5,
    SystemStatusUpgrade = 6,
    SystemStatusSelfCharging = 7
  };
  Q_ENUM(SystemStatus)

  explicit SofarsolarModbusRtuConnection(ModbusRtuMaster *modbusRtuMaster, quint16 slaveId, QObject *parent = nullptr);
  ~SofarsolarModbusRtuConnection() = default;

  ModbusRtuMaster *modbusRtuMaster() const;
  quint16 slaveId() const;

  bool reachable() const;

  uint checkReachableRetries() const;
  void setCheckReachableRetries(uint checkReachableRetries);

  ModbusDataUtils::ByteOrder endianness() const;
  void setEndianness(ModbusDataUtils::ByteOrder endianness);

  /* System status, address is 0x0404 - Address: 1028, Size: 1 */
  SystemStatus systemStatus() const;

  /* Frequency grid (0x0484) [Hz] - Address: 1156, Size: 1 */
  float frequencyGrid() const;

  /* Active power at point of common coupling (0x0488) [W] - Address: 1160, Size: 1 */
  float activePowerPcc() const;

  /* Voltage phase R (0x048D) [V] - Address: 1165, Size: 1 */
  float voltagePhaseR() const;

  /* Voltage phase S (0x0498) [V] - Address: 1176, Size: 1 */
  float voltagePhaseS() const;

  /* Voltage phase T (0x04A3) [V] - Address: 1187, Size: 1 */
  float voltagePhaseT() const;

  /* Power PV1 (0x0586) [W] - Address: 1414, Size: 1 */
  float powerPv1() const;

  /* Power PV2 (0x0589) [W] - Address: 1417, Size: 1 */
  float powerPv2() const;

  /* PV generation total (0x0686) [kWh] - Address: 1670, Size: 2 */
  float pvGenerationTotal() const;

  /* Energy purchase total (0x068E) [kWh] - Address: 1678, Size: 2 */
  float energyPurchaseTotal() const;

  /* Energy selling total (0x0692) [kWh] - Address: 1682, Size: 2 */
  float energySellingTotal() const;

  /* Current phase R at PCC (0x0492) [A] - Address: 1170, Size: 1 */
  float currentPccR() const;

  /* Active power phase R at PCC (0x0493) [W] - Address: 1171, Size: 1 */
  float activePowerPccR() const;

  /* Current phase S at PCC (0x049D) [A] - Address: 1181, Size: 1 */
  float currentPccS() const;

  /* Active power phase S at PCC (0x049E) [W] - Address: 1182, Size: 1 */
  float activePowerPccS() const;

  /* Current phase T at PCC (0x04A8) [A] - Address: 1192, Size: 1 */
  float currentPccT() const;

  /* Active power phase T at PCC (0x04A9) [W] - Address: 1193, Size: 1 */
  float activePowerPccT() const;

  /* Voltage battery 1 (0x0604) [V] - Address: 1540, Size: 1 */
  float voltageBat1() const;

  /* Current battery 1 (0x0605) [A] - Address: 1541, Size: 1 */
  float currentBat1() const;

  /* Power battery 1 (0x0606) [W] - Address: 1542, Size: 1 */
  qint16 powerBat1() const;

  /* Temperature battery 1 (0x0607) [°C] - Address: 1543, Size: 1 */
  qint16 tempBat1() const;

  /* State of charge battery 1 (0x0608) [%] - Address: 1544, Size: 1 */
  quint16 socBat1() const;

  /* State of health battery 1 (0x0609) [%] - Address: 1545, Size: 1 */
  quint16 sohBat1() const;

  /* Charge cycles battery 1 (0x060A) - Address: 1546, Size: 1 */
  quint16 cycleBat1() const;

  /* bit-coded control register (0x1105) - Address: 4357, Size: 1 */
  float powerControl() const;
  ModbusRtuReply *setPowerControl(float powerControl);

  /* Active power export limit (0x1106) [W] - Address: 4358, Size: 1 */
  float activePowerOutputLimit() const;
  ModbusRtuReply *setActivePowerOutputLimit(float activePowerOutputLimit);

  /* Read block from start addess 1170 with size of 2 registers containing following 2 properties:
    - Current phase R at PCC (0x0492) [A] - Address: 1170, Size: 1
    - Active power phase R at PCC (0x0493) [W] - Address: 1171, Size: 1
  */
  void updatePhaseRBlock();

  /* Read block from start addess 1181 with size of 2 registers containing following 2 properties:
    - Current phase S at PCC (0x049D) [A] - Address: 1181, Size: 1
    - Active power phase S at PCC (0x049E) [W] - Address: 1182, Size: 1
  */
  void updatePhaseSBlock();

  /* Read block from start addess 1192 with size of 2 registers containing following 2 properties:
    - Current phase T at PCC (0x04A8) [A] - Address: 1192, Size: 1
    - Active power phase T at PCC (0x04A9) [W] - Address: 1193, Size: 1
  */
  void updatePhaseTBlock();

  /* Read block from start addess 1540 with size of 7 registers containing following 7 properties:
    - Voltage battery 1 (0x0604) [V] - Address: 1540, Size: 1
    - Current battery 1 (0x0605) [A] - Address: 1541, Size: 1
    - Power battery 1 (0x0606) [W] - Address: 1542, Size: 1
    - Temperature battery 1 (0x0607) [°C] - Address: 1543, Size: 1
    - State of charge battery 1 (0x0608) [%] - Address: 1544, Size: 1
    - State of health battery 1 (0x0609) [%] - Address: 1545, Size: 1
    - Charge cycles battery 1 (0x060A) - Address: 1546, Size: 1
  */
  void updateBatteryBlock();

  /* Read block from start addess 4357 with size of 2 registers containing following 2 properties:
    - bit-coded control register (0x1105) - Address: 4357, Size: 1
    - Active power export limit (0x1106) [W] - Address: 4358, Size: 1
  */
  void updatePowerControlBlock();

  void updateSystemStatus();
  void updateFrequencyGrid();
  void updateActivePowerPcc();
  void updateVoltagePhaseR();
  void updateVoltagePhaseS();
  void updateVoltagePhaseT();
  void updatePowerPv1();
  void updatePowerPv2();
  void updatePvGenerationTotal();
  void updateEnergyPurchaseTotal();
  void updateEnergySellingTotal();

  void updateCurrentPccR();
  void updateActivePowerPccR();
  void updateCurrentPccS();
  void updateActivePowerPccS();
  void updateCurrentPccT();
  void updateActivePowerPccT();
  void updateVoltageBat1();
  void updateCurrentBat1();
  void updatePowerBat1();
  void updateTempBat1();
  void updateSocBat1();
  void updateSohBat1();
  void updateCycleBat1();
  void updatePowerControl();
  void updateActivePowerOutputLimit();

  ModbusRtuReply *writePowerControlBlock(QVector<quint16> values);

  ModbusRtuReply *readSystemStatus();
  ModbusRtuReply *readFrequencyGrid();
  ModbusRtuReply *readActivePowerPcc();
  ModbusRtuReply *readVoltagePhaseR();
  ModbusRtuReply *readVoltagePhaseS();
  ModbusRtuReply *readVoltagePhaseT();
  ModbusRtuReply *readPowerPv1();
  ModbusRtuReply *readPowerPv2();
  ModbusRtuReply *readPvGenerationTotal();
  ModbusRtuReply *readEnergyPurchaseTotal();
  ModbusRtuReply *readEnergySellingTotal();
  ModbusRtuReply *readCurrentPccR();
  ModbusRtuReply *readActivePowerPccR();
  ModbusRtuReply *readCurrentPccS();
  ModbusRtuReply *readActivePowerPccS();
  ModbusRtuReply *readCurrentPccT();
  ModbusRtuReply *readActivePowerPccT();
  ModbusRtuReply *readVoltageBat1();
  ModbusRtuReply *readCurrentBat1();
  ModbusRtuReply *readPowerBat1();
  ModbusRtuReply *readTempBat1();
  ModbusRtuReply *readSocBat1();
  ModbusRtuReply *readSohBat1();
  ModbusRtuReply *readCycleBat1();
  ModbusRtuReply *readPowerControl();
  ModbusRtuReply *readActivePowerOutputLimit();

  /* Read block from start addess 1170 with size of 2 registers containing following 2 properties:
    - Current phase R at PCC (0x0492) [A] - Address: 1170, Size: 1
    - Active power phase R at PCC (0x0493) [W] - Address: 1171, Size: 1
  */
  ModbusRtuReply *readBlockPhaseR();

  /* Read block from start addess 1181 with size of 2 registers containing following 2 properties:
    - Current phase S at PCC (0x049D) [A] - Address: 1181, Size: 1
    - Active power phase S at PCC (0x049E) [W] - Address: 1182, Size: 1
  */
  ModbusRtuReply *readBlockPhaseS();

  /* Read block from start addess 1192 with size of 2 registers containing following 2 properties:
    - Current phase T at PCC (0x04A8) [A] - Address: 1192, Size: 1
    - Active power phase T at PCC (0x04A9) [W] - Address: 1193, Size: 1
  */
  ModbusRtuReply *readBlockPhaseT();

  /* Read block from start addess 1540 with size of 7 registers containing following 7 properties:
    - Voltage battery 1 (0x0604) [V] - Address: 1540, Size: 1
    - Current battery 1 (0x0605) [A] - Address: 1541, Size: 1
    - Power battery 1 (0x0606) [W] - Address: 1542, Size: 1
    - Temperature battery 1 (0x0607) [°C] - Address: 1543, Size: 1
    - State of charge battery 1 (0x0608) [%] - Address: 1544, Size: 1
    - State of health battery 1 (0x0609) [%] - Address: 1545, Size: 1
   - Charge cycles battery 1 (0x060A) - Address: 1546, Size: 1
  */
  ModbusRtuReply *readBlockBattery();

  /* Read block from start addess 4357 with size of 2 registers containing following 2 properties:
   - bit-coded control register (0x1105) - Address: 4357, Size: 1
    - Active power export limit (0x1106) [W] - Address: 4358, Size: 1
  */
  ModbusRtuReply *readBlockPowerControl();

  virtual bool initialize();
  virtual bool update();

signals:
  void reachableChanged(bool reachable);
  void checkReachabilityFailed();
  void checkReachableRetriesChanged(uint checkReachableRetries);

  void initializationFinished(bool success);
  void updateFinished();

  void endiannessChanged(ModbusDataUtils::ByteOrder endianness);

  void systemStatusChanged(SystemStatus systemStatus);
  void systemStatusReadFinished(SystemStatus systemStatus);
  void frequencyGridChanged(float frequencyGrid);
  void frequencyGridReadFinished(float frequencyGrid);
  void activePowerPccChanged(float activePowerPcc);
  void activePowerPccReadFinished(float activePowerPcc);
  void voltagePhaseRChanged(float voltagePhaseR);
  void voltagePhaseRReadFinished(float voltagePhaseR);
  void voltagePhaseSChanged(float voltagePhaseS);
  void voltagePhaseSReadFinished(float voltagePhaseS);
  void voltagePhaseTChanged(float voltagePhaseT);
  void voltagePhaseTReadFinished(float voltagePhaseT);
  void powerPv1Changed(float powerPv1);
  void powerPv1ReadFinished(float powerPv1);
  void powerPv2Changed(float powerPv2);
  void powerPv2ReadFinished(float powerPv2);
  void pvGenerationTotalChanged(float pvGenerationTotal);
  void pvGenerationTotalReadFinished(float pvGenerationTotal);
  void energyPurchaseTotalChanged(float energyPurchaseTotal);
  void energyPurchaseTotalReadFinished(float energyPurchaseTotal);
  void energySellingTotalChanged(float energySellingTotal);
  void energySellingTotalReadFinished(float energySellingTotal);
  void currentPccRChanged(float currentPccR);
  void currentPccRReadFinished(float currentPccR);
  void activePowerPccRChanged(float activePowerPccR);
  void activePowerPccRReadFinished(float activePowerPccR);
  void currentPccSChanged(float currentPccS);
  void currentPccSReadFinished(float currentPccS);
  void activePowerPccSChanged(float activePowerPccS);
  void activePowerPccSReadFinished(float activePowerPccS);
  void currentPccTChanged(float currentPccT);
  void currentPccTReadFinished(float currentPccT);
  void activePowerPccTChanged(float activePowerPccT);
  void activePowerPccTReadFinished(float activePowerPccT);
  void voltageBat1Changed(float voltageBat1);
  void voltageBat1ReadFinished(float voltageBat1);
  void currentBat1Changed(float currentBat1);
  void currentBat1ReadFinished(float currentBat1);
  void powerBat1Changed(qint16 powerBat1);
  void powerBat1ReadFinished(qint16 powerBat1);
  void tempBat1Changed(qint16 tempBat1);
  void tempBat1ReadFinished(qint16 tempBat1);
  void socBat1Changed(quint16 socBat1);
  void socBat1ReadFinished(quint16 socBat1);
  void sohBat1Changed(quint16 sohBat1);
  void sohBat1ReadFinished(quint16 sohBat1);
  void cycleBat1Changed(quint16 cycleBat1);
  void cycleBat1ReadFinished(quint16 cycleBat1);
  void powerControlChanged(float powerControl);
  void powerControlReadFinished(float powerControl);
  void activePowerOutputLimitChanged(float activePowerOutputLimit);
  void activePowerOutputLimitReadFinished(float activePowerOutputLimit);
  void powerControlWriteFinished();

protected:
  SystemStatus m_systemStatus = SystemStatusWaiting;
  float m_frequencyGrid = 0;
  float m_activePowerPcc = 0;
  float m_voltagePhaseR = 0;
  float m_voltagePhaseS = 0;
  float m_voltagePhaseT = 0;
  float m_powerPv1 = 0;
  float m_powerPv2 = 0;
  float m_pvGenerationTotal = 0;
  float m_energyPurchaseTotal = 0;
  float m_energySellingTotal = 0;
  float m_currentPccR = 0;
  float m_activePowerPccR = 0;
  float m_currentPccS = 0;
  float m_activePowerPccS = 0;
  float m_currentPccT = 0;
  float m_activePowerPccT = 0;
  float m_voltageBat1 = 0;
  float m_currentBat1 = 0;
  qint16 m_powerBat1 = 0;
  qint16 m_tempBat1 = 0;
  quint16 m_socBat1 = 0;
  quint16 m_sohBat1 = 0;
  quint16 m_cycleBat1 = 0;
  float m_powerControl = 0;
  float m_activePowerOutputLimit = 0;

  void processSystemStatusRegisterValues(const QVector<quint16> values);
  void processFrequencyGridRegisterValues(const QVector<quint16> values);
  void processActivePowerPccRegisterValues(const QVector<quint16> values);
  void processVoltagePhaseRRegisterValues(const QVector<quint16> values);
  void processVoltagePhaseSRegisterValues(const QVector<quint16> values);
  void processVoltagePhaseTRegisterValues(const QVector<quint16> values);
  void processPowerPv1RegisterValues(const QVector<quint16> values);
  void processPowerPv2RegisterValues(const QVector<quint16> values);
  void processPvGenerationTotalRegisterValues(const QVector<quint16> values);
  void processEnergyPurchaseTotalRegisterValues(const QVector<quint16> values);
  void processEnergySellingTotalRegisterValues(const QVector<quint16> values);

  void processCurrentPccRRegisterValues(const QVector<quint16> values);
  void processActivePowerPccRRegisterValues(const QVector<quint16> values);

  void processCurrentPccSRegisterValues(const QVector<quint16> values);
  void processActivePowerPccSRegisterValues(const QVector<quint16> values);

  void processCurrentPccTRegisterValues(const QVector<quint16> values);
  void processActivePowerPccTRegisterValues(const QVector<quint16> values);

  void processVoltageBat1RegisterValues(const QVector<quint16> values);
  void processCurrentBat1RegisterValues(const QVector<quint16> values);
  void processPowerBat1RegisterValues(const QVector<quint16> values);
  void processTempBat1RegisterValues(const QVector<quint16> values);
  void processSocBat1RegisterValues(const QVector<quint16> values);
  void processSohBat1RegisterValues(const QVector<quint16> values);
  void processCycleBat1RegisterValues(const QVector<quint16> values);

  void processPowerControlRegisterValues(const QVector<quint16> values);
  void processActivePowerOutputLimitRegisterValues(const QVector<quint16> values);

  void handleModbusError(ModbusRtuReply::Error error);
  void testReachability();

private:
  ModbusRtuMaster *m_modbusRtuMaster = nullptr;
  ModbusDataUtils::ByteOrder m_endianness = ModbusDataUtils::ByteOrderBigEndian;
  quint16 m_slaveId = 1;

  bool m_reachable = false;
  ModbusRtuReply *m_checkRechableReply = nullptr;
  uint m_checkReachableRetries = 0;
  uint m_checkReachableRetriesCount = 0;
  bool m_communicationWorking = false;
  quint8 m_communicationFailedMax = 3;
  quint8 m_communicationFailedCounter = 0;

  QVector<ModbusRtuReply *> m_pendingInitReplies;
  QVector<ModbusRtuReply *> m_pendingUpdateReplies;

  QObject *m_initObject = nullptr;
  void verifyInitFinished();
  void finishInitialization(bool success);

  void verifyUpdateFinished();

  void onReachabilityCheckFailed();
  void evaluateReachableState();
};

QDebug operator<<(QDebug debug, SofarsolarModbusRtuConnection *sofarsolarModbusRtuConnection);

#endif // SOFARSOLARMODBUSRTUCONNECTION_H
