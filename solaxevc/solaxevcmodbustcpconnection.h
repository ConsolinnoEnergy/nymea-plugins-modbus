/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Copyright 2013 - 2024, nymea GmbH
* Contact: contact@nymea.io
*
* This fileDescriptor is part of nymea.
* This project including source code and documentation is protected by
* copyright law, and remains the property of nymea GmbH. All rights, including
* reproduction, publication, editing and translation, are reserved. The use of
* this project is subject to the terms of a license agreement to be concluded
* with nymea GmbH in accordance with the terms of use of nymea GmbH, available
* under https://nymea.io/license
*
* GNU Lesser General Public License Usage
* Alternatively, this project may be redistributed and/or modified under the
* terms of the GNU Lesser General Public License as published by the Free
* Software Foundation; version 3. This project is distributed in the hope that
* it will be useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this project. If not, see <https://www.gnu.org/licenses/>.
*
* For any further details and any questions please contact us under
* contact@nymea.io or see our FAQ/Licensing Information on
* https://nymea.io/license/faq
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* WARNING
*
* This file has been autogenerated. Any changes in this file may be overwritten.
* If you want to change something, update the register json or the tool.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef SOLAXEVCMODBUSTCPCONNECTION_H
#define SOLAXEVCMODBUSTCPCONNECTION_H

#include <QObject>

#include <modbusdatautils.h>
#include <modbustcpmaster.h>

class SolaxEvcModbusTcpConnection : public ModbusTCPMaster
{
    Q_OBJECT
public:
    enum Registers {
        RegisterSerialNumber = 4096,
        RegisterVoltagePhaseB = 4097,
        RegisterVoltagePhaseC = 4098,
        RegisterVoltagePe = 4099,
        RegisterCurrentPhaseA = 4100,
        RegisterCurrentPhaseB = 4101,
        RegisterCurrentPhaseC = 4102,
        RegisterCurrentPe = 4103,
        RegisterPowerPhaseA = 4104,
        RegisterPowerPhaseB = 4105,
        RegisterPowerPhaseC = 4106,
        RegisterTotalPower = 4107,
        RegisterDeviceType = 4108,
        RegisterDeviceMode = 4109,
        RegisterEcoGear = 4110,
        RegisterGreenGear = 4111,
        RegisterStartChargeMode = 4112,
        RegisterOverVoltSet = 4113,
        RegisterUnderVoltSet = 4114,
        RegisterBoostMode = 4115,
        RegisterMainBreakerLimit = 4116,
        RegisterElectronicLock = 4117,
        RegisterCardActivateSwitch = 4118,
        RegisterTotalEnergy = 4121,
        RegisterTempPcb = 4124,
        RegisterState = 4125,
        RegisterFaultCode = 4126,
        RegisterTypeCase = 4128,
        RegisterTypePower = 4129,
        RegisterTypePhase = 4130,
        RegisterTypeCharger = 4131,
        RegisterDataHubChargeCurrent = 4132,
        RegisterFirmwareVersion = 4133,
        RegisterOcppNetwork = 4134,
        RegisterControlCommand = 4135,
        RegisterMaxCurrent = 4136,
        RegisterUnbalancedPower = 4137,
        RegisterUnbalancedSwitch = 4138,
        RegisterChargingTime = 4139,
        RegisterChargePhase = 4155,
        RegisterMinCurrent = 4159,
        RegisterSlaveAddress = 4160
    };
    Q_ENUM(Registers)

    enum ControlCommand {
        ControlCommandUndefined = 0,
        ControlCommandAvailable = 1,
        ControlCommandUnavailable = 2,
        ControlCommandStopCharging = 3,
        ControlCommandStartCharging = 4,
        ControlCommandReserve = 5,
        ControlCommandCancelReservation = 6
    };
    Q_ENUM(ControlCommand)

    enum State {
        StateAvailable = 0,
        StatePreparing = 1,
        StateCharging = 2,
        StateFinishing = 3,
        StateFaulted = 4,
        StateUnavailable = 5,
        StateReserved = 6,
        StateSuspendedEV = 7,
        StateSuspendedEVSE = 8,
        StateUpdate = 9,
        StateCardActivation = 10
    };
    Q_ENUM(State)

    enum ChargePhase {
        ChargePhaseThreePhase = 0,
        ChargePhaseSinglePhaseConnectedOnPhaseA = 1,
        ChargePhaseSinglePhaseConnectedOnPhaseB = 2,
        ChargePhaseSinglePhaseConnectedOnPhaseC = 3
    };
    Q_ENUM(ChargePhase)

    explicit SolaxEvcModbusTcpConnection(const QHostAddress &hostAddress, uint port, quint16 slaveId, QObject *parent = nullptr);
    ~SolaxEvcModbusTcpConnection() = default;

    bool reachable() const;

    ModbusDataUtils::ByteOrder endianness() const;
    void setEndianness(ModbusDataUtils::ByteOrder endianness);

    uint checkReachableRetries() const;
    void setCheckReachableRetries(uint checkReachableRetries);

    /* Version - Address: 4096, Size: 14 */
    QString serialNumber() const;

    /* Device type - Address: 4108, Size: 1 */
    quint16 deviceType() const;

    /* Accumulated charging energy [kWh] - Address: 4121, Size: 2 */
    float totalEnergy() const;

    /* Data hub charge current [A] - Address: 4132, Size: 1 */
    float DataHubChargeCurrent() const;
    QModbusReply *setDataHubChargeCurrent(float DataHubChargeCurrent);

    /* Control command - Address: 4135, Size: 1 */
    ControlCommand controlCommand() const;
    QModbusReply *setControlCommand(ControlCommand controlCommand);

    /* Maximum AC line current [A] - Address: 4136, Size: 1 */
    float MaxCurrent() const;
    QModbusReply *setMaxCurrent(float MaxCurrent);

    /* Wallbox phase configuration - Address: 4155, Size: 1 */
    ChargePhase chargePhase() const;

    /* Minimum AC line current [A] - Address: 4159, Size: 1 */
    float MinCurrent() const;
    QModbusReply *setMinCurrent(float MinCurrent);

    /* Own 485 address - Address: 4160, Size: 1 */
    quint16 slaveAddress() const;

    /* Voltage phase A [V] - Address: 4096, Size: 1 */
    float voltagePhaseA() const;

    /* Voltage phase B [V] - Address: 4097, Size: 1 */
    float voltagePhaseB() const;

    /* Voltage phase C [V] - Address: 4098, Size: 1 */
    float voltagePhaseC() const;

    /* Voltage PE [V] - Address: 4099, Size: 1 */
    float voltagePe() const;

    /* Current phase A [A] - Address: 4100, Size: 1 */
    float currentPhaseA() const;

    /* Current phase B [A] - Address: 4101, Size: 1 */
    float currentPhaseB() const;

    /* Current phase C [A] - Address: 4102, Size: 1 */
    float currentPhaseC() const;

    /* Current PE [A] - Address: 4103, Size: 1 */
    float currentPe() const;

    /* Power phase A [W] - Address: 4104, Size: 1 */
    quint16 powerPhaseA() const;

    /* Power phase B [W] - Address: 4105, Size: 1 */
    quint16 powerPhaseB() const;

    /* Power phase C [W] - Address: 4106, Size: 1 */
    quint16 powerPhaseC() const;

    /* Total charging power [W] - Address: 4107, Size: 1 */
    quint16 totalPower() const;

    /* Frequency phase A [Hz] - Address: 4108, Size: 1 */
    float frequencyPhaseA() const;

    /* Frequency phase B [Hz] - Address: 4109, Size: 1 */
    float frequencyPhaseB() const;

    /* Frequency phase C [Hz] - Address: 4110, Size: 1 */
    float frequencyPhaseC() const;

    /* Single charge energy [kWh] - Address: 4111, Size: 1 */
    float sessionEnergy() const;

    /* PCB temperature [Â°C] - Address: 4124, Size: 1 */
    qint16 tempPcb() const;

    /* State - Address: 4125, Size: 1 */
    State state() const;

    /* Fault code - Address: 4126, Size: 2 */
    quint32 faultCode() const;

    /* Wallbox model case type - Address: 4128, Size: 1 */
    quint16 typeCase() const;

    /* Wallbox is 7kW, 11kW or 22kW - Address: 4129, Size: 1 */
    quint16 typePower() const;

    /* Wallbox is single or three phase - Address: 4130, Size: 1 */
    quint16 typePhase() const;

    /* Wallbox is type home or OCPP - Address: 4131, Size: 1 */
    quint16 typeCharger() const;

    /* Wallbox model has screen or not - Address: 4132, Size: 1 */
    quint16 typeScreen() const;

    /* Firmware version - Address: 4133, Size: 1 */
    quint16 firmwareVersion() const;

    /* OCPP status - Address: 4134, Size: 1 */
    quint16 ocppNetwork() const;

    /* Received signal strength indicator [%] - Address: 4135, Size: 1 */
    quint16 rssi() const;

    /* Wallbox phase configuration - Address: 4136, Size: 1 */
    ChargePhase chargePhaseInput() const;

    /* Setting of unbalanced power [W] - Address: 4137, Size: 1 */
    quint16 unbalancedPower() const;

    /* Three phase unbalanced switch - Address: 4138, Size: 1 */
    quint16 unbalancedSwitch() const;

    /* Duration of current charging session [s] - Address: 4139, Size: 2 */
    quint32 chargingTime() const;

    /* Device mode - Address: 4109, Size: 1 */
    quint16 deviceMode() const;
    QModbusReply *setDeviceMode(quint16 deviceMode);

    /* ECO gear - Address: 4110, Size: 1 */
    quint16 ecoGear() const;
    QModbusReply *setEcoGear(quint16 ecoGear);

    /* Green gear - Address: 4111, Size: 1 */
    quint16 greenGear() const;
    QModbusReply *setGreenGear(quint16 greenGear);

    /* Start charge mode - Address: 4112, Size: 1 */
    quint16 startChargeMode() const;
    QModbusReply *setStartChargeMode(quint16 startChargeMode);

    /* Over voltage setting [V] - Address: 4113, Size: 1 */
    quint16 overVoltSet() const;
    QModbusReply *setOverVoltSet(quint16 overVoltSet);

    /* Under voltage setting [V] - Address: 4114, Size: 1 */
    quint16 underVoltSet() const;
    QModbusReply *setUnderVoltSet(quint16 underVoltSet);

    /* Boost mode - Address: 4115, Size: 1 */
    quint16 boostMode() const;
    QModbusReply *setBoostMode(quint16 boostMode);

    /* Main breaker limit [A] - Address: 4116, Size: 1 */
    quint16 mainBreakerLimit() const;
    QModbusReply *setMainBreakerLimit(quint16 mainBreakerLimit);

    /* Electronic Lock - Address: 4117, Size: 1 */
    quint16 electronicLock() const;
    QModbusReply *setElectronicLock(quint16 electronicLock);

    /* Card activate switch - Address: 4118, Size: 1 */
    quint16 CardActivateSwitch() const;
    QModbusReply *setCardActivateSwitch(quint16 CardActivateSwitch);

    /* Read block from start addess 4096 with size of 16 registers containing following 16 properties:
      - Voltage phase A [V] - Address: 4096, Size: 1
      - Voltage phase B [V] - Address: 4097, Size: 1
      - Voltage phase C [V] - Address: 4098, Size: 1
      - Voltage PE [V] - Address: 4099, Size: 1
      - Current phase A [A] - Address: 4100, Size: 1
      - Current phase B [A] - Address: 4101, Size: 1
      - Current phase C [A] - Address: 4102, Size: 1
      - Current PE [A] - Address: 4103, Size: 1
      - Power phase A [W] - Address: 4104, Size: 1
      - Power phase B [W] - Address: 4105, Size: 1
      - Power phase C [W] - Address: 4106, Size: 1
      - Total charging power [W] - Address: 4107, Size: 1
      - Frequency phase A [Hz] - Address: 4108, Size: 1
      - Frequency phase B [Hz] - Address: 4109, Size: 1
      - Frequency phase C [Hz] - Address: 4110, Size: 1
      - Single charge energy [kWh] - Address: 4111, Size: 1
    */
    void updateMeterValuesBlock();

    /* Read block from start addess 4124 with size of 17 registers containing following 15 properties:
      - PCB temperature [Â°C] - Address: 4124, Size: 1
      - State - Address: 4125, Size: 1
      - Fault code - Address: 4126, Size: 2
      - Wallbox model case type - Address: 4128, Size: 1
      - Wallbox is 7kW, 11kW or 22kW - Address: 4129, Size: 1
      - Wallbox is single or three phase - Address: 4130, Size: 1
      - Wallbox is type home or OCPP - Address: 4131, Size: 1
      - Wallbox model has screen or not - Address: 4132, Size: 1
      - Firmware version - Address: 4133, Size: 1
      - OCPP status - Address: 4134, Size: 1
      - Received signal strength indicator [%] - Address: 4135, Size: 1
      - Wallbox phase configuration - Address: 4136, Size: 1
      - Setting of unbalanced power [W] - Address: 4137, Size: 1
      - Three phase unbalanced switch - Address: 4138, Size: 1
      - Duration of current charging session [s] - Address: 4139, Size: 2
    */
    void updateWallboxStatusBlock();

    /* Read block from start addess 4109 with size of 10 registers containing following 10 properties:
      - Device mode - Address: 4109, Size: 1
      - ECO gear - Address: 4110, Size: 1
      - Green gear - Address: 4111, Size: 1
      - Start charge mode - Address: 4112, Size: 1
      - Over voltage setting [V] - Address: 4113, Size: 1
      - Under voltage setting [V] - Address: 4114, Size: 1
      - Boost mode - Address: 4115, Size: 1
      - Main breaker limit [A] - Address: 4116, Size: 1
      - Electronic Lock - Address: 4117, Size: 1
      - Card activate switch - Address: 4118, Size: 1
    */
    void updateDeviceSettingsBlock();

    void updateTotalEnergy();
    void updateDataHubChargeCurrent();
    void updateControlCommand();
    void updateMaxCurrent();
    void updateChargePhase();
    void updateMinCurrent();
    void updateSlaveAddress();

    void updateVoltagePhaseA();
    void updateVoltagePhaseB();
    void updateVoltagePhaseC();
    void updateVoltagePe();
    void updateCurrentPhaseA();
    void updateCurrentPhaseB();
    void updateCurrentPhaseC();
    void updateCurrentPe();
    void updatePowerPhaseA();
    void updatePowerPhaseB();
    void updatePowerPhaseC();
    void updateTotalPower();
    void updateFrequencyPhaseA();
    void updateFrequencyPhaseB();
    void updateFrequencyPhaseC();
    void updateSessionEnergy();
    void updateTempPcb();
    void updateState();
    void updateFaultCode();
    void updateTypeCase();
    void updateTypePower();
    void updateTypePhase();
    void updateTypeCharger();
    void updateTypeScreen();
    void updateOcppNetwork();
    void updateRssi();
    void updateChargePhaseInput();
    void updateUnbalancedPower();
    void updateUnbalancedSwitch();
    void updateChargingTime();
    void updateDeviceMode();
    void updateEcoGear();
    void updateGreenGear();
    void updateStartChargeMode();
    void updateOverVoltSet();
    void updateUnderVoltSet();
    void updateBoostMode();
    void updateMainBreakerLimit();
    void updateElectronicLock();
    void updateCardActivateSwitch();

    QModbusReply *readSerialNumber();
    QModbusReply *readDeviceType();
    QModbusReply *readTotalEnergy();
    QModbusReply *readDataHubChargeCurrent();
    QModbusReply *readControlCommand();
    QModbusReply *readMaxCurrent();
    QModbusReply *readChargePhase();
    QModbusReply *readMinCurrent();
    QModbusReply *readSlaveAddress();
    QModbusReply *readVoltagePhaseA();
    QModbusReply *readVoltagePhaseB();
    QModbusReply *readVoltagePhaseC();
    QModbusReply *readVoltagePe();
    QModbusReply *readCurrentPhaseA();
    QModbusReply *readCurrentPhaseB();
    QModbusReply *readCurrentPhaseC();
    QModbusReply *readCurrentPe();
    QModbusReply *readPowerPhaseA();
    QModbusReply *readPowerPhaseB();
    QModbusReply *readPowerPhaseC();
    QModbusReply *readTotalPower();
    QModbusReply *readFrequencyPhaseA();
    QModbusReply *readFrequencyPhaseB();
    QModbusReply *readFrequencyPhaseC();
    QModbusReply *readSessionEnergy();
    QModbusReply *readTempPcb();
    QModbusReply *readState();
    QModbusReply *readFaultCode();
    QModbusReply *readTypeCase();
    QModbusReply *readTypePower();
    QModbusReply *readTypePhase();
    QModbusReply *readTypeCharger();
    QModbusReply *readTypeScreen();
    QModbusReply *readFirmwareVersion();
    QModbusReply *readOcppNetwork();
    QModbusReply *readRssi();
    QModbusReply *readChargePhaseInput();
    QModbusReply *readUnbalancedPower();
    QModbusReply *readUnbalancedSwitch();
    QModbusReply *readChargingTime();
    QModbusReply *readDeviceMode();
    QModbusReply *readEcoGear();
    QModbusReply *readGreenGear();
    QModbusReply *readStartChargeMode();
    QModbusReply *readOverVoltSet();
    QModbusReply *readUnderVoltSet();
    QModbusReply *readBoostMode();
    QModbusReply *readMainBreakerLimit();
    QModbusReply *readElectronicLock();
    QModbusReply *readCardActivateSwitch();

    /* Read block from start addess 4096 with size of 16 registers containing following 16 properties:
     - Voltage phase A [V] - Address: 4096, Size: 1
     - Voltage phase B [V] - Address: 4097, Size: 1
     - Voltage phase C [V] - Address: 4098, Size: 1
     - Voltage PE [V] - Address: 4099, Size: 1
     - Current phase A [A] - Address: 4100, Size: 1
     - Current phase B [A] - Address: 4101, Size: 1
     - Current phase C [A] - Address: 4102, Size: 1
     - Current PE [A] - Address: 4103, Size: 1
     - Power phase A [W] - Address: 4104, Size: 1
     - Power phase B [W] - Address: 4105, Size: 1
     - Power phase C [W] - Address: 4106, Size: 1
     - Total charging power [W] - Address: 4107, Size: 1
     - Frequency phase A [Hz] - Address: 4108, Size: 1
     - Frequency phase B [Hz] - Address: 4109, Size: 1
     - Frequency phase C [Hz] - Address: 4110, Size: 1
     - Single charge energy [kWh] - Address: 4111, Size: 1
    */
    QModbusReply *readBlockMeterValues();

    /* Read block from start addess 4124 with size of 17 registers containing following 15 properties:
     - PCB temperature [Â°C] - Address: 4124, Size: 1
     - State - Address: 4125, Size: 1
     - Fault code - Address: 4126, Size: 2
     - Wallbox model case type - Address: 4128, Size: 1
     - Wallbox is 7kW, 11kW or 22kW - Address: 4129, Size: 1
     - Wallbox is single or three phase - Address: 4130, Size: 1
     - Wallbox is type home or OCPP - Address: 4131, Size: 1
     - Wallbox model has screen or not - Address: 4132, Size: 1
     - Firmware version - Address: 4133, Size: 1
     - OCPP status - Address: 4134, Size: 1
     - Received signal strength indicator [%] - Address: 4135, Size: 1
     - Wallbox phase configuration - Address: 4136, Size: 1
     - Setting of unbalanced power [W] - Address: 4137, Size: 1
     - Three phase unbalanced switch - Address: 4138, Size: 1
     - Duration of current charging session [s] - Address: 4139, Size: 2
    */
    QModbusReply *readBlockWallboxStatus();

    /* Read block from start addess 4109 with size of 10 registers containing following 10 properties:
     - Device mode - Address: 4109, Size: 1
     - ECO gear - Address: 4110, Size: 1
     - Green gear - Address: 4111, Size: 1
     - Start charge mode - Address: 4112, Size: 1
     - Over voltage setting [V] - Address: 4113, Size: 1
     - Under voltage setting [V] - Address: 4114, Size: 1
     - Boost mode - Address: 4115, Size: 1
     - Main breaker limit [A] - Address: 4116, Size: 1
     - Electronic Lock - Address: 4117, Size: 1
     - Card activate switch - Address: 4118, Size: 1
    */
    QModbusReply *readBlockDeviceSettings();


    virtual bool initialize();
    virtual bool update();

signals:
    void reachableChanged(bool reachable);
    void checkReachabilityFailed();
    void checkReachableRetriesChanged(uint checkReachableRetries);

    void initializationFinished(bool success);
    void updateFinished();

    void endiannessChanged(ModbusDataUtils::ByteOrder endianness);

    void serialNumberChanged(const QString &serialNumber);
    void serialNumberReadFinished(const QString &serialNumber);
    void deviceTypeChanged(quint16 deviceType);
    void deviceTypeReadFinished(quint16 deviceType);
    void totalEnergyChanged(float totalEnergy);
    void totalEnergyReadFinished(float totalEnergy);
    void DataHubChargeCurrentChanged(float DataHubChargeCurrent);
    void DataHubChargeCurrentReadFinished(float DataHubChargeCurrent);
    void controlCommandChanged(ControlCommand controlCommand);
    void controlCommandReadFinished(ControlCommand controlCommand);
    void MaxCurrentChanged(float MaxCurrent);
    void MaxCurrentReadFinished(float MaxCurrent);
    void chargePhaseChanged(ChargePhase chargePhase);
    void chargePhaseReadFinished(ChargePhase chargePhase);
    void MinCurrentChanged(float MinCurrent);
    void MinCurrentReadFinished(float MinCurrent);
    void slaveAddressChanged(quint16 slaveAddress);
    void slaveAddressReadFinished(quint16 slaveAddress);

    void voltagePhaseAChanged(float voltagePhaseA);
    void voltagePhaseAReadFinished(float voltagePhaseA);
    void voltagePhaseBChanged(float voltagePhaseB);
    void voltagePhaseBReadFinished(float voltagePhaseB);
    void voltagePhaseCChanged(float voltagePhaseC);
    void voltagePhaseCReadFinished(float voltagePhaseC);
    void voltagePeChanged(float voltagePe);
    void voltagePeReadFinished(float voltagePe);
    void currentPhaseAChanged(float currentPhaseA);
    void currentPhaseAReadFinished(float currentPhaseA);
    void currentPhaseBChanged(float currentPhaseB);
    void currentPhaseBReadFinished(float currentPhaseB);
    void currentPhaseCChanged(float currentPhaseC);
    void currentPhaseCReadFinished(float currentPhaseC);
    void currentPeChanged(float currentPe);
    void currentPeReadFinished(float currentPe);
    void powerPhaseAChanged(quint16 powerPhaseA);
    void powerPhaseAReadFinished(quint16 powerPhaseA);
    void powerPhaseBChanged(quint16 powerPhaseB);
    void powerPhaseBReadFinished(quint16 powerPhaseB);
    void powerPhaseCChanged(quint16 powerPhaseC);
    void powerPhaseCReadFinished(quint16 powerPhaseC);
    void totalPowerChanged(quint16 totalPower);
    void totalPowerReadFinished(quint16 totalPower);
    void frequencyPhaseAChanged(float frequencyPhaseA);
    void frequencyPhaseAReadFinished(float frequencyPhaseA);
    void frequencyPhaseBChanged(float frequencyPhaseB);
    void frequencyPhaseBReadFinished(float frequencyPhaseB);
    void frequencyPhaseCChanged(float frequencyPhaseC);
    void frequencyPhaseCReadFinished(float frequencyPhaseC);
    void sessionEnergyChanged(float sessionEnergy);
    void sessionEnergyReadFinished(float sessionEnergy);
    void tempPcbChanged(qint16 tempPcb);
    void tempPcbReadFinished(qint16 tempPcb);
    void stateChanged(State state);
    void stateReadFinished(State state);
    void faultCodeChanged(quint32 faultCode);
    void faultCodeReadFinished(quint32 faultCode);
    void typeCaseChanged(quint16 typeCase);
    void typeCaseReadFinished(quint16 typeCase);
    void typePowerChanged(quint16 typePower);
    void typePowerReadFinished(quint16 typePower);
    void typePhaseChanged(quint16 typePhase);
    void typePhaseReadFinished(quint16 typePhase);
    void typeChargerChanged(quint16 typeCharger);
    void typeChargerReadFinished(quint16 typeCharger);
    void typeScreenChanged(quint16 typeScreen);
    void typeScreenReadFinished(quint16 typeScreen);
    void firmwareVersionChanged(quint16 firmwareVersion);
    void firmwareVersionReadFinished(quint16 firmwareVersion);
    void ocppNetworkChanged(quint16 ocppNetwork);
    void ocppNetworkReadFinished(quint16 ocppNetwork);
    void rssiChanged(quint16 rssi);
    void rssiReadFinished(quint16 rssi);
    void chargePhaseInputChanged(ChargePhase chargePhaseInput);
    void chargePhaseInputReadFinished(ChargePhase chargePhaseInput);
    void unbalancedPowerChanged(quint16 unbalancedPower);
    void unbalancedPowerReadFinished(quint16 unbalancedPower);
    void unbalancedSwitchChanged(quint16 unbalancedSwitch);
    void unbalancedSwitchReadFinished(quint16 unbalancedSwitch);
    void chargingTimeChanged(quint32 chargingTime);
    void chargingTimeReadFinished(quint32 chargingTime);
    void deviceModeChanged(quint16 deviceMode);
    void deviceModeReadFinished(quint16 deviceMode);
    void ecoGearChanged(quint16 ecoGear);
    void ecoGearReadFinished(quint16 ecoGear);
    void greenGearChanged(quint16 greenGear);
    void greenGearReadFinished(quint16 greenGear);
    void startChargeModeChanged(quint16 startChargeMode);
    void startChargeModeReadFinished(quint16 startChargeMode);
    void overVoltSetChanged(quint16 overVoltSet);
    void overVoltSetReadFinished(quint16 overVoltSet);
    void underVoltSetChanged(quint16 underVoltSet);
    void underVoltSetReadFinished(quint16 underVoltSet);
    void boostModeChanged(quint16 boostMode);
    void boostModeReadFinished(quint16 boostMode);
    void mainBreakerLimitChanged(quint16 mainBreakerLimit);
    void mainBreakerLimitReadFinished(quint16 mainBreakerLimit);
    void electronicLockChanged(quint16 electronicLock);
    void electronicLockReadFinished(quint16 electronicLock);
    void CardActivateSwitchChanged(quint16 CardActivateSwitch);
    void CardActivateSwitchReadFinished(quint16 CardActivateSwitch);

protected:
    QString m_serialNumber = 0;
    quint16 m_deviceType = 0;
    float m_totalEnergy = 0;
    float m_DataHubChargeCurrent = 0;
    ControlCommand m_controlCommand = ControlCommandUndefined;
    float m_MaxCurrent = 0;
    ChargePhase m_chargePhase = ChargePhaseThreePhase;
    float m_MinCurrent = 0;
    quint16 m_slaveAddress = 0;
    float m_voltagePhaseA = 0;
    float m_voltagePhaseB = 0;
    float m_voltagePhaseC = 0;
    float m_voltagePe = 0;
    float m_currentPhaseA = 0;
    float m_currentPhaseB = 0;
    float m_currentPhaseC = 0;
    float m_currentPe = 0;
    quint16 m_powerPhaseA = 0;
    quint16 m_powerPhaseB = 0;
    quint16 m_powerPhaseC = 0;
    quint16 m_totalPower = 0;
    float m_frequencyPhaseA = 0;
    float m_frequencyPhaseB = 0;
    float m_frequencyPhaseC = 0;
    float m_sessionEnergy = 0;
    qint16 m_tempPcb = 0;
    State m_state = StateAvailable;
    quint32 m_faultCode = 0;
    quint16 m_typeCase = 0;
    quint16 m_typePower = 0;
    quint16 m_typePhase = 0;
    quint16 m_typeCharger = 0;
    quint16 m_typeScreen = 0;
    quint16 m_firmwareVersion = 0;
    quint16 m_ocppNetwork = 0;
    quint16 m_rssi = 0;
    ChargePhase m_chargePhaseInput = ChargePhaseThreePhase;
    quint16 m_unbalancedPower = 0;
    quint16 m_unbalancedSwitch = 0;
    quint32 m_chargingTime = 0;
    quint16 m_deviceMode = 0;
    quint16 m_ecoGear = 0;
    quint16 m_greenGear = 0;
    quint16 m_startChargeMode = 0;
    quint16 m_overVoltSet = 0;
    quint16 m_underVoltSet = 0;
    quint16 m_boostMode = 0;
    quint16 m_mainBreakerLimit = 0;
    quint16 m_electronicLock = 0;
    quint16 m_CardActivateSwitch = 0;

    void processSerialNumberRegisterValues(const QVector<quint16> values);
    void processDeviceTypeRegisterValues(const QVector<quint16> values);
    void processTotalEnergyRegisterValues(const QVector<quint16> values);
    void processDataHubChargeCurrentRegisterValues(const QVector<quint16> values);
    void processControlCommandRegisterValues(const QVector<quint16> values);
    void processMaxCurrentRegisterValues(const QVector<quint16> values);
    void processChargePhaseRegisterValues(const QVector<quint16> values);
    void processMinCurrentRegisterValues(const QVector<quint16> values);
    void processSlaveAddressRegisterValues(const QVector<quint16> values);

    void processVoltagePhaseARegisterValues(const QVector<quint16> values);
    void processVoltagePhaseBRegisterValues(const QVector<quint16> values);
    void processVoltagePhaseCRegisterValues(const QVector<quint16> values);
    void processVoltagePeRegisterValues(const QVector<quint16> values);
    void processCurrentPhaseARegisterValues(const QVector<quint16> values);
    void processCurrentPhaseBRegisterValues(const QVector<quint16> values);
    void processCurrentPhaseCRegisterValues(const QVector<quint16> values);
    void processCurrentPeRegisterValues(const QVector<quint16> values);
    void processPowerPhaseARegisterValues(const QVector<quint16> values);
    void processPowerPhaseBRegisterValues(const QVector<quint16> values);
    void processPowerPhaseCRegisterValues(const QVector<quint16> values);
    void processTotalPowerRegisterValues(const QVector<quint16> values);
    void processFrequencyPhaseARegisterValues(const QVector<quint16> values);
    void processFrequencyPhaseBRegisterValues(const QVector<quint16> values);
    void processFrequencyPhaseCRegisterValues(const QVector<quint16> values);
    void processSessionEnergyRegisterValues(const QVector<quint16> values);

    void processTempPcbRegisterValues(const QVector<quint16> values);
    void processStateRegisterValues(const QVector<quint16> values);
    void processFaultCodeRegisterValues(const QVector<quint16> values);
    void processTypeCaseRegisterValues(const QVector<quint16> values);
    void processTypePowerRegisterValues(const QVector<quint16> values);
    void processTypePhaseRegisterValues(const QVector<quint16> values);
    void processTypeChargerRegisterValues(const QVector<quint16> values);
    void processTypeScreenRegisterValues(const QVector<quint16> values);
    void processFirmwareVersionRegisterValues(const QVector<quint16> values);
    void processOcppNetworkRegisterValues(const QVector<quint16> values);
    void processRssiRegisterValues(const QVector<quint16> values);
    void processChargePhaseInputRegisterValues(const QVector<quint16> values);
    void processUnbalancedPowerRegisterValues(const QVector<quint16> values);
    void processUnbalancedSwitchRegisterValues(const QVector<quint16> values);
    void processChargingTimeRegisterValues(const QVector<quint16> values);

    void processDeviceModeRegisterValues(const QVector<quint16> values);
    void processEcoGearRegisterValues(const QVector<quint16> values);
    void processGreenGearRegisterValues(const QVector<quint16> values);
    void processStartChargeModeRegisterValues(const QVector<quint16> values);
    void processOverVoltSetRegisterValues(const QVector<quint16> values);
    void processUnderVoltSetRegisterValues(const QVector<quint16> values);
    void processBoostModeRegisterValues(const QVector<quint16> values);
    void processMainBreakerLimitRegisterValues(const QVector<quint16> values);
    void processElectronicLockRegisterValues(const QVector<quint16> values);
    void processCardActivateSwitchRegisterValues(const QVector<quint16> values);

    void handleModbusError(QModbusDevice::Error error);
    void testReachability();

private:
    ModbusDataUtils::ByteOrder m_endianness = ModbusDataUtils::ByteOrderLittleEndian;
    quint16 m_slaveId = 1;

    bool m_reachable = false;
    QModbusReply *m_checkRechableReply = nullptr;
    uint m_checkReachableRetries = 0;
    uint m_checkReachableRetriesCount = 0;
    bool m_communicationWorking = false;
    quint8 m_communicationFailedMax = 15;
    quint8 m_communicationFailedCounter = 0;

    QVector<QModbusReply *> m_pendingInitReplies;
    QVector<QModbusReply *> m_pendingUpdateReplies;

    QObject *m_initObject = nullptr;
    void verifyInitFinished();
    void finishInitialization(bool success);

    void verifyUpdateFinished();

    void onReachabilityCheckFailed();
    void evaluateReachableState();

};

QDebug operator<<(QDebug debug, SolaxEvcModbusTcpConnection *solaxEvcModbusTcpConnection);

#endif // SOLAXEVCMODBUSTCPCONNECTION_H
