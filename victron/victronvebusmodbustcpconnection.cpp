/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Copyright 2013 - 2025, nymea GmbH
* Contact: contact@nymea.io
*
* This fileDescriptor is part of nymea.
* This project including source code and documentation is protected by
* copyright law, and remains the property of nymea GmbH. All rights, including
* reproduction, publication, editing and translation, are reserved. The use of
* this project is subject to the terms of a license agreement to be concluded
* with nymea GmbH in accordance with the terms of use of nymea GmbH, available
* under https://nymea.io/license
*
* GNU Lesser General Public License Usage
* Alternatively, this project may be redistributed and/or modified under the
* terms of the GNU Lesser General Public License as published by the Free
* Software Foundation; version 3. This project is distributed in the hope that
* it will be useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this project. If not, see <https://www.gnu.org/licenses/>.
*
* For any further details and any questions please contact us under
* contact@nymea.io or see our FAQ/Licensing Information on
* https://nymea.io/license/faq
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* WARNING
*
* This file has been autogenerated. Any changes in this file may be overwritten.
* If you want to change something, update the register json or the tool.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


#include "victronvebusmodbustcpconnection.h"
#include <loggingcategories.h>
#include <math.h>
#include <QTimer>

NYMEA_LOGGING_CATEGORY(dcVictronVebusModbusTcpConnection, "VictronVebusModbusTcpConnection")

VictronVebusModbusTcpConnection::VictronVebusModbusTcpConnection(const QHostAddress &hostAddress, uint port, quint16 slaveId, QObject *parent) :
    ModbusTCPMaster(hostAddress, port, parent),
    m_slaveId(slaveId)
{
    connect(this, &ModbusTCPMaster::connectionStateChanged, this, [this](bool status){
        if (status) {
           qCDebug(dcVictronVebusModbusTcpConnection()) << "Modbus TCP connection" << m_hostAddress.toString() << "connected. Start testing if the connection is reachable...";
            // Cleanup before starting to initialize
            m_pendingInitReplies.clear();
            m_pendingUpdateReplies.clear();
            m_communicationWorking = false;
            m_communicationFailedCounter = 0;
            m_checkReachableRetriesCount = 0;
            
            // Checking which UnitID is used for vebus
            QVector<quint16> m_vebusModbusSlaveAddresses = {227, 246, 242};
            tryConnect(m_vebusModbusSlaveAddresses, 0); // Start search for slave adresses whith vebus connection
            
        } else {
            qCWarning(dcVictronVebusModbusTcpConnection()) << "Modbus TCP connection diconnected from" << m_hostAddress.toString() << ". The connection is not reachable any more.";
            m_communicationWorking = false;
            m_communicationFailedCounter = 0;
            m_checkReachableRetriesCount = 0;
        }

        evaluateReachableState();
    });
}

void VictronVebusModbusTcpConnection::tryConnect(QVector<quint16> adresses, int it)
{    
    if (it >= adresses.size()) {
        qCWarning(dcVictronVebusModbusTcpConnection()) << "All attempts to connect failed.";
        return; // Exit recursion if all addresses have been tried
    }
    
    QModbusReply *reply = nullptr;
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 37, 1);
    reply = sendReadRequest(request, adresses.at(it));

    if (reply) {
        connect(reply, &QModbusReply::finished, this, [this, reply, &adresses, &it](){
            qCDebug(dcVictronVebusModbusTcpConnection()) << "Test reply finished with " << reply->errorString();
            
            if(reply->error() == QModbusDevice::NoError) {
                m_slaveId = adresses.at(it);
                qCWarning(dcVictronVebusModbusTcpConnection()) << "Vebus connection available for SlaveID!" << adresses.at(it);
                testReachability();
            } else {
                // Recursively try the next address if there is an error
                tryConnect(adresses, it+1);
            }
            reply->deleteLater();              
        });
    }else {
        qCWarning(dcVictronVebusModbusTcpConnection()) << "Failed to send request for SlaveID" << adresses.at(it);
    }
}

bool VictronVebusModbusTcpConnection::reachable() const
{
    return m_reachable;
}

uint VictronVebusModbusTcpConnection::checkReachableRetries() const
{
    return m_checkReachableRetries;
}

void VictronVebusModbusTcpConnection::setCheckReachableRetries(uint checkReachableRetries)
{
    if (m_checkReachableRetries == checkReachableRetries)
        return;

    m_checkReachableRetries = checkReachableRetries;
    emit checkReachableRetriesChanged(m_checkReachableRetries);
}

ModbusDataUtils::ByteOrder VictronVebusModbusTcpConnection::endianness() const
{
    return m_endianness;
}

void VictronVebusModbusTcpConnection::setEndianness(ModbusDataUtils::ByteOrder endianness)
{
    if (m_endianness == endianness)
        return;

    m_endianness = endianness;
    emit endiannessChanged(m_endianness);
}

qint16 VictronVebusModbusTcpConnection::powerSetpointPhaseA() const
{
    return m_powerSetpointPhaseA;
}

QModbusReply *VictronVebusModbusTcpConnection::setPowerSetpointPhaseA(qint16 powerSetpointPhaseA)
{
    QVector<quint16> values = ModbusDataUtils::convertFromInt16(powerSetpointPhaseA);
    qCDebug(dcVictronVebusModbusTcpConnection()) << "--> Write \"ESS power setpoint phase 1\" register:" << 37 << "size:" << 1 << values;
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 37, values.count());
    request.setValues(values);
    return sendWriteRequest(request, m_slaveId);
}

quint16 VictronVebusModbusTcpConnection::disableCharge() const
{
    return m_disableCharge;
}

QModbusReply *VictronVebusModbusTcpConnection::setDisableCharge(quint16 disableCharge)
{
    QVector<quint16> values = ModbusDataUtils::convertFromUInt16(disableCharge);
    qCDebug(dcVictronVebusModbusTcpConnection()) << "--> Write \"disable charge flag\" register:" << 38 << "size:" << 1 << values;
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 38, values.count());
    request.setValues(values);
    return sendWriteRequest(request, m_slaveId);
}

quint16 VictronVebusModbusTcpConnection::disableFeedIn() const
{
    return m_disableFeedIn;
}

QModbusReply *VictronVebusModbusTcpConnection::setDisableFeedIn(quint16 disableFeedIn)
{
    QVector<quint16> values = ModbusDataUtils::convertFromUInt16(disableFeedIn);
    qCDebug(dcVictronVebusModbusTcpConnection()) << "--> Write \"disable feed in flag\" register:" << 39 << "size:" << 1 << values;
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 39, values.count());
    request.setValues(values);
    return sendWriteRequest(request, m_slaveId);
}

qint16 VictronVebusModbusTcpConnection::powerSetpointPhaseB() const
{
    return m_powerSetpointPhaseB;
}

QModbusReply *VictronVebusModbusTcpConnection::setPowerSetpointPhaseB(qint16 powerSetpointPhaseB)
{
    QVector<quint16> values = ModbusDataUtils::convertFromInt16(powerSetpointPhaseB);
    qCDebug(dcVictronVebusModbusTcpConnection()) << "--> Write \"ESS power setpoint phase 2\" register:" << 40 << "size:" << 1 << values;
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 40, values.count());
    request.setValues(values);
    return sendWriteRequest(request, m_slaveId);
}

qint16 VictronVebusModbusTcpConnection::powerSetpointPhaseC() const
{
    return m_powerSetpointPhaseC;
}

QModbusReply *VictronVebusModbusTcpConnection::setPowerSetpointPhaseC(qint16 powerSetpointPhaseC)
{
    QVector<quint16> values = ModbusDataUtils::convertFromInt16(powerSetpointPhaseC);
    qCDebug(dcVictronVebusModbusTcpConnection()) << "--> Write \"ESS power setpoint phase 3\" register:" << 41 << "size:" << 1 << values;
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 41, values.count());
    request.setValues(values);
    return sendWriteRequest(request, m_slaveId);
}

bool VictronVebusModbusTcpConnection::initialize()
{
    if (!m_reachable) {
        qCWarning(dcVictronVebusModbusTcpConnection()) << "Tried to initialize but the device is not to be reachable.";
        return false;
    }
    // No init registers defined. Nothing to be done and we are finished.
    emit initializationFinished(true);
    return true;
}

bool VictronVebusModbusTcpConnection::update()
{
    if (!connected())
        return false;

    if (!m_pendingUpdateReplies.isEmpty()) {
        qCDebug(dcVictronVebusModbusTcpConnection()) << "Tried to update but there are still some update replies pending. Waiting for them to be finished...";
        return true;
    }

    QModbusReply *reply = nullptr;

    // Read vebussetp
    reply = readBlockVebussetp();
    qCDebug(dcVictronVebusModbusTcpConnection()) << "--> Read block \"vebussetp\" registers from:" << 37 << "size:" << 5;
    if (!reply) {
        qCWarning(dcVictronVebusModbusTcpConnection()) << "Error occurred while reading block \"vebussetp\" registers";
        return false;
    }

    if (reply->isFinished()) {
        reply->deleteLater(); // Broadcast reply returns immediatly
        return false;
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &QModbusReply::finished, reply, &QModbusReply::deleteLater);
    connect(reply, &QModbusReply::finished, this, [this, reply](){
        m_pendingUpdateReplies.removeAll(reply);
        handleModbusError(reply->error());
        if (reply->error() != QModbusDevice::NoError) {
            verifyUpdateFinished();
            return;
        }

        const QModbusDataUnit unit = reply->result();
        const QVector<quint16> blockValues = unit.values();
        qCDebug(dcVictronVebusModbusTcpConnection()) << "<-- Response from reading block \"vebussetp\" register" << 37 << "size:" << 5 << blockValues;
        processPowerSetpointPhaseARegisterValues(blockValues.mid(0, 1));
        processDisableChargeRegisterValues(blockValues.mid(1, 1));
        processDisableFeedInRegisterValues(blockValues.mid(2, 1));
        processPowerSetpointPhaseBRegisterValues(blockValues.mid(3, 1));
        processPowerSetpointPhaseCRegisterValues(blockValues.mid(4, 1));
        verifyUpdateFinished();
    });

    connect(reply, &QModbusReply::errorOccurred, this, [reply] (QModbusDevice::Error error){
        qCWarning(dcVictronVebusModbusTcpConnection()) << "Modbus reply error occurred while updating block \"vebussetp\" registers" << error << reply->errorString();
    });

    return true;
}

void VictronVebusModbusTcpConnection::updateVebussetpBlock()
{
    // Update register block "vebussetp"
    qCDebug(dcVictronVebusModbusTcpConnection()) << "--> Read block \"vebussetp\" registers from:" << 37 << "size:" << 5;
    QModbusReply *reply = readBlockVebussetp();
    if (!reply) {
        qCWarning(dcVictronVebusModbusTcpConnection()) << "Error occurred while reading block \"vebussetp\" registers";
        return;
    }

    if (reply->isFinished()) {
        reply->deleteLater(); // Broadcast reply returns immediatly
        return;
    }

    connect(reply, &QModbusReply::finished, reply, &QModbusReply::deleteLater);
    connect(reply, &QModbusReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        if (reply->error() == QModbusDevice::NoError) {
            const QModbusDataUnit unit = reply->result();
            const QVector<quint16> blockValues = unit.values();
            qCDebug(dcVictronVebusModbusTcpConnection()) << "<-- Response from reading block \"vebussetp\" register" << 37 << "size:" << 5 << blockValues;
            processPowerSetpointPhaseARegisterValues(blockValues.mid(0, 1));
            processDisableChargeRegisterValues(blockValues.mid(1, 1));
            processDisableFeedInRegisterValues(blockValues.mid(2, 1));
            processPowerSetpointPhaseBRegisterValues(blockValues.mid(3, 1));
            processPowerSetpointPhaseCRegisterValues(blockValues.mid(4, 1));
        }
    });

    connect(reply, &QModbusReply::errorOccurred, this, [reply] (QModbusDevice::Error error){
        qCWarning(dcVictronVebusModbusTcpConnection()) << "Modbus reply error occurred while updating block \"vebussetp\" registers" << error << reply->errorString();
    });
}

// MultipleWrite FC16 for vebus register 37 until 41
void VictronVebusModbusTcpConnection::writeSetpoints(int16_t powerSetPhase)
{
    QModbusReply *reply = nullptr;    
    
    quint16 startAddress = 37, numberOfRegisters = 5;
    quint8 payloadInBytes = 10; 

    quint16 setPointRaw = static_cast<quint16>(powerSetPhase < 0 ? powerSetPhase + 65536 : powerSetPhase);
    quint16 disableCharge = 0;
    quint16 disableFeedback = 0;

    QModbusRequest request(QModbusRequest::WriteMultipleRegisters, startAddress, numberOfRegisters,
    payloadInBytes, setPointRaw, disableCharge, disableFeedback, setPointRaw, setPointRaw);

    qCDebug(dcVictronVebusModbusTcpConnection()) << "QModbusRequest" << request;

    //QModbusRequest request_test(QModbusRequest::WriteMultipleRegisters, QByteArray::fromHex("002500050A00000000000000000000")); // manual request for testing
    reply = m_modbusTcpClient->sendRawRequest(request, m_slaveId);

    if (!reply) {
        qCWarning(dcVictronVebusModbusTcpConnection()) 
            << "Write powerDemand failed because the reply could not be created.";
        return;
    }

    connect(reply, &QModbusReply::finished, reply, &QModbusReply::deleteLater);
    connect(reply, &QModbusReply::finished, this, [this, reply](){
        if (reply->error() != QModbusDevice::NoError) {
            qCWarning(dcVictronVebusModbusTcpConnection())
                    << "Write setpoints finished with error" << reply->errorString();
            return;
        }

        qCDebug(dcVictronVebusModbusTcpConnection()) << "Write setpoints finished successfully";
    });

    connect(reply, &QModbusReply::errorOccurred, this, [this, reply] (QModbusDevice::Error error){
            if (reply->error() == QModbusDevice::ProtocolError) {
                QModbusResponse response = reply->rawResult();
                if (response.isException()) {
                    qCDebug(dcVictronVebusModbusTcpConnection()) << "Modbus reply error occurred while writing setpoints" << hostAddress().toString() << response.exceptionCode();
                }
            } else {
                qCWarning(dcVictronVebusModbusTcpConnection()) << "Modbus reply error occurred while writing setpoints" << hostAddress().toString() << error << reply->errorString();
            }
        });   
}

QModbusReply *VictronVebusModbusTcpConnection::readPowerSetpointPhaseA()
{
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 37, 1);
    return sendReadRequest(request, m_slaveId);
}

QModbusReply *VictronVebusModbusTcpConnection::readDisableCharge()
{
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 38, 1);
    return sendReadRequest(request, m_slaveId);
}

QModbusReply *VictronVebusModbusTcpConnection::readDisableFeedIn()
{
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 39, 1);
    return sendReadRequest(request, m_slaveId);
}

QModbusReply *VictronVebusModbusTcpConnection::readPowerSetpointPhaseB()
{
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 40, 1);
    return sendReadRequest(request, m_slaveId);
}

QModbusReply *VictronVebusModbusTcpConnection::readPowerSetpointPhaseC()
{
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 41, 1);
    return sendReadRequest(request, m_slaveId);
}

QModbusReply *VictronVebusModbusTcpConnection::readBlockVebussetp()
{
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 37, 5);
    return sendReadRequest(request, m_slaveId);
}

void VictronVebusModbusTcpConnection::processPowerSetpointPhaseARegisterValues(const QVector<quint16> values)
{
    qint16 receivedPowerSetpointPhaseA = ModbusDataUtils::convertToInt16(values);
    emit powerSetpointPhaseAReadFinished(receivedPowerSetpointPhaseA);

    if (m_powerSetpointPhaseA != receivedPowerSetpointPhaseA) {
        m_powerSetpointPhaseA = receivedPowerSetpointPhaseA;
        emit powerSetpointPhaseAChanged(m_powerSetpointPhaseA);
    }
}

void VictronVebusModbusTcpConnection::processDisableChargeRegisterValues(const QVector<quint16> values)
{
    quint16 receivedDisableCharge = ModbusDataUtils::convertToUInt16(values);
    emit disableChargeReadFinished(receivedDisableCharge);

    if (m_disableCharge != receivedDisableCharge) {
        m_disableCharge = receivedDisableCharge;
        emit disableChargeChanged(m_disableCharge);
    }
}

void VictronVebusModbusTcpConnection::processDisableFeedInRegisterValues(const QVector<quint16> values)
{
    quint16 receivedDisableFeedIn = ModbusDataUtils::convertToUInt16(values);
    emit disableFeedInReadFinished(receivedDisableFeedIn);

    if (m_disableFeedIn != receivedDisableFeedIn) {
        m_disableFeedIn = receivedDisableFeedIn;
        emit disableFeedInChanged(m_disableFeedIn);
    }
}

void VictronVebusModbusTcpConnection::processPowerSetpointPhaseBRegisterValues(const QVector<quint16> values)
{
    qint16 receivedPowerSetpointPhaseB = ModbusDataUtils::convertToInt16(values);
    emit powerSetpointPhaseBReadFinished(receivedPowerSetpointPhaseB);

    if (m_powerSetpointPhaseB != receivedPowerSetpointPhaseB) {
        m_powerSetpointPhaseB = receivedPowerSetpointPhaseB;
        emit powerSetpointPhaseBChanged(m_powerSetpointPhaseB);
    }
}

void VictronVebusModbusTcpConnection::processPowerSetpointPhaseCRegisterValues(const QVector<quint16> values)
{
    qint16 receivedPowerSetpointPhaseC = ModbusDataUtils::convertToInt16(values);
    emit powerSetpointPhaseCReadFinished(receivedPowerSetpointPhaseC);

    if (m_powerSetpointPhaseC != receivedPowerSetpointPhaseC) {
        m_powerSetpointPhaseC = receivedPowerSetpointPhaseC;
        emit powerSetpointPhaseCChanged(m_powerSetpointPhaseC);
    }
}

void VictronVebusModbusTcpConnection::handleModbusError(QModbusDevice::Error error)
{
    if (error == QModbusDevice::NoError) {
        // Reset the communication counter and we know we can reach the device
        m_communicationFailedCounter = 0;
        if (!m_communicationWorking)
            qCDebug(dcVictronVebusModbusTcpConnection()) << "Received a reply without any errors. The communication with the device seems to work now.";

        m_communicationWorking = true;
        evaluateReachableState();
    } else {
        m_communicationFailedCounter++;
        if (m_communicationWorking && m_communicationFailedCounter >= m_communicationFailedMax) {
            m_communicationWorking = false;
            qCWarning(dcVictronVebusModbusTcpConnection()) << "Received" << m_communicationFailedCounter << "errors while communicating with the RTU master. Mark as not reachable until the communication works again.";
            evaluateReachableState();
        }
    }
}

void VictronVebusModbusTcpConnection::testReachability()
{
    if (m_checkRechableReply)
        return;

    // Try to read the check reachability register powerSetpointPhaseA in order to verify if the communication is working or not.
    qCDebug(dcVictronVebusModbusTcpConnection()) << "--> Test reachability by reading \"ESS power setpoint phase 1\" register:" << 37 << "size:" << 1;
    m_checkRechableReply = readPowerSetpointPhaseA();
    if (!m_checkRechableReply) {
        qCDebug(dcVictronVebusModbusTcpConnection()) << "Error occurred verifying reachability by reading \"ESS power setpoint phase 1\" register";
        onReachabilityCheckFailed();
        return;
    }

    if (m_checkRechableReply->isFinished()) {
        m_checkRechableReply->deleteLater(); // Broadcast reply returns immediatly
        m_checkRechableReply = nullptr;
        onReachabilityCheckFailed();
        return;
    }

    connect(m_checkRechableReply, &QModbusReply::finished, this, [this](){
        handleModbusError(m_checkRechableReply->error());
        if (m_checkRechableReply->error() != QModbusDevice::NoError)
            onReachabilityCheckFailed();

        m_checkRechableReply->deleteLater();
        m_checkRechableReply = nullptr;
    });

    connect(m_checkRechableReply, &QModbusReply::errorOccurred, this, [this] (QModbusDevice::Error error){
        qCDebug(dcVictronVebusModbusTcpConnection()) << "Modbus reply error occurred while verifying reachability by reading \"ESS power setpoint phase 1\" register" << error << m_checkRechableReply->errorString();
    });
}

void VictronVebusModbusTcpConnection::verifyInitFinished()
{
    if (m_pendingInitReplies.isEmpty()) {
        finishInitialization(true);
    }
}

void VictronVebusModbusTcpConnection::finishInitialization(bool success)
{
    if (success) {
        qCDebug(dcVictronVebusModbusTcpConnection()) << "Initialization finished of VictronVebusModbusTcpConnection" << hostAddress().toString() << "finished successfully";
    } else {
        qCWarning(dcVictronVebusModbusTcpConnection()) << "Initialization finished of VictronVebusModbusTcpConnection" << hostAddress().toString() << "failed.";
    }

    // Cleanup init
    delete m_initObject;
    m_initObject = nullptr;
    m_pendingInitReplies.clear();

    emit initializationFinished(success);
}

void VictronVebusModbusTcpConnection::verifyUpdateFinished()
{
    if (m_pendingUpdateReplies.isEmpty()) {
        emit updateFinished();
    }
}

void VictronVebusModbusTcpConnection::onReachabilityCheckFailed()
{
    m_checkReachableRetriesCount++;

    if (m_checkReachableRetriesCount <= m_checkReachableRetries) {
        qCDebug(dcVictronVebusModbusTcpConnection()) << "Reachability test failed. Retry in on second" << m_checkReachableRetriesCount << "/" << m_checkReachableRetries;
        QTimer::singleShot(1000, this, &VictronVebusModbusTcpConnection::testReachability);
        return;
    }

    // The test reachability method failed, not retrying any more
    emit checkReachabilityFailed();
}

void VictronVebusModbusTcpConnection::evaluateReachableState()
{
    bool reachable = m_communicationWorking && connected();
    if (m_reachable == reachable)
        return;

    m_reachable = reachable;
    emit reachableChanged(m_reachable);
    m_checkReachableRetriesCount = 0;
}

QDebug operator<<(QDebug debug, VictronVebusModbusTcpConnection *victronVebusModbusTcpConnection)
{
    debug.nospace().noquote() << "VictronVebusModbusTcpConnection(" << victronVebusModbusTcpConnection->hostAddress().toString() << ":" << victronVebusModbusTcpConnection->port() << ")" << "\n";
    debug.nospace().noquote() << "    - ESS power setpoint phase 1: " << victronVebusModbusTcpConnection->powerSetpointPhaseA() << " [W]" << "\n";
    debug.nospace().noquote() << "    - disable charge flag: " << victronVebusModbusTcpConnection->disableCharge() << " [-]" << "\n";
    debug.nospace().noquote() << "    - disable feed in flag: " << victronVebusModbusTcpConnection->disableFeedIn() << " [-]" << "\n";
    debug.nospace().noquote() << "    - ESS power setpoint phase 2: " << victronVebusModbusTcpConnection->powerSetpointPhaseB() << " [W]" << "\n";
    debug.nospace().noquote() << "    - ESS power setpoint phase 3: " << victronVebusModbusTcpConnection->powerSetpointPhaseC() << " [W]" << "\n";
    return debug.quote().space();
}

