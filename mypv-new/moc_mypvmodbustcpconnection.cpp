/****************************************************************************
** Meta object code from reading C++ file 'mypvmodbustcpconnection.h'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.11.3)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "autogenerated/mypvmodbustcpconnection.h"
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'mypvmodbustcpconnection.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.11.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_MyPvModbusTcpConnection_t {
    QByteArrayData data[45];
    char stringdata0[937];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_MyPvModbusTcpConnection_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_MyPvModbusTcpConnection_t qt_meta_stringdata_MyPvModbusTcpConnection = {
    {
QT_MOC_LITERAL(0, 0, 23), // "MyPvModbusTcpConnection"
QT_MOC_LITERAL(1, 24, 16), // "reachableChanged"
QT_MOC_LITERAL(2, 41, 0), // ""
QT_MOC_LITERAL(3, 42, 9), // "reachable"
QT_MOC_LITERAL(4, 52, 23), // "checkReachabilityFailed"
QT_MOC_LITERAL(5, 76, 28), // "checkReachableRetriesChanged"
QT_MOC_LITERAL(6, 105, 21), // "checkReachableRetries"
QT_MOC_LITERAL(7, 127, 22), // "initializationFinished"
QT_MOC_LITERAL(8, 150, 7), // "success"
QT_MOC_LITERAL(9, 158, 14), // "updateFinished"
QT_MOC_LITERAL(10, 173, 17), // "endiannessChanged"
QT_MOC_LITERAL(11, 191, 26), // "ModbusDataUtils::ByteOrder"
QT_MOC_LITERAL(12, 218, 10), // "endianness"
QT_MOC_LITERAL(13, 229, 19), // "currentPowerChanged"
QT_MOC_LITERAL(14, 249, 12), // "currentPower"
QT_MOC_LITERAL(15, 262, 24), // "currentPowerReadFinished"
QT_MOC_LITERAL(16, 287, 18), // "manualStartChanged"
QT_MOC_LITERAL(17, 306, 11), // "manualStart"
QT_MOC_LITERAL(18, 318, 23), // "manualStartReadFinished"
QT_MOC_LITERAL(19, 342, 23), // "waterTemperatureChanged"
QT_MOC_LITERAL(20, 366, 16), // "waterTemperature"
QT_MOC_LITERAL(21, 383, 28), // "waterTemperatureReadFinished"
QT_MOC_LITERAL(22, 412, 29), // "targetWaterTemperatureChanged"
QT_MOC_LITERAL(23, 442, 22), // "targetWaterTemperature"
QT_MOC_LITERAL(24, 465, 34), // "targetWaterTemperatureReadFin..."
QT_MOC_LITERAL(25, 500, 17), // "elwaStatusChanged"
QT_MOC_LITERAL(26, 518, 10), // "ElwaStatus"
QT_MOC_LITERAL(27, 529, 10), // "elwaStatus"
QT_MOC_LITERAL(28, 540, 22), // "elwaStatusReadFinished"
QT_MOC_LITERAL(29, 563, 9), // "Registers"
QT_MOC_LITERAL(30, 573, 20), // "RegisterCurrentPower"
QT_MOC_LITERAL(31, 594, 24), // "RegisterWaterTemperature"
QT_MOC_LITERAL(32, 619, 30), // "RegisterTargetWaterTemperature"
QT_MOC_LITERAL(33, 650, 18), // "RegisterElwaStatus"
QT_MOC_LITERAL(34, 669, 19), // "RegisterManualStart"
QT_MOC_LITERAL(35, 689, 17), // "ElwaStatusHeating"
QT_MOC_LITERAL(36, 707, 17), // "ElwaStatusStandby"
QT_MOC_LITERAL(37, 725, 17), // "ElwaStatusBoosted"
QT_MOC_LITERAL(38, 743, 22), // "ElwaStatusHeatFinished"
QT_MOC_LITERAL(39, 766, 15), // "ElwaStatusSetup"
QT_MOC_LITERAL(40, 782, 32), // "ElwaStatusErrorOvertempFuseBlown"
QT_MOC_LITERAL(41, 815, 31), // "ElwaStatusErrorOvertempMeasured"
QT_MOC_LITERAL(42, 847, 34), // "ElwaStatusErrorOvertempElectr..."
QT_MOC_LITERAL(43, 882, 28), // "ElwaStatusErrorHardwareFault"
QT_MOC_LITERAL(44, 911, 25) // "ElwaStatusErrorTempSensor"

    },
    "MyPvModbusTcpConnection\0reachableChanged\0"
    "\0reachable\0checkReachabilityFailed\0"
    "checkReachableRetriesChanged\0"
    "checkReachableRetries\0initializationFinished\0"
    "success\0updateFinished\0endiannessChanged\0"
    "ModbusDataUtils::ByteOrder\0endianness\0"
    "currentPowerChanged\0currentPower\0"
    "currentPowerReadFinished\0manualStartChanged\0"
    "manualStart\0manualStartReadFinished\0"
    "waterTemperatureChanged\0waterTemperature\0"
    "waterTemperatureReadFinished\0"
    "targetWaterTemperatureChanged\0"
    "targetWaterTemperature\0"
    "targetWaterTemperatureReadFinished\0"
    "elwaStatusChanged\0ElwaStatus\0elwaStatus\0"
    "elwaStatusReadFinished\0Registers\0"
    "RegisterCurrentPower\0RegisterWaterTemperature\0"
    "RegisterTargetWaterTemperature\0"
    "RegisterElwaStatus\0RegisterManualStart\0"
    "ElwaStatusHeating\0ElwaStatusStandby\0"
    "ElwaStatusBoosted\0ElwaStatusHeatFinished\0"
    "ElwaStatusSetup\0ElwaStatusErrorOvertempFuseBlown\0"
    "ElwaStatusErrorOvertempMeasured\0"
    "ElwaStatusErrorOvertempElectronics\0"
    "ElwaStatusErrorHardwareFault\0"
    "ElwaStatusErrorTempSensor"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_MyPvModbusTcpConnection[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      16,   14, // methods
       0,    0, // properties
       2,  138, // enums/sets
       0,    0, // constructors
       0,       // flags
      16,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    1,   94,    2, 0x06 /* Public */,
       4,    0,   97,    2, 0x06 /* Public */,
       5,    1,   98,    2, 0x06 /* Public */,
       7,    1,  101,    2, 0x06 /* Public */,
       9,    0,  104,    2, 0x06 /* Public */,
      10,    1,  105,    2, 0x06 /* Public */,
      13,    1,  108,    2, 0x06 /* Public */,
      15,    1,  111,    2, 0x06 /* Public */,
      16,    1,  114,    2, 0x06 /* Public */,
      18,    1,  117,    2, 0x06 /* Public */,
      19,    1,  120,    2, 0x06 /* Public */,
      21,    1,  123,    2, 0x06 /* Public */,
      22,    1,  126,    2, 0x06 /* Public */,
      24,    1,  129,    2, 0x06 /* Public */,
      25,    1,  132,    2, 0x06 /* Public */,
      28,    1,  135,    2, 0x06 /* Public */,

 // signals: parameters
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void,
    QMetaType::Void, QMetaType::UInt,    6,
    QMetaType::Void, QMetaType::Bool,    8,
    QMetaType::Void,
    QMetaType::Void, 0x80000000 | 11,   12,
    QMetaType::Void, QMetaType::UShort,   14,
    QMetaType::Void, QMetaType::UShort,   14,
    QMetaType::Void, QMetaType::UShort,   17,
    QMetaType::Void, QMetaType::UShort,   17,
    QMetaType::Void, QMetaType::Float,   20,
    QMetaType::Void, QMetaType::Float,   20,
    QMetaType::Void, QMetaType::Float,   23,
    QMetaType::Void, QMetaType::Float,   23,
    QMetaType::Void, 0x80000000 | 26,   27,
    QMetaType::Void, 0x80000000 | 26,   27,

 // enums: name, flags, count, data
      29, 0x0,    5,  146,
      26, 0x0,   10,  156,

 // enum data: key, value
      30, uint(MyPvModbusTcpConnection::RegisterCurrentPower),
      31, uint(MyPvModbusTcpConnection::RegisterWaterTemperature),
      32, uint(MyPvModbusTcpConnection::RegisterTargetWaterTemperature),
      33, uint(MyPvModbusTcpConnection::RegisterElwaStatus),
      34, uint(MyPvModbusTcpConnection::RegisterManualStart),
      35, uint(MyPvModbusTcpConnection::ElwaStatusHeating),
      36, uint(MyPvModbusTcpConnection::ElwaStatusStandby),
      37, uint(MyPvModbusTcpConnection::ElwaStatusBoosted),
      38, uint(MyPvModbusTcpConnection::ElwaStatusHeatFinished),
      39, uint(MyPvModbusTcpConnection::ElwaStatusSetup),
      40, uint(MyPvModbusTcpConnection::ElwaStatusErrorOvertempFuseBlown),
      41, uint(MyPvModbusTcpConnection::ElwaStatusErrorOvertempMeasured),
      42, uint(MyPvModbusTcpConnection::ElwaStatusErrorOvertempElectronics),
      43, uint(MyPvModbusTcpConnection::ElwaStatusErrorHardwareFault),
      44, uint(MyPvModbusTcpConnection::ElwaStatusErrorTempSensor),

       0        // eod
};

void MyPvModbusTcpConnection::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        MyPvModbusTcpConnection *_t = static_cast<MyPvModbusTcpConnection *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->reachableChanged((*reinterpret_cast< bool(*)>(_a[1]))); break;
        case 1: _t->checkReachabilityFailed(); break;
        case 2: _t->checkReachableRetriesChanged((*reinterpret_cast< uint(*)>(_a[1]))); break;
        case 3: _t->initializationFinished((*reinterpret_cast< bool(*)>(_a[1]))); break;
        case 4: _t->updateFinished(); break;
        case 5: _t->endiannessChanged((*reinterpret_cast< ModbusDataUtils::ByteOrder(*)>(_a[1]))); break;
        case 6: _t->currentPowerChanged((*reinterpret_cast< quint16(*)>(_a[1]))); break;
        case 7: _t->currentPowerReadFinished((*reinterpret_cast< quint16(*)>(_a[1]))); break;
        case 8: _t->manualStartChanged((*reinterpret_cast< quint16(*)>(_a[1]))); break;
        case 9: _t->manualStartReadFinished((*reinterpret_cast< quint16(*)>(_a[1]))); break;
        case 10: _t->waterTemperatureChanged((*reinterpret_cast< float(*)>(_a[1]))); break;
        case 11: _t->waterTemperatureReadFinished((*reinterpret_cast< float(*)>(_a[1]))); break;
        case 12: _t->targetWaterTemperatureChanged((*reinterpret_cast< float(*)>(_a[1]))); break;
        case 13: _t->targetWaterTemperatureReadFinished((*reinterpret_cast< float(*)>(_a[1]))); break;
        case 14: _t->elwaStatusChanged((*reinterpret_cast< ElwaStatus(*)>(_a[1]))); break;
        case 15: _t->elwaStatusReadFinished((*reinterpret_cast< ElwaStatus(*)>(_a[1]))); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            using _t = void (MyPvModbusTcpConnection::*)(bool );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::reachableChanged)) {
                *result = 0;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::checkReachabilityFailed)) {
                *result = 1;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)(uint );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::checkReachableRetriesChanged)) {
                *result = 2;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)(bool );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::initializationFinished)) {
                *result = 3;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::updateFinished)) {
                *result = 4;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)(ModbusDataUtils::ByteOrder );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::endiannessChanged)) {
                *result = 5;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)(quint16 );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::currentPowerChanged)) {
                *result = 6;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)(quint16 );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::currentPowerReadFinished)) {
                *result = 7;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)(quint16 );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::manualStartChanged)) {
                *result = 8;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)(quint16 );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::manualStartReadFinished)) {
                *result = 9;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)(float );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::waterTemperatureChanged)) {
                *result = 10;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)(float );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::waterTemperatureReadFinished)) {
                *result = 11;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)(float );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::targetWaterTemperatureChanged)) {
                *result = 12;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)(float );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::targetWaterTemperatureReadFinished)) {
                *result = 13;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)(ElwaStatus );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::elwaStatusChanged)) {
                *result = 14;
                return;
            }
        }
        {
            using _t = void (MyPvModbusTcpConnection::*)(ElwaStatus );
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&MyPvModbusTcpConnection::elwaStatusReadFinished)) {
                *result = 15;
                return;
            }
        }
    }
}

QT_INIT_METAOBJECT const QMetaObject MyPvModbusTcpConnection::staticMetaObject = {
    { &ModbusTCPMaster::staticMetaObject, qt_meta_stringdata_MyPvModbusTcpConnection.data,
      qt_meta_data_MyPvModbusTcpConnection,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *MyPvModbusTcpConnection::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MyPvModbusTcpConnection::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_MyPvModbusTcpConnection.stringdata0))
        return static_cast<void*>(this);
    return ModbusTCPMaster::qt_metacast(_clname);
}

int MyPvModbusTcpConnection::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = ModbusTCPMaster::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 16)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 16;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 16)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 16;
    }
    return _id;
}

// SIGNAL 0
void MyPvModbusTcpConnection::reachableChanged(bool _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 0, _a);
}

// SIGNAL 1
void MyPvModbusTcpConnection::checkReachabilityFailed()
{
    QMetaObject::activate(this, &staticMetaObject, 1, nullptr);
}

// SIGNAL 2
void MyPvModbusTcpConnection::checkReachableRetriesChanged(uint _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 2, _a);
}

// SIGNAL 3
void MyPvModbusTcpConnection::initializationFinished(bool _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 3, _a);
}

// SIGNAL 4
void MyPvModbusTcpConnection::updateFinished()
{
    QMetaObject::activate(this, &staticMetaObject, 4, nullptr);
}

// SIGNAL 5
void MyPvModbusTcpConnection::endiannessChanged(ModbusDataUtils::ByteOrder _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 5, _a);
}

// SIGNAL 6
void MyPvModbusTcpConnection::currentPowerChanged(quint16 _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 6, _a);
}

// SIGNAL 7
void MyPvModbusTcpConnection::currentPowerReadFinished(quint16 _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 7, _a);
}

// SIGNAL 8
void MyPvModbusTcpConnection::manualStartChanged(quint16 _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 8, _a);
}

// SIGNAL 9
void MyPvModbusTcpConnection::manualStartReadFinished(quint16 _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 9, _a);
}

// SIGNAL 10
void MyPvModbusTcpConnection::waterTemperatureChanged(float _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 10, _a);
}

// SIGNAL 11
void MyPvModbusTcpConnection::waterTemperatureReadFinished(float _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 11, _a);
}

// SIGNAL 12
void MyPvModbusTcpConnection::targetWaterTemperatureChanged(float _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 12, _a);
}

// SIGNAL 13
void MyPvModbusTcpConnection::targetWaterTemperatureReadFinished(float _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 13, _a);
}

// SIGNAL 14
void MyPvModbusTcpConnection::elwaStatusChanged(ElwaStatus _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 14, _a);
}

// SIGNAL 15
void MyPvModbusTcpConnection::elwaStatusReadFinished(ElwaStatus _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 15, _a);
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
