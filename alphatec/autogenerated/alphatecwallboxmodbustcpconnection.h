/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Copyright 2013 - 2022, nymea GmbH
* Contact: contact@nymea.io
*
* This fileDescriptor is part of nymea.
* This project including source code and documentation is protected by
* copyright law, and remains the property of nymea GmbH. All rights, including
* reproduction, publication, editing and translation, are reserved. The use of
* this project is subject to the terms of a license agreement to be concluded
* with nymea GmbH in accordance with the terms of use of nymea GmbH, available
* under https://nymea.io/license
*
* GNU Lesser General Public License Usage
* Alternatively, this project may be redistributed and/or modified under the
* terms of the GNU Lesser General Public License as published by the Free
* Software Foundation; version 3. This project is distributed in the hope that
* it will be useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this project. If not, see <https://www.gnu.org/licenses/>.
*
* For any further details and any questions please contact us under
* contact@nymea.io or see our FAQ/Licensing Information on
* https://nymea.io/license/faq
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* WARNING
*
* This file has been autogenerated. Any changes in this file may be overwritten.
* If you want to change something, update the register json or the tool.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef ALPHATECWALLBOXMODBUSTCPCONNECTION_H
#define ALPHATECWALLBOXMODBUSTCPCONNECTION_H

#include <QObject>

#include <modbusdatautils.h>
#include <modbustcpmaster.h>

class AlphatecWallboxModbusTcpConnection : public ModbusTCPMaster
{
    Q_OBJECT
public:
    enum Registers {
        RegisterEvseStatus = 0,
        RegisterChargePower = 2,
        RegisterWriteChargeLimit = 5
    };
    Q_ENUM(Registers)

    explicit AlphatecWallboxModbusTcpConnection(const QHostAddress &hostAddress, uint port, quint16 slaveId, QObject *parent = nullptr);
    ~AlphatecWallboxModbusTcpConnection() = default;

    bool reachable() const;

    ModbusDataUtils::ByteOrder endianness() const;
    void setEndianness(ModbusDataUtils::ByteOrder endianness);

    uint checkReachableRetries() const;
    void setCheckReachableRetries(uint checkReachableRetries);

    /* EvseStatus - Address: 0, Size: 1 */
    quint32 evseStatus() const;

    /* chargePower [Ampere] - Address: 2, Size: 1 */
    quint32 chargePower() const;

    /* maxIntensitySocket [Ampere] - Address: 5, Size: 1 */
    quint16 writeChargeLimit() const;
    QModbusReply *setWriteChargeLimit(quint16 writeChargeLimit);

    void updateEvseStatus();
    void updateChargePower();
    void updateWriteChargeLimit();


    QModbusReply *readEvseStatus();
    QModbusReply *readChargePower();
    QModbusReply *readWriteChargeLimit();


    virtual bool initialize();
    virtual bool update();

signals:
    void reachableChanged(bool reachable);
    void checkReachabilityFailed();
    void checkReachableRetriesChanged(uint checkReachableRetries);

    void initializationFinished(bool success);
    void updateFinished();

    void endiannessChanged(ModbusDataUtils::ByteOrder endianness);

    void evseStatusChanged(quint32 evseStatus);
    void evseStatusReadFinished(quint32 evseStatus);
    void chargePowerChanged(quint32 chargePower);
    void chargePowerReadFinished(quint32 chargePower);
    void writeChargeLimitChanged(quint16 writeChargeLimit);
    void writeChargeLimitReadFinished(quint16 writeChargeLimit);


protected:
    quint32 m_evseStatus = 0;
    quint32 m_chargePower = 0;
    quint16 m_writeChargeLimit = 0;

    void processEvseStatusRegisterValues(const QVector<quint16> values);
    void processChargePowerRegisterValues(const QVector<quint16> values);
    void processWriteChargeLimitRegisterValues(const QVector<quint16> values);

    void handleModbusError(QModbusDevice::Error error);
    void testReachability();

private:
    ModbusDataUtils::ByteOrder m_endianness = ModbusDataUtils::ByteOrderBigEndian;
    quint16 m_slaveId = 1;

    bool m_reachable = false;
    QModbusReply *m_checkRechableReply = nullptr;
    uint m_checkReachableRetries = 0;
    uint m_checkReachableRetriesCount = 0;
    bool m_communicationWorking = false;
    quint8 m_communicationFailedMax = 20;
    quint8 m_communicationFailedCounter = 0;

    QVector<QModbusReply *> m_pendingInitReplies;
    QVector<QModbusReply *> m_pendingUpdateReplies;

    QObject *m_initObject = nullptr;
    void verifyInitFinished();
    void finishInitialization(bool success);

    void verifyUpdateFinished();

    void onReachabilityCheckFailed();
    void evaluateReachableState();

};

QDebug operator<<(QDebug debug, AlphatecWallboxModbusTcpConnection *alphatecWallboxModbusTcpConnection);

#endif // ALPHATECWALLBOXMODBUSTCPCONNECTION_H
