/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Copyright 2013 - 2025, nymea GmbH
* Contact: contact@nymea.io
*
* This fileDescriptor is part of nymea.
* This project including source code and documentation is protected by
* copyright law, and remains the property of nymea GmbH. All rights, including
* reproduction, publication, editing and translation, are reserved. The use of
* this project is subject to the terms of a license agreement to be concluded
* with nymea GmbH in accordance with the terms of use of nymea GmbH, available
* under https://nymea.io/license
*
* GNU Lesser General Public License Usage
* Alternatively, this project may be redistributed and/or modified under the
* terms of the GNU Lesser General Public License as published by the Free
* Software Foundation; version 3. This project is distributed in the hope that
* it will be useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this project. If not, see <https://www.gnu.org/licenses/>.
*
* For any further details and any questions please contact us under
* contact@nymea.io or see our FAQ/Licensing Information on
* https://nymea.io/license/faq
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* WARNING
*
* This file has been autogenerated. Any changes in this file may be overwritten.
* If you want to change something, update the register json or the tool.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef VICTRONVEBUSMODBUSTCPCONNECTION_H
#define VICTRONVEBUSMODBUSTCPCONNECTION_H

#include <QObject>

#include <modbusdatautils.h>
#include <modbustcpmaster.h>

class VictronVebusModbusTcpConnection : public ModbusTcpMaster
{
    Q_OBJECT
public:
    enum Registers {
        RegisterInverterPowerInputPhaseA = 12,
        RegisterInverterPowerInputPhaseB = 13,
        RegisterInverterPowerInputPhaseC = 14,
        RegisterDummy1 = 15,
        RegisterInverterOutputFrequency = 21,
        RegisterDummy2 = 22,
        RegisterInverterPowerOutputPhaseA = 23,
        RegisterInverterPowerOutputPhaseB = 24,
        RegisterInverterPowerOutputPhaseC = 25,
        RegisterPowerSetpointPhaseA = 37,
        RegisterDisableCharge = 38,
        RegisterDisableFeedIn = 39,
        RegisterPowerSetpointPhaseB = 40,
        RegisterPowerSetpointPhaseC = 41
    };
    Q_ENUM(Registers)

    explicit VictronVebusModbusTcpConnection(const QHostAddress &hostAddress, uint port, quint16 slaveId, QObject *parent = nullptr);
    ~VictronVebusModbusTcpConnection() = default;

    bool reachable() const;

    ModbusDataUtils::ByteOrder endianness() const;
    void setEndianness(ModbusDataUtils::ByteOrder endianness);

    uint checkReachableRetries() const;
    void setCheckReachableRetries(uint checkReachableRetries);

    /* Inverter AC input power phase A [W] - Address: 12, Size: 1 */
    float inverterPowerInputPhaseA() const;

    /* Inverter AC input power phase B [W] - Address: 13, Size: 1 */
    float inverterPowerInputPhaseB() const;

    /* Inverter AC input power phase C [W] - Address: 14, Size: 1 */
    float inverterPowerInputPhaseC() const;

    /* none - Address: 15, Size: 6 */
    QVector<quint16> dummy1() const;

    /* Inverter output frequency [Hz] - Address: 21, Size: 1 */
    float inverterOutputFrequency() const;

    /* none - Address: 22, Size: 1 */
    QVector<quint16> dummy2() const;

    /* Inverter AC output power phase A [W] - Address: 23, Size: 1 */
    float inverterPowerOutputPhaseA() const;

    /* Inverter AC output power phase B [W] - Address: 24, Size: 1 */
    float inverterPowerOutputPhaseB() const;

    /* Inverter AC input power phase C [W] - Address: 25, Size: 1 */
    float inverterPowerOutputPhaseC() const;

    /* ESS power setpoint phase 1 [W] - Address: 37, Size: 1 */
    qint16 powerSetpointPhaseA() const;
    QModbusReply *setPowerSetpointPhaseA(qint16 powerSetpointPhaseA);

    /* disable charge flag [-] - Address: 38, Size: 1 */
    quint16 disableCharge() const;
    QModbusReply *setDisableCharge(quint16 disableCharge);

    /* disable feed in flag [-] - Address: 39, Size: 1 */
    quint16 disableFeedIn() const;
    QModbusReply *setDisableFeedIn(quint16 disableFeedIn);

    /* ESS power setpoint phase 2 [W] - Address: 40, Size: 1 */
    qint16 powerSetpointPhaseB() const;
    QModbusReply *setPowerSetpointPhaseB(qint16 powerSetpointPhaseB);

    /* ESS power setpoint phase 3 [W] - Address: 41, Size: 1 */
    qint16 powerSetpointPhaseC() const;
    QModbusReply *setPowerSetpointPhaseC(qint16 powerSetpointPhaseC);

    /* Read block from start addess 12 with size of 14 registers containing following 9 properties:
      - Inverter AC input power phase A [W] - Address: 12, Size: 1
      - Inverter AC input power phase B [W] - Address: 13, Size: 1
      - Inverter AC input power phase C [W] - Address: 14, Size: 1
      - none - Address: 15, Size: 6
      - Inverter output frequency [Hz] - Address: 21, Size: 1
      - none - Address: 22, Size: 1
      - Inverter AC output power phase A [W] - Address: 23, Size: 1
      - Inverter AC output power phase B [W] - Address: 24, Size: 1
      - Inverter AC input power phase C [W] - Address: 25, Size: 1
    */
    void updateVebuspowerBlock();

    /* Read block from start addess 37 with size of 5 registers containing following 5 properties:
      - ESS power setpoint phase 1 [W] - Address: 37, Size: 1
      - disable charge flag [-] - Address: 38, Size: 1
      - disable feed in flag [-] - Address: 39, Size: 1
      - ESS power setpoint phase 2 [W] - Address: 40, Size: 1
      - ESS power setpoint phase 3 [W] - Address: 41, Size: 1
    */
    void updateVebussetpBlock();


    void updateInverterPowerInputPhaseA();
    void updateInverterPowerInputPhaseB();
    void updateInverterPowerInputPhaseC();
    void updateDummy1();
    void updateInverterOutputFrequency();
    void updateDummy2();
    void updateInverterPowerOutputPhaseA();
    void updateInverterPowerOutputPhaseB();
    void updateInverterPowerOutputPhaseC();
    void updatePowerSetpointPhaseA();
    void updateDisableCharge();
    void updateDisableFeedIn();
    void updatePowerSetpointPhaseB();
    void updatePowerSetpointPhaseC();

    QModbusReply *readInverterPowerInputPhaseA();
    QModbusReply *readInverterPowerInputPhaseB();
    QModbusReply *readInverterPowerInputPhaseC();
    QModbusReply *readDummy1();
    QModbusReply *readInverterOutputFrequency();
    QModbusReply *readDummy2();
    QModbusReply *readInverterPowerOutputPhaseA();
    QModbusReply *readInverterPowerOutputPhaseB();
    QModbusReply *readInverterPowerOutputPhaseC();
    QModbusReply *readPowerSetpointPhaseA();
    QModbusReply *readDisableCharge();
    QModbusReply *readDisableFeedIn();
    QModbusReply *readPowerSetpointPhaseB();
    QModbusReply *readPowerSetpointPhaseC();

    /* Read block from start addess 12 with size of 14 registers containing following 9 properties:
     - Inverter AC input power phase A [W] - Address: 12, Size: 1
     - Inverter AC input power phase B [W] - Address: 13, Size: 1
     - Inverter AC input power phase C [W] - Address: 14, Size: 1
     - none - Address: 15, Size: 6
     - Inverter output frequency [Hz] - Address: 21, Size: 1
     - none - Address: 22, Size: 1
     - Inverter AC output power phase A [W] - Address: 23, Size: 1
     - Inverter AC output power phase B [W] - Address: 24, Size: 1
     - Inverter AC input power phase C [W] - Address: 25, Size: 1
    */
    QModbusReply *readBlockVebuspower();

    /* Read block from start addess 37 with size of 5 registers containing following 5 properties:
     - ESS power setpoint phase 1 [W] - Address: 37, Size: 1
     - disable charge flag [-] - Address: 38, Size: 1
     - disable feed in flag [-] - Address: 39, Size: 1
     - ESS power setpoint phase 2 [W] - Address: 40, Size: 1
     - ESS power setpoint phase 3 [W] - Address: 41, Size: 1
    */
    QModbusReply *readBlockVebussetp();


    virtual bool initialize();
    virtual bool update();
    virtual void writeSetpoints(int16_t powerSetPhase);

signals:
    void reachableChanged(bool reachable);
    void checkReachabilityFailed();
    void checkReachableRetriesChanged(uint checkReachableRetries);

    void initializationFinished(bool success);
    void updateFinished();

    void endiannessChanged(ModbusDataUtils::ByteOrder endianness);


    void inverterPowerInputPhaseAChanged(float inverterPowerInputPhaseA);
    void inverterPowerInputPhaseAReadFinished(float inverterPowerInputPhaseA);
    void inverterPowerInputPhaseBChanged(float inverterPowerInputPhaseB);
    void inverterPowerInputPhaseBReadFinished(float inverterPowerInputPhaseB);
    void inverterPowerInputPhaseCChanged(float inverterPowerInputPhaseC);
    void inverterPowerInputPhaseCReadFinished(float inverterPowerInputPhaseC);
    void dummy1Changed(QVector<quint16> dummy1);
    void dummy1ReadFinished(QVector<quint16> dummy1);
    void inverterOutputFrequencyChanged(float inverterOutputFrequency);
    void inverterOutputFrequencyReadFinished(float inverterOutputFrequency);
    void dummy2Changed(QVector<quint16> dummy2);
    void dummy2ReadFinished(QVector<quint16> dummy2);
    void inverterPowerOutputPhaseAChanged(float inverterPowerOutputPhaseA);
    void inverterPowerOutputPhaseAReadFinished(float inverterPowerOutputPhaseA);
    void inverterPowerOutputPhaseBChanged(float inverterPowerOutputPhaseB);
    void inverterPowerOutputPhaseBReadFinished(float inverterPowerOutputPhaseB);
    void inverterPowerOutputPhaseCChanged(float inverterPowerOutputPhaseC);
    void inverterPowerOutputPhaseCReadFinished(float inverterPowerOutputPhaseC);
    void powerSetpointPhaseAChanged(qint16 powerSetpointPhaseA);
    void powerSetpointPhaseAReadFinished(qint16 powerSetpointPhaseA);
    void disableChargeChanged(quint16 disableCharge);
    void disableChargeReadFinished(quint16 disableCharge);
    void disableFeedInChanged(quint16 disableFeedIn);
    void disableFeedInReadFinished(quint16 disableFeedIn);
    void powerSetpointPhaseBChanged(qint16 powerSetpointPhaseB);
    void powerSetpointPhaseBReadFinished(qint16 powerSetpointPhaseB);
    void powerSetpointPhaseCChanged(qint16 powerSetpointPhaseC);
    void powerSetpointPhaseCReadFinished(qint16 powerSetpointPhaseC);

protected:
    float m_inverterPowerInputPhaseA = 0;
    float m_inverterPowerInputPhaseB = 0;
    float m_inverterPowerInputPhaseC = 0;
    QVector<quint16> m_dummy1;
    float m_inverterOutputFrequency = 0;
    QVector<quint16> m_dummy2;
    float m_inverterPowerOutputPhaseA = 0;
    float m_inverterPowerOutputPhaseB = 0;
    float m_inverterPowerOutputPhaseC = 0;
    qint16 m_powerSetpointPhaseA = 0;
    quint16 m_disableCharge = 0;
    quint16 m_disableFeedIn = 0;
    qint16 m_powerSetpointPhaseB = 0;
    qint16 m_powerSetpointPhaseC = 0;


    void processInverterPowerInputPhaseARegisterValues(const QVector<quint16> values);
    void processInverterPowerInputPhaseBRegisterValues(const QVector<quint16> values);
    void processInverterPowerInputPhaseCRegisterValues(const QVector<quint16> values);
    void processDummy1RegisterValues(const QVector<quint16> values);
    void processInverterOutputFrequencyRegisterValues(const QVector<quint16> values);
    void processDummy2RegisterValues(const QVector<quint16> values);
    void processInverterPowerOutputPhaseARegisterValues(const QVector<quint16> values);
    void processInverterPowerOutputPhaseBRegisterValues(const QVector<quint16> values);
    void processInverterPowerOutputPhaseCRegisterValues(const QVector<quint16> values);

    void processPowerSetpointPhaseARegisterValues(const QVector<quint16> values);
    void processDisableChargeRegisterValues(const QVector<quint16> values);
    void processDisableFeedInRegisterValues(const QVector<quint16> values);
    void processPowerSetpointPhaseBRegisterValues(const QVector<quint16> values);
    void processPowerSetpointPhaseCRegisterValues(const QVector<quint16> values);

    void handleModbusError(QModbusDevice::Error error);
    void testReachability();

private:
    ModbusDataUtils::ByteOrder m_endianness = ModbusDataUtils::ByteOrderLittleEndian;
    quint16 m_slaveId = 1;

    bool m_reachable = false;
    QModbusReply *m_checkRechableReply = nullptr;
    uint m_checkReachableRetries = 0;
    uint m_checkReachableRetriesCount = 0;
    bool m_communicationWorking = false;
    quint8 m_communicationFailedMax = 5;
    quint8 m_communicationFailedCounter = 0;

    QVector<QModbusReply *> m_pendingInitReplies;
    QVector<QModbusReply *> m_pendingUpdateReplies;

    QObject *m_initObject = nullptr;
    void verifyInitFinished();
    void finishInitialization(bool success);

    void verifyUpdateFinished();

    void onReachabilityCheckFailed();
    void evaluateReachableState();

};

QDebug operator<<(QDebug debug, VictronVebusModbusTcpConnection *victronVebusModbusTcpConnection);

#endif // VICTRONVEBUSMODBUSTCPCONNECTION_H
