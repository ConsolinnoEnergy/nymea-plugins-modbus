/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Copyright 2013 - 2024, nymea GmbH
* Contact: contact@nymea.io
*
* This fileDescriptor is part of nymea.
* This project including source code and documentation is protected by
* copyright law, and remains the property of nymea GmbH. All rights, including
* reproduction, publication, editing and translation, are reserved. The use of
* this project is subject to the terms of a license agreement to be concluded
* with nymea GmbH in accordance with the terms of use of nymea GmbH, available
* under https://nymea.io/license
*
* GNU Lesser General Public License Usage
* Alternatively, this project may be redistributed and/or modified under the
* terms of the GNU Lesser General Public License as published by the Free
* Software Foundation; version 3. This project is distributed in the hope that
* it will be useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this project. If not, see <https://www.gnu.org/licenses/>.
*
* For any further details and any questions please contact us under
* contact@nymea.io or see our FAQ/Licensing Information on
* https://nymea.io/license/faq
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* WARNING
*
* This file has been autogenerated. Any changes in this file may be overwritten.
* If you want to change something, update the register json or the tool.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


#include "mypvmodbustcpconnection.h"
#include <loggingcategories.h>
#include <math.h>
#include <QTimer>

NYMEA_LOGGING_CATEGORY(dcMyPvModbusTcpConnection, "MyPvModbusTcpConnection")

MyPvModbusTcpConnection::MyPvModbusTcpConnection(const QHostAddress &hostAddress, uint port, quint16 slaveId, QObject *parent) :
    ModbusTCPMaster(hostAddress, port, parent),
    m_slaveId(slaveId)
{
    connect(this, &ModbusTCPMaster::connectionStateChanged, this, [this](bool status){
        if (status) {
           qCDebug(dcMyPvModbusTcpConnection()) << "Modbus TCP connection" << m_hostAddress.toString() << "connected. Start testing if the connection is reachable...";
            // Cleanup before starting to initialize
            m_pendingInitReplies.clear();
            m_pendingUpdateReplies.clear();
            m_communicationWorking = false;
            m_communicationFailedCounter = 0;
            m_checkReachableRetriesCount = 0;
            testReachability();
        } else {
            qCWarning(dcMyPvModbusTcpConnection()) << "Modbus TCP connection diconnected from" << m_hostAddress.toString() << ". The connection is not reachable any more.";
            m_communicationWorking = false;
            m_communicationFailedCounter = 0;
            m_checkReachableRetriesCount = 0;
        }

        evaluateReachableState();
    });
}

bool MyPvModbusTcpConnection::reachable() const
{
    return m_reachable;
}

uint MyPvModbusTcpConnection::checkReachableRetries() const
{
    return m_checkReachableRetries;
}

void MyPvModbusTcpConnection::setCheckReachableRetries(uint checkReachableRetries)
{
    if (m_checkReachableRetries == checkReachableRetries)
        return;

    m_checkReachableRetries = checkReachableRetries;
    emit checkReachableRetriesChanged(m_checkReachableRetries);
}

ModbusDataUtils::ByteOrder MyPvModbusTcpConnection::endianness() const
{
    return m_endianness;
}

void MyPvModbusTcpConnection::setEndianness(ModbusDataUtils::ByteOrder endianness)
{
    if (m_endianness == endianness)
        return;

    m_endianness = endianness;
    emit endiannessChanged(m_endianness);
}

quint16 MyPvModbusTcpConnection::currentPower() const
{
    return m_currentPower;
}

QModbusReply *MyPvModbusTcpConnection::setCurrentPower(quint16 currentPower)
{
    QVector<quint16> values = ModbusDataUtils::convertFromUInt16(currentPower);
    qCDebug(dcMyPvModbusTcpConnection()) << "--> Write \"Current power\" register:" << 1000 << "size:" << 1 << values;
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 1000, values.count());
    request.setValues(values);
    return sendWriteRequest(request, m_slaveId);
}

quint16 MyPvModbusTcpConnection::manualStart() const
{
    return m_manualStart;
}

QModbusReply *MyPvModbusTcpConnection::setManualStart(quint16 manualStart)
{
    QVector<quint16> values = ModbusDataUtils::convertFromUInt16(manualStart);
    qCDebug(dcMyPvModbusTcpConnection()) << "--> Write \"Manual start\" register:" << 1012 << "size:" << 1 << values;
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 1012, values.count());
    request.setValues(values);
    return sendWriteRequest(request, m_slaveId);
}

float MyPvModbusTcpConnection::waterTemperature() const
{
    return m_waterTemperature;
}

float MyPvModbusTcpConnection::targetWaterTemperature() const
{
    return m_targetWaterTemperature;
}

MyPvModbusTcpConnection::ElwaStatus MyPvModbusTcpConnection::elwaStatus() const
{
    return m_elwaStatus;
}

bool MyPvModbusTcpConnection::initialize()
{
    if (!m_reachable) {
        qCWarning(dcMyPvModbusTcpConnection()) << "Tried to initialize but the device is not to be reachable.";
        return false;
    }
    // No init registers defined. Nothing to be done and we are finished.
    emit initializationFinished(true);
    return true;
}

bool MyPvModbusTcpConnection::update()
{
    if (!connected())
        return false;

    if (!m_pendingUpdateReplies.isEmpty()) {
        qCDebug(dcMyPvModbusTcpConnection()) << "Tried to update but there are still some update replies pending. Waiting for them to be finished...";
        return true;
    }

    QModbusReply *reply = nullptr;

    // Read Current power
    qCDebug(dcMyPvModbusTcpConnection()) << "--> Read \"Current power\" register:" << 1000 << "size:" << 1;
    reply = readCurrentPower();
    if (!reply) {
        qCWarning(dcMyPvModbusTcpConnection()) << "Error occurred while reading \"Current power\" registers from" << hostAddress().toString() << errorString();
        return false;
    }

    if (reply->isFinished()) {
        reply->deleteLater(); // Broadcast reply returns immediatly
        return false;
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &QModbusReply::finished, reply, &QModbusReply::deleteLater);
    connect(reply, &QModbusReply::finished, this, [this, reply](){
        m_pendingUpdateReplies.removeAll(reply);
        handleModbusError(reply->error());
        if (reply->error() != QModbusDevice::NoError) {
            verifyUpdateFinished();
            return;
        }

        const QModbusDataUnit unit = reply->result();
        qCDebug(dcMyPvModbusTcpConnection()) << "<-- Response from \"Current power\" register" << 1000 << "size:" << 1 << unit.values();
        processCurrentPowerRegisterValues(unit.values());
        update2();
    });

    connect(reply, &QModbusReply::errorOccurred, this, [this, reply] (QModbusDevice::Error error){
        qCWarning(dcMyPvModbusTcpConnection()) << "Modbus reply error occurred while reading \"Current power\" registers from" << hostAddress().toString() << error << reply->errorString();
    });
    
    return true;
}

void MyPvModbusTcpConnection::update2()
{
    QModbusReply *reply = nullptr;
    // Read Manual start
    qCDebug(dcMyPvModbusTcpConnection()) << "--> Read \"Manual start\" register:" << 1012 << "size:" << 1;
    reply = readManualStart();
    if (!reply) {
        qCWarning(dcMyPvModbusTcpConnection()) << "Error occurred while reading \"Manual start\" registers from" << hostAddress().toString() << errorString();
        return;
    }

    if (reply->isFinished()) {
        reply->deleteLater(); // Broadcast reply returns immediatly
        return;
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &QModbusReply::finished, reply, &QModbusReply::deleteLater);
    connect(reply, &QModbusReply::finished, this, [this, reply](){
        m_pendingUpdateReplies.removeAll(reply);
        handleModbusError(reply->error());
        if (reply->error() != QModbusDevice::NoError) {
            verifyUpdateFinished();
            return;
        }

        const QModbusDataUnit unit = reply->result();
        qCDebug(dcMyPvModbusTcpConnection()) << "<-- Response from \"Manual start\" register" << 1012 << "size:" << 1 << unit.values();
        processManualStartRegisterValues(unit.values());
        update3();
    });

    connect(reply, &QModbusReply::errorOccurred, this, [this, reply] (QModbusDevice::Error error){
        qCWarning(dcMyPvModbusTcpConnection()) << "Modbus reply error occurred while reading \"Manual start\" registers from" << hostAddress().toString() << error << reply->errorString();
    });
}

void MyPvModbusTcpConnection::update3()
{
    QModbusReply *reply = nullptr;

    // Read realTimeValues
    reply = readBlockRealTimeValues();
    qCDebug(dcMyPvModbusTcpConnection()) << "--> Read block \"realTimeValues\" registers from:" << 1001 << "size:" << 3;
    if (!reply) {
        qCWarning(dcMyPvModbusTcpConnection()) << "Error occurred while reading block \"realTimeValues\" registers";
        return;
    }

    if (reply->isFinished()) {
        reply->deleteLater(); // Broadcast reply returns immediatly
        return;
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &QModbusReply::finished, reply, &QModbusReply::deleteLater);
    connect(reply, &QModbusReply::finished, this, [this, reply](){
        m_pendingUpdateReplies.removeAll(reply);
        handleModbusError(reply->error());
        if (reply->error() != QModbusDevice::NoError) {
            verifyUpdateFinished();
            return;
        }

        const QModbusDataUnit unit = reply->result();
        const QVector<quint16> blockValues = unit.values();
        qCDebug(dcMyPvModbusTcpConnection()) << "<-- Response from reading block \"realTimeValues\" register" << 1001 << "size:" << 3 << blockValues;
        processWaterTemperatureRegisterValues(blockValues.mid(0, 1));
        processTargetWaterTemperatureRegisterValues(blockValues.mid(1, 1));
        processElwaStatusRegisterValues(blockValues.mid(2, 1));
        verifyUpdateFinished();
    });

    connect(reply, &QModbusReply::errorOccurred, this, [reply] (QModbusDevice::Error error){
        qCWarning(dcMyPvModbusTcpConnection()) << "Modbus reply error occurred while updating block \"realTimeValues\" registers" << error << reply->errorString();
    });
}

void MyPvModbusTcpConnection::updateCurrentPower()
{
    // Update registers from Current power
    qCDebug(dcMyPvModbusTcpConnection()) << "--> Read \"Current power\" register:" << 1000 << "size:" << 1;
    QModbusReply *reply = readCurrentPower();
    if (!reply) {
        qCWarning(dcMyPvModbusTcpConnection()) << "Error occurred while reading \"Current power\" registers from" << hostAddress().toString() << errorString();
        return;
    }

    if (reply->isFinished()) {
        reply->deleteLater(); // Broadcast reply returns immediatly
        return;
    }

    connect(reply, &QModbusReply::finished, reply, &QModbusReply::deleteLater);
    connect(reply, &QModbusReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        if (reply->error() == QModbusDevice::NoError) {
            const QModbusDataUnit unit = reply->result();
            qCDebug(dcMyPvModbusTcpConnection()) << "<-- Response from \"Current power\" register" << 1000 << "size:" << 1 << unit.values();
            processCurrentPowerRegisterValues(unit.values());
        }
    });

    connect(reply, &QModbusReply::errorOccurred, this, [this, reply] (QModbusDevice::Error error){
        qCWarning(dcMyPvModbusTcpConnection()) << "Modbus reply error occurred while updating \"Current power\" registers from" << hostAddress().toString() << error << reply->errorString();
    });
}

void MyPvModbusTcpConnection::updateManualStart()
{
    // Update registers from Manual start
    qCDebug(dcMyPvModbusTcpConnection()) << "--> Read \"Manual start\" register:" << 1012 << "size:" << 1;
    QModbusReply *reply = readManualStart();
    if (!reply) {
        qCWarning(dcMyPvModbusTcpConnection()) << "Error occurred while reading \"Manual start\" registers from" << hostAddress().toString() << errorString();
        return;
    }

    if (reply->isFinished()) {
        reply->deleteLater(); // Broadcast reply returns immediatly
        return;
    }

    connect(reply, &QModbusReply::finished, reply, &QModbusReply::deleteLater);
    connect(reply, &QModbusReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        if (reply->error() == QModbusDevice::NoError) {
            const QModbusDataUnit unit = reply->result();
            qCDebug(dcMyPvModbusTcpConnection()) << "<-- Response from \"Manual start\" register" << 1012 << "size:" << 1 << unit.values();
            processManualStartRegisterValues(unit.values());
        }
    });

    connect(reply, &QModbusReply::errorOccurred, this, [this, reply] (QModbusDevice::Error error){
        qCWarning(dcMyPvModbusTcpConnection()) << "Modbus reply error occurred while updating \"Manual start\" registers from" << hostAddress().toString() << error << reply->errorString();
    });
}

void MyPvModbusTcpConnection::updateRealTimeValuesBlock()
{
    // Update register block "realTimeValues"
    qCDebug(dcMyPvModbusTcpConnection()) << "--> Read block \"realTimeValues\" registers from:" << 1001 << "size:" << 3;
    QModbusReply *reply = readBlockRealTimeValues();
    if (!reply) {
        qCWarning(dcMyPvModbusTcpConnection()) << "Error occurred while reading block \"realTimeValues\" registers";
        return;
    }

    if (reply->isFinished()) {
        reply->deleteLater(); // Broadcast reply returns immediatly
        return;
    }

    connect(reply, &QModbusReply::finished, reply, &QModbusReply::deleteLater);
    connect(reply, &QModbusReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        if (reply->error() == QModbusDevice::NoError) {
            const QModbusDataUnit unit = reply->result();
            const QVector<quint16> blockValues = unit.values();
            qCDebug(dcMyPvModbusTcpConnection()) << "<-- Response from reading block \"realTimeValues\" register" << 1001 << "size:" << 3 << blockValues;
            processWaterTemperatureRegisterValues(blockValues.mid(0, 1));
            processTargetWaterTemperatureRegisterValues(blockValues.mid(1, 1));
            processElwaStatusRegisterValues(blockValues.mid(2, 1));
        }
    });

    connect(reply, &QModbusReply::errorOccurred, this, [reply] (QModbusDevice::Error error){
        qCWarning(dcMyPvModbusTcpConnection()) << "Modbus reply error occurred while updating block \"realTimeValues\" registers" << error << reply->errorString();
    });
}

QModbusReply *MyPvModbusTcpConnection::readCurrentPower()
{
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 1000, 1);
    return sendReadRequest(request, m_slaveId);
}

QModbusReply *MyPvModbusTcpConnection::readManualStart()
{
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 1012, 1);
    return sendReadRequest(request, m_slaveId);
}

QModbusReply *MyPvModbusTcpConnection::readWaterTemperature()
{
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 1001, 1);
    return sendReadRequest(request, m_slaveId);
}

QModbusReply *MyPvModbusTcpConnection::readTargetWaterTemperature()
{
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 1002, 1);
    return sendReadRequest(request, m_slaveId);
}

QModbusReply *MyPvModbusTcpConnection::readElwaStatus()
{
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 1003, 1);
    return sendReadRequest(request, m_slaveId);
}

QModbusReply *MyPvModbusTcpConnection::readBlockRealTimeValues()
{
    QModbusDataUnit request = QModbusDataUnit(QModbusDataUnit::RegisterType::HoldingRegisters, 1001, 3);
    return sendReadRequest(request, m_slaveId);
}

void MyPvModbusTcpConnection::processCurrentPowerRegisterValues(const QVector<quint16> values)
{
    quint16 receivedCurrentPower = ModbusDataUtils::convertToUInt16(values);
    emit currentPowerReadFinished(receivedCurrentPower);

    if (m_currentPower != receivedCurrentPower) {
        m_currentPower = receivedCurrentPower;
        emit currentPowerChanged(m_currentPower);
    }
}

void MyPvModbusTcpConnection::processManualStartRegisterValues(const QVector<quint16> values)
{
    quint16 receivedManualStart = ModbusDataUtils::convertToUInt16(values);
    emit manualStartReadFinished(receivedManualStart);

    if (m_manualStart != receivedManualStart) {
        m_manualStart = receivedManualStart;
        emit manualStartChanged(m_manualStart);
    }
}

void MyPvModbusTcpConnection::processWaterTemperatureRegisterValues(const QVector<quint16> values)
{
    float receivedWaterTemperature = ModbusDataUtils::convertToInt16(values) * 1.0 * pow(10, -1);
    emit waterTemperatureReadFinished(receivedWaterTemperature);

    if (m_waterTemperature != receivedWaterTemperature) {
        m_waterTemperature = receivedWaterTemperature;
        emit waterTemperatureChanged(m_waterTemperature);
    }
}

void MyPvModbusTcpConnection::processTargetWaterTemperatureRegisterValues(const QVector<quint16> values)
{
    float receivedTargetWaterTemperature = ModbusDataUtils::convertToInt16(values) * 1.0 * pow(10, -1);
    emit targetWaterTemperatureReadFinished(receivedTargetWaterTemperature);

    if (m_targetWaterTemperature != receivedTargetWaterTemperature) {
        m_targetWaterTemperature = receivedTargetWaterTemperature;
        emit targetWaterTemperatureChanged(m_targetWaterTemperature);
    }
}

void MyPvModbusTcpConnection::processElwaStatusRegisterValues(const QVector<quint16> values)
{
    ElwaStatus receivedElwaStatus = static_cast<ElwaStatus>(ModbusDataUtils::convertToUInt16(values));
    emit elwaStatusReadFinished(receivedElwaStatus);

    if (m_elwaStatus != receivedElwaStatus) {
        m_elwaStatus = receivedElwaStatus;
        emit elwaStatusChanged(m_elwaStatus);
    }
}

void MyPvModbusTcpConnection::handleModbusError(QModbusDevice::Error error)
{
    if (error == QModbusDevice::NoError) {
        // Reset the communication counter and we know we can reach the device
        m_communicationFailedCounter = 0;
        if (!m_communicationWorking)
            qCDebug(dcMyPvModbusTcpConnection()) << "Received a reply without any errors. The communication with the device seems to work now.";

        m_communicationWorking = true;
        evaluateReachableState();
    } else {
        m_communicationFailedCounter++;
        if (m_communicationWorking && m_communicationFailedCounter >= m_communicationFailedMax) {
            m_communicationWorking = false;
            qCWarning(dcMyPvModbusTcpConnection()) << "Received" << m_communicationFailedCounter << "errors while communicating with the RTU master. Mark as not reachable until the communication works again.";
            evaluateReachableState();
        }
    }
}

void MyPvModbusTcpConnection::testReachability()
{
    if (m_checkRechableReply)
        return;

    // Try to read the check reachability register waterTemperature in order to verify if the communication is working or not.
    qCDebug(dcMyPvModbusTcpConnection()) << "--> Test reachability by reading \"Actual water temperature\" register:" << 1001 << "size:" << 1;
    m_checkRechableReply = readWaterTemperature();
    if (!m_checkRechableReply) {
        qCDebug(dcMyPvModbusTcpConnection()) << "Error occurred verifying reachability by reading \"Actual water temperature\" register";
        onReachabilityCheckFailed();
        return;
    }

    if (m_checkRechableReply->isFinished()) {
        m_checkRechableReply->deleteLater(); // Broadcast reply returns immediatly
        m_checkRechableReply = nullptr;
        onReachabilityCheckFailed();
        return;
    }

    connect(m_checkRechableReply, &QModbusReply::finished, this, [this](){
        handleModbusError(m_checkRechableReply->error());
        if (m_checkRechableReply->error() != QModbusDevice::NoError)
            onReachabilityCheckFailed();

        m_checkRechableReply->deleteLater();
        m_checkRechableReply = nullptr;
    });

    connect(m_checkRechableReply, &QModbusReply::errorOccurred, this, [this] (QModbusDevice::Error error){
        qCDebug(dcMyPvModbusTcpConnection()) << "Modbus reply error occurred while verifying reachability by reading \"Actual water temperature\" register" << error << m_checkRechableReply->errorString();
    });
}

void MyPvModbusTcpConnection::verifyInitFinished()
{
    if (m_pendingInitReplies.isEmpty()) {
        finishInitialization(true);
    }
}

void MyPvModbusTcpConnection::finishInitialization(bool success)
{
    if (success) {
        qCDebug(dcMyPvModbusTcpConnection()) << "Initialization finished of MyPvModbusTcpConnection" << hostAddress().toString() << "finished successfully";
    } else {
        qCWarning(dcMyPvModbusTcpConnection()) << "Initialization finished of MyPvModbusTcpConnection" << hostAddress().toString() << "failed.";
    }

    // Cleanup init
    delete m_initObject;
    m_initObject = nullptr;
    m_pendingInitReplies.clear();

    emit initializationFinished(success);
}

void MyPvModbusTcpConnection::verifyUpdateFinished()
{
    if (m_pendingUpdateReplies.isEmpty()) {
        emit updateFinished();
    }
}

void MyPvModbusTcpConnection::onReachabilityCheckFailed()
{
    m_checkReachableRetriesCount++;

    if (m_checkReachableRetriesCount <= m_checkReachableRetries) {
        qCDebug(dcMyPvModbusTcpConnection()) << "Reachability test failed. Retry in on second" << m_checkReachableRetriesCount << "/" << m_checkReachableRetries;
        QTimer::singleShot(1000, this, &MyPvModbusTcpConnection::testReachability);
        return;
    }

    // The test reachability method failed, not retrying any more
    emit checkReachabilityFailed();
}

void MyPvModbusTcpConnection::evaluateReachableState()
{
    bool reachable = m_communicationWorking && connected();
    if (m_reachable == reachable)
        return;

    m_reachable = reachable;
    emit reachableChanged(m_reachable);
    m_checkReachableRetriesCount = 0;
}

QDebug operator<<(QDebug debug, MyPvModbusTcpConnection *myPvModbusTcpConnection)
{
    debug.nospace().noquote() << "MyPvModbusTcpConnection(" << myPvModbusTcpConnection->hostAddress().toString() << ":" << myPvModbusTcpConnection->port() << ")" << "\n";
    debug.nospace().noquote() << "    - Current power: " << myPvModbusTcpConnection->currentPower() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Manual start: " << myPvModbusTcpConnection->manualStart() << "\n";
    debug.nospace().noquote() << "    - Actual water temperature: " << myPvModbusTcpConnection->waterTemperature() << " [°C]" << "\n";
    debug.nospace().noquote() << "    - Target water temperature: " << myPvModbusTcpConnection->targetWaterTemperature() << " [°C]" << "\n";
    debug.nospace().noquote() << "    - Status of ELWA: " << myPvModbusTcpConnection->elwaStatus() << "\n";
    return debug.quote().space();
}

