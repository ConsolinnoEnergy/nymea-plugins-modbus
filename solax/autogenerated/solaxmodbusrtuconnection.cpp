/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Copyright 2013 - 2023, nymea GmbH
* Contact: contact@nymea.io
*
* This fileDescriptor is part of nymea.
* This project including source code and documentation is protected by
* copyright law, and remains the property of nymea GmbH. All rights, including
* reproduction, publication, editing and translation, are reserved. The use of
* this project is subject to the terms of a license agreement to be concluded
* with nymea GmbH in accordance with the terms of use of nymea GmbH, available
* under https://nymea.io/license
*
* GNU Lesser General Public License Usage
* Alternatively, this project may be redistributed and/or modified under the
* terms of the GNU Lesser General Public License as published by the Free
* Software Foundation; version 3. This project is distributed in the hope that
* it will be useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this project. If not, see <https://www.gnu.org/licenses/>.
*
* For any further details and any questions please contact us under
* contact@nymea.io or see our FAQ/Licensing Information on
* https://nymea.io/license/faq
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* WARNING
*
* This file has been autogenerated. Any changes in this file may be overwritten.
* If you want to change something, update the register json or the tool.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#include "solaxmodbusrtuconnection.h"
#include <loggingcategories.h>
#include <math.h>
#include <QTimer>

NYMEA_LOGGING_CATEGORY(dcSolaxModbusRtuConnection, "SolaxModbusRtuConnection")

SolaxModbusRtuConnection::SolaxModbusRtuConnection(ModbusRtuMaster *modbusRtuMaster, quint16 slaveId, QObject *parent) :
    QObject(parent),
    m_modbusRtuMaster(modbusRtuMaster),
    m_slaveId(slaveId)
{
    connect(m_modbusRtuMaster, &ModbusRtuMaster::connectedChanged, this, [=](bool connected){
        if (connected) {
            qCDebug(dcSolaxModbusRtuConnection()) << "Modbus RTU resource" << m_modbusRtuMaster->serialPort() << "connected again. Start testing if the connection is reachable...";
            m_pendingInitReplies.clear();
            m_pendingUpdateReplies.clear();
            m_communicationWorking = false;
            m_communicationFailedCounter = 0;
            m_checkReachableRetriesCount = 0;
            testReachability();
        } else {
            qCWarning(dcSolaxModbusRtuConnection()) << "Modbus RTU resource" << m_modbusRtuMaster->serialPort() << "disconnected. The connection is not reachable any more.";
            m_communicationWorking = false;
            m_communicationFailedCounter = 0;
            m_checkReachableRetriesCount = 0;
        }

        evaluateReachableState();
    });

    if (m_modbusRtuMaster->connected()) {
        testReachability();
    } else {
        evaluateReachableState();
    }
}

ModbusRtuMaster *SolaxModbusRtuConnection::modbusRtuMaster() const
{
    return m_modbusRtuMaster;
}
quint16 SolaxModbusRtuConnection::slaveId() const
{
    return m_slaveId;
}

bool SolaxModbusRtuConnection::reachable() const
{
    return m_reachable;
}

uint SolaxModbusRtuConnection::checkReachableRetries() const
{
    return m_checkReachableRetries;
}

void SolaxModbusRtuConnection::setCheckReachableRetries(uint checkReachableRetries)
{
    if (m_checkReachableRetries == checkReachableRetries)
        return;

    m_checkReachableRetries = checkReachableRetries;
    emit checkReachableRetriesChanged(m_checkReachableRetries);
}

ModbusDataUtils::ByteOrder SolaxModbusRtuConnection::endianness() const
{
    return m_endianness;
}

void SolaxModbusRtuConnection::setEndianness(ModbusDataUtils::ByteOrder endianness)
{
    if (m_endianness == endianness)
        return;

    m_endianness = endianness;
    emit endiannessChanged(m_endianness);
}

quint16 SolaxModbusRtuConnection::batteryCapacity() const
{
    return m_batteryCapacity;
}

quint16 SolaxModbusRtuConnection::bmsWarningLsb() const
{
    return m_bmsWarningLsb;
}

quint16 SolaxModbusRtuConnection::bmsWarningMsb() const
{
    return m_bmsWarningMsb;
}

quint32 SolaxModbusRtuConnection::inverterFaultBits() const
{
    return m_inverterFaultBits;
}

quint16 SolaxModbusRtuConnection::meter1CommunicationSate() const
{
    return m_meter1CommunicationSate;
}

quint16 SolaxModbusRtuConnection::activePowerLimit() const
{
    return m_activePowerLimit;
}

quint16 SolaxModbusRtuConnection::firmwareVersion() const
{
    return m_firmwareVersion;
}

quint16 SolaxModbusRtuConnection::inverterType() const
{
    return m_inverterType;
}

QString SolaxModbusRtuConnection::serialNumber() const
{
    return m_serialNumber;
}

QString SolaxModbusRtuConnection::factoryName() const
{
    return m_factoryName;
}

QString SolaxModbusRtuConnection::moduleName() const
{
    return m_moduleName;
}

float SolaxModbusRtuConnection::inverterVoltage() const
{
    return m_inverterVoltage;
}

float SolaxModbusRtuConnection::inverterCurrent() const
{
    return m_inverterCurrent;
}

qint16 SolaxModbusRtuConnection::inverterPower() const
{
    return m_inverterPower;
}

float SolaxModbusRtuConnection::pvVoltage1() const
{
    return m_pvVoltage1;
}

float SolaxModbusRtuConnection::pvVoltage2() const
{
    return m_pvVoltage2;
}

float SolaxModbusRtuConnection::pvCurrent1() const
{
    return m_pvCurrent1;
}

float SolaxModbusRtuConnection::pvCurrent2() const
{
    return m_pvCurrent2;
}

float SolaxModbusRtuConnection::inverterFrequency() const
{
    return m_inverterFrequency;
}

qint16 SolaxModbusRtuConnection::temperature() const
{
    return m_temperature;
}

SolaxModbusRtuConnection::RunMode SolaxModbusRtuConnection::runMode() const
{
    return m_runMode;
}

quint16 SolaxModbusRtuConnection::powerDc1() const
{
    return m_powerDc1;
}

quint16 SolaxModbusRtuConnection::powerDc2() const
{
    return m_powerDc2;
}

float SolaxModbusRtuConnection::batVoltageCharge1() const
{
    return m_batVoltageCharge1;
}

float SolaxModbusRtuConnection::batCurrentCharge1() const
{
    return m_batCurrentCharge1;
}

qint16 SolaxModbusRtuConnection::batPowerCharge1() const
{
    return m_batPowerCharge1;
}

quint16 SolaxModbusRtuConnection::bmsConnectState() const
{
    return m_bmsConnectState;
}

qint16 SolaxModbusRtuConnection::temperatureBat() const
{
    return m_temperatureBat;
}

qint32 SolaxModbusRtuConnection::feedinPower() const
{
    return m_feedinPower;
}

float SolaxModbusRtuConnection::feedinEnergyTotal() const
{
    return m_feedinEnergyTotal;
}

float SolaxModbusRtuConnection::consumEnergyTotal() const
{
    return m_consumEnergyTotal;
}

float SolaxModbusRtuConnection::gridVoltageR() const
{
    return m_gridVoltageR;
}

float SolaxModbusRtuConnection::gridCurrentR() const
{
    return m_gridCurrentR;
}

qint16 SolaxModbusRtuConnection::gridPowerR() const
{
    return m_gridPowerR;
}

float SolaxModbusRtuConnection::gridFrequencyR() const
{
    return m_gridFrequencyR;
}

float SolaxModbusRtuConnection::gridVoltageS() const
{
    return m_gridVoltageS;
}

float SolaxModbusRtuConnection::gridCurrentS() const
{
    return m_gridCurrentS;
}

qint16 SolaxModbusRtuConnection::gridPowerS() const
{
    return m_gridPowerS;
}

float SolaxModbusRtuConnection::gridFrequencyS() const
{
    return m_gridFrequencyS;
}

float SolaxModbusRtuConnection::gridVoltageT() const
{
    return m_gridVoltageT;
}

float SolaxModbusRtuConnection::gridCurrentT() const
{
    return m_gridCurrentT;
}

qint16 SolaxModbusRtuConnection::gridPowerT() const
{
    return m_gridPowerT;
}

float SolaxModbusRtuConnection::gridFrequencyT() const
{
    return m_gridFrequencyT;
}

float SolaxModbusRtuConnection::solarEnergyTotal() const
{
    return m_solarEnergyTotal;
}

float SolaxModbusRtuConnection::solarEnergyToday() const
{
    return m_solarEnergyToday;
}

bool SolaxModbusRtuConnection::initialize()
{
    if (!m_reachable) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Tried to initialize but the device is not to be reachable.";
        return false;
    }
    if (m_initObject) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Tried to initialize but the init process is already running.";
        return false;
    }

    // Parent object for the init process
    m_initObject = new QObject(this);

    ModbusRtuReply *reply = nullptr;

    // Read Firmware version (0x7D)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read init \"Firmware version (0x7D)\" register:" << 125 << "size:" << 1;
    reply = readFirmwareVersion();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Firmware version (0x7D)\" registers";
        finishInitialization(false);
        return false;
    }

    if (reply->isFinished()) {
        finishInitialization(false); // Broadcast reply returns immediatly
        return false;
    }

    m_pendingInitReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, m_initObject, [this, reply](){
        handleModbusError(reply->error());
        m_pendingInitReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            finishInitialization(false);
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Firmware version (0x7D)\" init register" << 125 << "size:" << 1 << values;
        processFirmwareVersionRegisterValues(values);
        verifyInitFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, m_initObject, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Firmware version (0x7D)\" registers" << error << reply->errorString();
    });

    // Read Inverter rated power (0xBA)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read init \"Inverter rated power (0xBA)\" register:" << 186 << "size:" << 1;
    reply = readInverterType();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Inverter rated power (0xBA)\" registers";
        finishInitialization(false);
        return false;
    }

    if (reply->isFinished()) {
        finishInitialization(false); // Broadcast reply returns immediatly
        return false;
    }

    m_pendingInitReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, m_initObject, [this, reply](){
        handleModbusError(reply->error());
        m_pendingInitReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            finishInitialization(false);
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Inverter rated power (0xBA)\" init register" << 186 << "size:" << 1 << values;
        processInverterTypeRegisterValues(values);
        verifyInitFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, m_initObject, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Inverter rated power (0xBA)\" registers" << error << reply->errorString();
    });

    // Read identification
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read init block \"identification\" registers from:" << 0 << "size:" << 21;
    reply = readBlockIdentification();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading block \"identification\" registers";
        finishInitialization(false);
        return false;
    }

    if (reply->isFinished()) {
        finishInitialization(false); // Broadcast reply returns immediatly
        return false;
    }

    m_pendingInitReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, m_initObject, [this, reply](){
        handleModbusError(reply->error());
        m_pendingInitReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            finishInitialization(false);
            return;
        }

        QVector<quint16> blockValues = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from reading init block \"identification\" register" << 0 << "size:" << 21 << blockValues;
        processSerialNumberRegisterValues(blockValues.mid(0, 7));
        processFactoryNameRegisterValues(blockValues.mid(7, 7));
        processModuleNameRegisterValues(blockValues.mid(14, 7));
        verifyInitFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, m_initObject, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"identification\" registers" << error << reply->errorString();
    });

    return true;
}

bool SolaxModbusRtuConnection::update()
{
    if (!m_modbusRtuMaster->connected()) {
        qCDebug(dcSolaxModbusRtuConnection()) << "Tried to update the registers but the hardware resource seems not to be connected.";
        return false;
    }

    if (!m_pendingUpdateReplies.isEmpty()) {
        qCDebug(dcSolaxModbusRtuConnection()) << "Tried to update the registers but there are still some update replies pending. Waiting for them to be finished...";
        return true;
    }

    // Hardware resource available but communication not working. 
    // Try to read the check reachability register to re-evaluatoe the communication... 
    if (m_modbusRtuMaster->connected() && !m_communicationWorking) {
        testReachability();
        return false;
    }

    ModbusRtuReply *reply = nullptr;

    // Read Battery state of charge (0x1C)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Battery state of charge (0x1C)\" register:" << 28 << "size:" << 1;
    reply = readBatteryCapacity();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Battery state of charge (0x1C)\" registers";
        return false;
    }

    if (reply->isFinished()) {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Battery state of charge (0x1C)\" register" << 28 << "size:" << 1 << values;
        processBatteryCapacityRegisterValues(values);
        verifyUpdateFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Battery state of charge (0x1C)\" registers" << error << reply->errorString();
    });

    // Read BMS warning bits lsb (0x1F)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"BMS warning bits lsb (0x1F)\" register:" << 31 << "size:" << 1;
    reply = readBmsWarningLsb();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"BMS warning bits lsb (0x1F)\" registers";
        return false;
    }

    if (reply->isFinished()) {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"BMS warning bits lsb (0x1F)\" register" << 31 << "size:" << 1 << values;
        processBmsWarningLsbRegisterValues(values);
        verifyUpdateFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"BMS warning bits lsb (0x1F)\" registers" << error << reply->errorString();
    });

    // Read BMS warning bits msb (0x26)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"BMS warning bits msb (0x26)\" register:" << 38 << "size:" << 1;
    reply = readBmsWarningMsb();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"BMS warning bits msb (0x26)\" registers";
        return false;
    }

    if (reply->isFinished()) {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"BMS warning bits msb (0x26)\" register" << 38 << "size:" << 1 << values;
        processBmsWarningMsbRegisterValues(values);
        verifyUpdateFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"BMS warning bits msb (0x26)\" registers" << error << reply->errorString();
    });

    // Read Inverter fault bits (0x40)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Inverter fault bits (0x40)\" register:" << 64 << "size:" << 2;
    reply = readInverterFaultBits();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Inverter fault bits (0x40)\" registers";
        return false;
    }

    if (reply->isFinished()) {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Inverter fault bits (0x40)\" register" << 64 << "size:" << 2 << values;
        processInverterFaultBitsRegisterValues(values);
        verifyUpdateFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Inverter fault bits (0x40)\" registers" << error << reply->errorString();
    });

    // Read Meter 1 communication status (0xB8)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Meter 1 communication status (0xB8)\" register:" << 184 << "size:" << 1;
    reply = readMeter1CommunicationSate();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Meter 1 communication status (0xB8)\" registers";
        return false;
    }

    if (reply->isFinished()) {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Meter 1 communication status (0xB8)\" register" << 184 << "size:" << 1 << values;
        processMeter1CommunicationSateRegisterValues(values);
        verifyUpdateFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Meter 1 communication status (0xB8)\" registers" << error << reply->errorString();
    });

    // Read Active power limit (0x25)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Active power limit (0x25)\" register:" << 37 << "size:" << 1;
    reply = readActivePowerLimit();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Active power limit (0x25)\" registers";
        return false;
    }

    if (reply->isFinished()) {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> values = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Active power limit (0x25)\" register" << 37 << "size:" << 1 << values;
        processActivePowerLimitRegisterValues(values);
        verifyUpdateFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Active power limit (0x25)\" registers" << error << reply->errorString();
    });

    // Read pvVoltageAndCurrent
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read block \"pvVoltageAndCurrent\" registers from:" << 0 << "size:" << 12;
    reply = readBlockPvVoltageAndCurrent();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading block \"pvVoltageAndCurrent\" registers";
        return false;
    }

    if (reply->isFinished()) {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> blockValues = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from reading block \"pvVoltageAndCurrent\" register" << 0 << "size:" << 12 << blockValues;
        processInverterVoltageRegisterValues(blockValues.mid(0, 1));
        processInverterCurrentRegisterValues(blockValues.mid(1, 1));
        processInverterPowerRegisterValues(blockValues.mid(2, 1));
        processPvVoltage1RegisterValues(blockValues.mid(3, 1));
        processPvVoltage2RegisterValues(blockValues.mid(4, 1));
        processPvCurrent1RegisterValues(blockValues.mid(5, 1));
        processPvCurrent2RegisterValues(blockValues.mid(6, 1));
        processInverterFrequencyRegisterValues(blockValues.mid(7, 1));
        processTemperatureRegisterValues(blockValues.mid(8, 1));
        processRunModeRegisterValues(blockValues.mid(9, 1));
        processPowerDc1RegisterValues(blockValues.mid(10, 1));
        processPowerDc2RegisterValues(blockValues.mid(11, 1));
        verifyUpdateFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"pvVoltageAndCurrent\" registers" << error << reply->errorString();
    });


    // Read batPowerAndState
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read block \"batPowerAndState\" registers from:" << 20 << "size:" << 5;
    reply = readBlockBatPowerAndState();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading block \"batPowerAndState\" registers";
        return false;
    }

    if (reply->isFinished()) {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> blockValues = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from reading block \"batPowerAndState\" register" << 20 << "size:" << 5 << blockValues;
        processBatVoltageCharge1RegisterValues(blockValues.mid(0, 1));
        processBatCurrentCharge1RegisterValues(blockValues.mid(1, 1));
        processBatPowerCharge1RegisterValues(blockValues.mid(2, 1));
        processBmsConnectStateRegisterValues(blockValues.mid(3, 1));
        processTemperatureBatRegisterValues(blockValues.mid(4, 1));
        verifyUpdateFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"batPowerAndState\" registers" << error << reply->errorString();
    });


    // Read meterData
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read block \"meterData\" registers from:" << 70 << "size:" << 6;
    reply = readBlockMeterData();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading block \"meterData\" registers";
        return false;
    }

    if (reply->isFinished()) {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> blockValues = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from reading block \"meterData\" register" << 70 << "size:" << 6 << blockValues;
        processFeedinPowerRegisterValues(blockValues.mid(0, 2));
        processFeedinEnergyTotalRegisterValues(blockValues.mid(2, 2));
        processConsumEnergyTotalRegisterValues(blockValues.mid(4, 2));
        verifyUpdateFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"meterData\" registers" << error << reply->errorString();
    });


    // Read phasesData
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read block \"phasesData\" registers from:" << 106 << "size:" << 12;
    reply = readBlockPhasesData();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading block \"phasesData\" registers";
        return false;
    }

    if (reply->isFinished()) {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> blockValues = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from reading block \"phasesData\" register" << 106 << "size:" << 12 << blockValues;
        processGridVoltageRRegisterValues(blockValues.mid(0, 1));
        processGridCurrentRRegisterValues(blockValues.mid(1, 1));
        processGridPowerRRegisterValues(blockValues.mid(2, 1));
        processGridFrequencyRRegisterValues(blockValues.mid(3, 1));
        processGridVoltageSRegisterValues(blockValues.mid(4, 1));
        processGridCurrentSRegisterValues(blockValues.mid(5, 1));
        processGridPowerSRegisterValues(blockValues.mid(6, 1));
        processGridFrequencySRegisterValues(blockValues.mid(7, 1));
        processGridVoltageTRegisterValues(blockValues.mid(8, 1));
        processGridCurrentTRegisterValues(blockValues.mid(9, 1));
        processGridPowerTRegisterValues(blockValues.mid(10, 1));
        processGridFrequencyTRegisterValues(blockValues.mid(11, 1));
        verifyUpdateFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"phasesData\" registers" << error << reply->errorString();
    });


    // Read solarEnergy
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read block \"solarEnergy\" registers from:" << 148 << "size:" << 3;
    reply = readBlockSolarEnergy();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading block \"solarEnergy\" registers";
        return false;
    }

    if (reply->isFinished()) {
        return false; // Broadcast reply returns immediatly
    }

    m_pendingUpdateReplies.append(reply);
    connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
        handleModbusError(reply->error());
        m_pendingUpdateReplies.removeAll(reply);

        if (reply->error() != ModbusRtuReply::NoError) {
            verifyUpdateFinished();
            return;
        }

        QVector<quint16> blockValues = reply->result();
        qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from reading block \"solarEnergy\" register" << 148 << "size:" << 3 << blockValues;
        processSolarEnergyTotalRegisterValues(blockValues.mid(0, 2));
        processSolarEnergyTodayRegisterValues(blockValues.mid(2, 1));
        verifyUpdateFinished();
    });

    connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
        qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"solarEnergy\" registers" << error << reply->errorString();
    });

    return true;
}

void SolaxModbusRtuConnection::updateBatteryCapacity()
{
    // Update registers from Battery state of charge (0x1C)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Battery state of charge (0x1C)\" register:" << 28 << "size:" << 1;
    ModbusRtuReply *reply = readBatteryCapacity();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Battery state of charge (0x1C)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Battery state of charge (0x1C)\" register" << 28 << "size:" << 1 << values;
                processBatteryCapacityRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Battery state of charge (0x1C)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateBmsWarningLsb()
{
    // Update registers from BMS warning bits lsb (0x1F)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"BMS warning bits lsb (0x1F)\" register:" << 31 << "size:" << 1;
    ModbusRtuReply *reply = readBmsWarningLsb();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"BMS warning bits lsb (0x1F)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"BMS warning bits lsb (0x1F)\" register" << 31 << "size:" << 1 << values;
                processBmsWarningLsbRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"BMS warning bits lsb (0x1F)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateBmsWarningMsb()
{
    // Update registers from BMS warning bits msb (0x26)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"BMS warning bits msb (0x26)\" register:" << 38 << "size:" << 1;
    ModbusRtuReply *reply = readBmsWarningMsb();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"BMS warning bits msb (0x26)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"BMS warning bits msb (0x26)\" register" << 38 << "size:" << 1 << values;
                processBmsWarningMsbRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"BMS warning bits msb (0x26)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateInverterFaultBits()
{
    // Update registers from Inverter fault bits (0x40)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Inverter fault bits (0x40)\" register:" << 64 << "size:" << 2;
    ModbusRtuReply *reply = readInverterFaultBits();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Inverter fault bits (0x40)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Inverter fault bits (0x40)\" register" << 64 << "size:" << 2 << values;
                processInverterFaultBitsRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Inverter fault bits (0x40)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateMeter1CommunicationSate()
{
    // Update registers from Meter 1 communication status (0xB8)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Meter 1 communication status (0xB8)\" register:" << 184 << "size:" << 1;
    ModbusRtuReply *reply = readMeter1CommunicationSate();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Meter 1 communication status (0xB8)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Meter 1 communication status (0xB8)\" register" << 184 << "size:" << 1 << values;
                processMeter1CommunicationSateRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Meter 1 communication status (0xB8)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateActivePowerLimit()
{
    // Update registers from Active power limit (0x25)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Active power limit (0x25)\" register:" << 37 << "size:" << 1;
    ModbusRtuReply *reply = readActivePowerLimit();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Active power limit (0x25)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Active power limit (0x25)\" register" << 37 << "size:" << 1 << values;
                processActivePowerLimitRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Active power limit (0x25)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateSerialNumber()
{
    // Update registers from Serial number (0x00)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Serial number (0x00)\" register:" << 0 << "size:" << 7;
    ModbusRtuReply *reply = readSerialNumber();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Serial number (0x00)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Serial number (0x00)\" register" << 0 << "size:" << 7 << values;
                processSerialNumberRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Serial number (0x00)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateFactoryName()
{
    // Update registers from Factory name (0x07)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Factory name (0x07)\" register:" << 7 << "size:" << 7;
    ModbusRtuReply *reply = readFactoryName();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Factory name (0x07)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Factory name (0x07)\" register" << 7 << "size:" << 7 << values;
                processFactoryNameRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Factory name (0x07)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateModuleName()
{
    // Update registers from Module name (0x0E)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Module name (0x0E)\" register:" << 14 << "size:" << 7;
    ModbusRtuReply *reply = readModuleName();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Module name (0x0E)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Module name (0x0E)\" register" << 14 << "size:" << 7 << values;
                processModuleNameRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Module name (0x0E)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateInverterVoltage()
{
    // Update registers from Inverter voltage (0x00)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Inverter voltage (0x00)\" register:" << 0 << "size:" << 1;
    ModbusRtuReply *reply = readInverterVoltage();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Inverter voltage (0x00)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Inverter voltage (0x00)\" register" << 0 << "size:" << 1 << values;
                processInverterVoltageRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Inverter voltage (0x00)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateInverterCurrent()
{
    // Update registers from Inverter current (0x01)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Inverter current (0x01)\" register:" << 1 << "size:" << 1;
    ModbusRtuReply *reply = readInverterCurrent();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Inverter current (0x01)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Inverter current (0x01)\" register" << 1 << "size:" << 1 << values;
                processInverterCurrentRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Inverter current (0x01)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateInverterPower()
{
    // Update registers from Inverter power (0x02)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Inverter power (0x02)\" register:" << 2 << "size:" << 1;
    ModbusRtuReply *reply = readInverterPower();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Inverter power (0x02)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Inverter power (0x02)\" register" << 2 << "size:" << 1 << values;
                processInverterPowerRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Inverter power (0x02)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updatePvVoltage1()
{
    // Update registers from PV voltage 1 (0x03)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"PV voltage 1 (0x03)\" register:" << 3 << "size:" << 1;
    ModbusRtuReply *reply = readPvVoltage1();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"PV voltage 1 (0x03)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"PV voltage 1 (0x03)\" register" << 3 << "size:" << 1 << values;
                processPvVoltage1RegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"PV voltage 1 (0x03)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updatePvVoltage2()
{
    // Update registers from PV voltage 2 (0x04)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"PV voltage 2 (0x04)\" register:" << 4 << "size:" << 1;
    ModbusRtuReply *reply = readPvVoltage2();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"PV voltage 2 (0x04)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"PV voltage 2 (0x04)\" register" << 4 << "size:" << 1 << values;
                processPvVoltage2RegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"PV voltage 2 (0x04)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updatePvCurrent1()
{
    // Update registers from PV current 1 (0x05)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"PV current 1 (0x05)\" register:" << 5 << "size:" << 1;
    ModbusRtuReply *reply = readPvCurrent1();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"PV current 1 (0x05)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"PV current 1 (0x05)\" register" << 5 << "size:" << 1 << values;
                processPvCurrent1RegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"PV current 1 (0x05)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updatePvCurrent2()
{
    // Update registers from PV current 2 (0x06)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"PV current 2 (0x06)\" register:" << 6 << "size:" << 1;
    ModbusRtuReply *reply = readPvCurrent2();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"PV current 2 (0x06)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"PV current 2 (0x06)\" register" << 6 << "size:" << 1 << values;
                processPvCurrent2RegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"PV current 2 (0x06)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateInverterFrequency()
{
    // Update registers from Inverter frequenxy (0x07)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Inverter frequenxy (0x07)\" register:" << 7 << "size:" << 1;
    ModbusRtuReply *reply = readInverterFrequency();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Inverter frequenxy (0x07)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Inverter frequenxy (0x07)\" register" << 7 << "size:" << 1 << values;
                processInverterFrequencyRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Inverter frequenxy (0x07)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateTemperature()
{
    // Update registers from Radiator temperature (0x08)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Radiator temperature (0x08)\" register:" << 8 << "size:" << 1;
    ModbusRtuReply *reply = readTemperature();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Radiator temperature (0x08)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Radiator temperature (0x08)\" register" << 8 << "size:" << 1 << values;
                processTemperatureRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Radiator temperature (0x08)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateRunMode()
{
    // Update registers from Run mode (0x09)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Run mode (0x09)\" register:" << 9 << "size:" << 1;
    ModbusRtuReply *reply = readRunMode();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Run mode (0x09)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Run mode (0x09)\" register" << 9 << "size:" << 1 << values;
                processRunModeRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Run mode (0x09)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updatePowerDc1()
{
    // Update registers from Power DC 1 (0x0A)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Power DC 1 (0x0A)\" register:" << 10 << "size:" << 1;
    ModbusRtuReply *reply = readPowerDc1();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Power DC 1 (0x0A)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Power DC 1 (0x0A)\" register" << 10 << "size:" << 1 << values;
                processPowerDc1RegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Power DC 1 (0x0A)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updatePowerDc2()
{
    // Update registers from Power DC 2 (0x0B)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Power DC 2 (0x0B)\" register:" << 11 << "size:" << 1;
    ModbusRtuReply *reply = readPowerDc2();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Power DC 2 (0x0B)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Power DC 2 (0x0B)\" register" << 11 << "size:" << 1 << values;
                processPowerDc2RegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Power DC 2 (0x0B)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateBatVoltageCharge1()
{
    // Update registers from Battery voltage charge 1 (0x14)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Battery voltage charge 1 (0x14)\" register:" << 20 << "size:" << 1;
    ModbusRtuReply *reply = readBatVoltageCharge1();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Battery voltage charge 1 (0x14)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Battery voltage charge 1 (0x14)\" register" << 20 << "size:" << 1 << values;
                processBatVoltageCharge1RegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Battery voltage charge 1 (0x14)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateBatCurrentCharge1()
{
    // Update registers from Battery current charge 1 (0x15)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Battery current charge 1 (0x15)\" register:" << 21 << "size:" << 1;
    ModbusRtuReply *reply = readBatCurrentCharge1();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Battery current charge 1 (0x15)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Battery current charge 1 (0x15)\" register" << 21 << "size:" << 1 << values;
                processBatCurrentCharge1RegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Battery current charge 1 (0x15)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateBatPowerCharge1()
{
    // Update registers from Battery power charge1 (0x16)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Battery power charge1 (0x16)\" register:" << 22 << "size:" << 1;
    ModbusRtuReply *reply = readBatPowerCharge1();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Battery power charge1 (0x16)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Battery power charge1 (0x16)\" register" << 22 << "size:" << 1 << values;
                processBatPowerCharge1RegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Battery power charge1 (0x16)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateBmsConnectState()
{
    // Update registers from BMS connected state (0x17)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"BMS connected state (0x17)\" register:" << 23 << "size:" << 1;
    ModbusRtuReply *reply = readBmsConnectState();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"BMS connected state (0x17)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"BMS connected state (0x17)\" register" << 23 << "size:" << 1 << values;
                processBmsConnectStateRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"BMS connected state (0x17)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateTemperatureBat()
{
    // Update registers from Battery temperature
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Battery temperature\" register:" << 24 << "size:" << 1;
    ModbusRtuReply *reply = readTemperatureBat();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Battery temperature\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Battery temperature\" register" << 24 << "size:" << 1 << values;
                processTemperatureBatRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Battery temperature\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateFeedinPower()
{
    // Update registers from Power to grid (0x46). Positive means exported power, negative means consumed power.
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Power to grid (0x46). Positive means exported power, negative means consumed power.\" register:" << 70 << "size:" << 2;
    ModbusRtuReply *reply = readFeedinPower();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Power to grid (0x46). Positive means exported power, negative means consumed power.\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Power to grid (0x46). Positive means exported power, negative means consumed power.\" register" << 70 << "size:" << 2 << values;
                processFeedinPowerRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Power to grid (0x46). Positive means exported power, negative means consumed power.\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateFeedinEnergyTotal()
{
    // Update registers from Exported energy, total (0x48)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Exported energy, total (0x48)\" register:" << 72 << "size:" << 2;
    ModbusRtuReply *reply = readFeedinEnergyTotal();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Exported energy, total (0x48)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Exported energy, total (0x48)\" register" << 72 << "size:" << 2 << values;
                processFeedinEnergyTotalRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Exported energy, total (0x48)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateConsumEnergyTotal()
{
    // Update registers from Consumed energy, total (0x4A)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Consumed energy, total (0x4A)\" register:" << 74 << "size:" << 2;
    ModbusRtuReply *reply = readConsumEnergyTotal();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Consumed energy, total (0x4A)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Consumed energy, total (0x4A)\" register" << 74 << "size:" << 2 << values;
                processConsumEnergyTotalRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Consumed energy, total (0x4A)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateGridVoltageR()
{
    // Update registers from Phase R voltage (0x6A)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Phase R voltage (0x6A)\" register:" << 106 << "size:" << 1;
    ModbusRtuReply *reply = readGridVoltageR();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Phase R voltage (0x6A)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Phase R voltage (0x6A)\" register" << 106 << "size:" << 1 << values;
                processGridVoltageRRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Phase R voltage (0x6A)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateGridCurrentR()
{
    // Update registers from Phase R current (0x6B)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Phase R current (0x6B)\" register:" << 107 << "size:" << 1;
    ModbusRtuReply *reply = readGridCurrentR();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Phase R current (0x6B)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Phase R current (0x6B)\" register" << 107 << "size:" << 1 << values;
                processGridCurrentRRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Phase R current (0x6B)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateGridPowerR()
{
    // Update registers from Phase R power (0x6C)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Phase R power (0x6C)\" register:" << 108 << "size:" << 1;
    ModbusRtuReply *reply = readGridPowerR();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Phase R power (0x6C)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Phase R power (0x6C)\" register" << 108 << "size:" << 1 << values;
                processGridPowerRRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Phase R power (0x6C)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateGridFrequencyR()
{
    // Update registers from Phase R frequency (0x6D)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Phase R frequency (0x6D)\" register:" << 109 << "size:" << 1;
    ModbusRtuReply *reply = readGridFrequencyR();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Phase R frequency (0x6D)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Phase R frequency (0x6D)\" register" << 109 << "size:" << 1 << values;
                processGridFrequencyRRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Phase R frequency (0x6D)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateGridVoltageS()
{
    // Update registers from Phase S voltage (0x6E)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Phase S voltage (0x6E)\" register:" << 110 << "size:" << 1;
    ModbusRtuReply *reply = readGridVoltageS();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Phase S voltage (0x6E)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Phase S voltage (0x6E)\" register" << 110 << "size:" << 1 << values;
                processGridVoltageSRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Phase S voltage (0x6E)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateGridCurrentS()
{
    // Update registers from Phase S current (0x6F)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Phase S current (0x6F)\" register:" << 111 << "size:" << 1;
    ModbusRtuReply *reply = readGridCurrentS();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Phase S current (0x6F)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Phase S current (0x6F)\" register" << 111 << "size:" << 1 << values;
                processGridCurrentSRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Phase S current (0x6F)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateGridPowerS()
{
    // Update registers from Phase S power (0x70)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Phase S power (0x70)\" register:" << 112 << "size:" << 1;
    ModbusRtuReply *reply = readGridPowerS();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Phase S power (0x70)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Phase S power (0x70)\" register" << 112 << "size:" << 1 << values;
                processGridPowerSRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Phase S power (0x70)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateGridFrequencyS()
{
    // Update registers from Phase S frequency (0x71)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Phase S frequency (0x71)\" register:" << 113 << "size:" << 1;
    ModbusRtuReply *reply = readGridFrequencyS();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Phase S frequency (0x71)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Phase S frequency (0x71)\" register" << 113 << "size:" << 1 << values;
                processGridFrequencySRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Phase S frequency (0x71)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateGridVoltageT()
{
    // Update registers from Phase T voltage (0x72)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Phase T voltage (0x72)\" register:" << 114 << "size:" << 1;
    ModbusRtuReply *reply = readGridVoltageT();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Phase T voltage (0x72)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Phase T voltage (0x72)\" register" << 114 << "size:" << 1 << values;
                processGridVoltageTRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Phase T voltage (0x72)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateGridCurrentT()
{
    // Update registers from Phase T current (0x73)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Phase T current (0x73)\" register:" << 115 << "size:" << 1;
    ModbusRtuReply *reply = readGridCurrentT();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Phase T current (0x73)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Phase T current (0x73)\" register" << 115 << "size:" << 1 << values;
                processGridCurrentTRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Phase T current (0x73)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateGridPowerT()
{
    // Update registers from Phase T power (0x74)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Phase T power (0x74)\" register:" << 116 << "size:" << 1;
    ModbusRtuReply *reply = readGridPowerT();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Phase T power (0x74)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Phase T power (0x74)\" register" << 116 << "size:" << 1 << values;
                processGridPowerTRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Phase T power (0x74)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateGridFrequencyT()
{
    // Update registers from Phase T frequency (0x75)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Phase T frequency (0x75)\" register:" << 117 << "size:" << 1;
    ModbusRtuReply *reply = readGridFrequencyT();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Phase T frequency (0x75)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Phase T frequency (0x75)\" register" << 117 << "size:" << 1 << values;
                processGridFrequencyTRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Phase T frequency (0x75)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateSolarEnergyTotal()
{
    // Update registers from Solar energy produced total (0x94)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Solar energy produced total (0x94)\" register:" << 148 << "size:" << 2;
    ModbusRtuReply *reply = readSolarEnergyTotal();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Solar energy produced total (0x94)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Solar energy produced total (0x94)\" register" << 148 << "size:" << 2 << values;
                processSolarEnergyTotalRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Solar energy produced total (0x94)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateSolarEnergyToday()
{
    // Update registers from Solar energy produced today (0x96)
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read \"Solar energy produced today (0x96)\" register:" << 150 << "size:" << 1;
    ModbusRtuReply *reply = readSolarEnergyToday();
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading \"Solar energy produced today (0x96)\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> values = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from \"Solar energy produced today (0x96)\" register" << 150 << "size:" << 1 << values;
                processSolarEnergyTodayRegisterValues(values);
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Solar energy produced today (0x96)\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateIdentificationBlock()
{
    // Update register block "identification"
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read block \"identification\" registers from:" << 0 << "size:" << 21;
    ModbusRtuReply *reply = m_modbusRtuMaster->readHoldingRegister(m_slaveId, 0, 21);
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading block \"identification\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> blockValues = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from reading block \"identification\" register" << 0 << "size:" << 21 << blockValues;
                processSerialNumberRegisterValues(blockValues.mid(0, 7));
                processFactoryNameRegisterValues(blockValues.mid(7, 7));
                processModuleNameRegisterValues(blockValues.mid(14, 7));
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"identification\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updatePvVoltageAndCurrentBlock()
{
    // Update register block "pvVoltageAndCurrent"
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read block \"pvVoltageAndCurrent\" registers from:" << 0 << "size:" << 12;
    ModbusRtuReply *reply = m_modbusRtuMaster->readInputRegister(m_slaveId, 0, 12);
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading block \"pvVoltageAndCurrent\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> blockValues = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from reading block \"pvVoltageAndCurrent\" register" << 0 << "size:" << 12 << blockValues;
                processInverterVoltageRegisterValues(blockValues.mid(0, 1));
                processInverterCurrentRegisterValues(blockValues.mid(1, 1));
                processInverterPowerRegisterValues(blockValues.mid(2, 1));
                processPvVoltage1RegisterValues(blockValues.mid(3, 1));
                processPvVoltage2RegisterValues(blockValues.mid(4, 1));
                processPvCurrent1RegisterValues(blockValues.mid(5, 1));
                processPvCurrent2RegisterValues(blockValues.mid(6, 1));
                processInverterFrequencyRegisterValues(blockValues.mid(7, 1));
                processTemperatureRegisterValues(blockValues.mid(8, 1));
                processRunModeRegisterValues(blockValues.mid(9, 1));
                processPowerDc1RegisterValues(blockValues.mid(10, 1));
                processPowerDc2RegisterValues(blockValues.mid(11, 1));
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"pvVoltageAndCurrent\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateBatPowerAndStateBlock()
{
    // Update register block "batPowerAndState"
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read block \"batPowerAndState\" registers from:" << 20 << "size:" << 5;
    ModbusRtuReply *reply = m_modbusRtuMaster->readInputRegister(m_slaveId, 20, 5);
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading block \"batPowerAndState\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> blockValues = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from reading block \"batPowerAndState\" register" << 20 << "size:" << 5 << blockValues;
                processBatVoltageCharge1RegisterValues(blockValues.mid(0, 1));
                processBatCurrentCharge1RegisterValues(blockValues.mid(1, 1));
                processBatPowerCharge1RegisterValues(blockValues.mid(2, 1));
                processBmsConnectStateRegisterValues(blockValues.mid(3, 1));
                processTemperatureBatRegisterValues(blockValues.mid(4, 1));
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"batPowerAndState\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateMeterDataBlock()
{
    // Update register block "meterData"
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read block \"meterData\" registers from:" << 70 << "size:" << 6;
    ModbusRtuReply *reply = m_modbusRtuMaster->readInputRegister(m_slaveId, 70, 6);
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading block \"meterData\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> blockValues = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from reading block \"meterData\" register" << 70 << "size:" << 6 << blockValues;
                processFeedinPowerRegisterValues(blockValues.mid(0, 2));
                processFeedinEnergyTotalRegisterValues(blockValues.mid(2, 2));
                processConsumEnergyTotalRegisterValues(blockValues.mid(4, 2));
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"meterData\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updatePhasesDataBlock()
{
    // Update register block "phasesData"
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read block \"phasesData\" registers from:" << 106 << "size:" << 12;
    ModbusRtuReply *reply = m_modbusRtuMaster->readInputRegister(m_slaveId, 106, 12);
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading block \"phasesData\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> blockValues = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from reading block \"phasesData\" register" << 106 << "size:" << 12 << blockValues;
                processGridVoltageRRegisterValues(blockValues.mid(0, 1));
                processGridCurrentRRegisterValues(blockValues.mid(1, 1));
                processGridPowerRRegisterValues(blockValues.mid(2, 1));
                processGridFrequencyRRegisterValues(blockValues.mid(3, 1));
                processGridVoltageSRegisterValues(blockValues.mid(4, 1));
                processGridCurrentSRegisterValues(blockValues.mid(5, 1));
                processGridPowerSRegisterValues(blockValues.mid(6, 1));
                processGridFrequencySRegisterValues(blockValues.mid(7, 1));
                processGridVoltageTRegisterValues(blockValues.mid(8, 1));
                processGridCurrentTRegisterValues(blockValues.mid(9, 1));
                processGridPowerTRegisterValues(blockValues.mid(10, 1));
                processGridFrequencyTRegisterValues(blockValues.mid(11, 1));
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"phasesData\" registers" << error << reply->errorString();
        });
    }
}

void SolaxModbusRtuConnection::updateSolarEnergyBlock()
{
    // Update register block "solarEnergy"
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Read block \"solarEnergy\" registers from:" << 148 << "size:" << 3;
    ModbusRtuReply *reply = m_modbusRtuMaster->readInputRegister(m_slaveId, 148, 3);
    if (!reply) {
        qCWarning(dcSolaxModbusRtuConnection()) << "Error occurred while reading block \"solarEnergy\" registers";
        return;
    }

    if (!reply->isFinished()) {
        connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
            handleModbusError(reply->error());
            if (reply->error() == ModbusRtuReply::NoError) {
                QVector<quint16> blockValues = reply->result();
                qCDebug(dcSolaxModbusRtuConnection()) << "<-- Response from reading block \"solarEnergy\" register" << 148 << "size:" << 3 << blockValues;
                processSolarEnergyTotalRegisterValues(blockValues.mid(0, 2));
                processSolarEnergyTodayRegisterValues(blockValues.mid(2, 1));
            }
        });

        connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
            qCWarning(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while updating block \"solarEnergy\" registers" << error << reply->errorString();
        });
    }
}

ModbusRtuReply *SolaxModbusRtuConnection::readBatteryCapacity()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 28, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readBmsWarningLsb()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 31, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readBmsWarningMsb()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 38, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readInverterFaultBits()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 64, 2);
}

ModbusRtuReply *SolaxModbusRtuConnection::readMeter1CommunicationSate()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 184, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readActivePowerLimit()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 37, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readFirmwareVersion()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 125, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readInverterType()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 186, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readSerialNumber()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 0, 7);
}

ModbusRtuReply *SolaxModbusRtuConnection::readFactoryName()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 7, 7);
}

ModbusRtuReply *SolaxModbusRtuConnection::readModuleName()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 14, 7);
}

ModbusRtuReply *SolaxModbusRtuConnection::readInverterVoltage()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 0, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readInverterCurrent()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 1, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readInverterPower()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 2, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readPvVoltage1()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readPvVoltage2()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 4, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readPvCurrent1()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 5, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readPvCurrent2()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 6, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readInverterFrequency()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 7, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readTemperature()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 8, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readRunMode()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 9, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readPowerDc1()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 10, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readPowerDc2()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 11, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readBatVoltageCharge1()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 20, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readBatCurrentCharge1()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 21, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readBatPowerCharge1()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 22, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readBmsConnectState()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 23, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readTemperatureBat()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 24, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readFeedinPower()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 70, 2);
}

ModbusRtuReply *SolaxModbusRtuConnection::readFeedinEnergyTotal()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 72, 2);
}

ModbusRtuReply *SolaxModbusRtuConnection::readConsumEnergyTotal()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 74, 2);
}

ModbusRtuReply *SolaxModbusRtuConnection::readGridVoltageR()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 106, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readGridCurrentR()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 107, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readGridPowerR()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 108, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readGridFrequencyR()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 109, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readGridVoltageS()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 110, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readGridCurrentS()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 111, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readGridPowerS()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 112, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readGridFrequencyS()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 113, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readGridVoltageT()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 114, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readGridCurrentT()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 115, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readGridPowerT()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 116, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readGridFrequencyT()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 117, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readSolarEnergyTotal()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 148, 2);
}

ModbusRtuReply *SolaxModbusRtuConnection::readSolarEnergyToday()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 150, 1);
}

ModbusRtuReply *SolaxModbusRtuConnection::readBlockIdentification()
{
    return m_modbusRtuMaster->readHoldingRegister(m_slaveId, 0, 21);
}

ModbusRtuReply *SolaxModbusRtuConnection::readBlockPvVoltageAndCurrent()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 0, 12);
}

ModbusRtuReply *SolaxModbusRtuConnection::readBlockBatPowerAndState()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 20, 5);
}

ModbusRtuReply *SolaxModbusRtuConnection::readBlockMeterData()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 70, 6);
}

ModbusRtuReply *SolaxModbusRtuConnection::readBlockPhasesData()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 106, 12);
}

ModbusRtuReply *SolaxModbusRtuConnection::readBlockSolarEnergy()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 148, 3);
}

void SolaxModbusRtuConnection::processBatteryCapacityRegisterValues(const QVector<quint16> values)
{
    quint16 receivedBatteryCapacity = ModbusDataUtils::convertToUInt16(values);
    emit batteryCapacityReadFinished(receivedBatteryCapacity);

    if (m_batteryCapacity != receivedBatteryCapacity) {
        m_batteryCapacity = receivedBatteryCapacity;
        emit batteryCapacityChanged(m_batteryCapacity);
    }
}

void SolaxModbusRtuConnection::processBmsWarningLsbRegisterValues(const QVector<quint16> values)
{
    quint16 receivedBmsWarningLsb = ModbusDataUtils::convertToUInt16(values);
    emit bmsWarningLsbReadFinished(receivedBmsWarningLsb);

    if (m_bmsWarningLsb != receivedBmsWarningLsb) {
        m_bmsWarningLsb = receivedBmsWarningLsb;
        emit bmsWarningLsbChanged(m_bmsWarningLsb);
    }
}

void SolaxModbusRtuConnection::processBmsWarningMsbRegisterValues(const QVector<quint16> values)
{
    quint16 receivedBmsWarningMsb = ModbusDataUtils::convertToUInt16(values);
    emit bmsWarningMsbReadFinished(receivedBmsWarningMsb);

    if (m_bmsWarningMsb != receivedBmsWarningMsb) {
        m_bmsWarningMsb = receivedBmsWarningMsb;
        emit bmsWarningMsbChanged(m_bmsWarningMsb);
    }
}

void SolaxModbusRtuConnection::processInverterFaultBitsRegisterValues(const QVector<quint16> values)
{
    quint32 receivedInverterFaultBits = ModbusDataUtils::convertToUInt32(values, m_endianness);
    emit inverterFaultBitsReadFinished(receivedInverterFaultBits);

    if (m_inverterFaultBits != receivedInverterFaultBits) {
        m_inverterFaultBits = receivedInverterFaultBits;
        emit inverterFaultBitsChanged(m_inverterFaultBits);
    }
}

void SolaxModbusRtuConnection::processMeter1CommunicationSateRegisterValues(const QVector<quint16> values)
{
    quint16 receivedMeter1CommunicationSate = ModbusDataUtils::convertToUInt16(values);
    emit meter1CommunicationSateReadFinished(receivedMeter1CommunicationSate);

    if (m_meter1CommunicationSate != receivedMeter1CommunicationSate) {
        m_meter1CommunicationSate = receivedMeter1CommunicationSate;
        emit meter1CommunicationSateChanged(m_meter1CommunicationSate);
    }
}

void SolaxModbusRtuConnection::processActivePowerLimitRegisterValues(const QVector<quint16> values)
{
    quint16 receivedActivePowerLimit = ModbusDataUtils::convertToUInt16(values);
    emit activePowerLimitReadFinished(receivedActivePowerLimit);

    if (m_activePowerLimit != receivedActivePowerLimit) {
        m_activePowerLimit = receivedActivePowerLimit;
        emit activePowerLimitChanged(m_activePowerLimit);
    }
}

void SolaxModbusRtuConnection::processFirmwareVersionRegisterValues(const QVector<quint16> values)
{
    quint16 receivedFirmwareVersion = ModbusDataUtils::convertToUInt16(values);
    emit firmwareVersionReadFinished(receivedFirmwareVersion);

    if (m_firmwareVersion != receivedFirmwareVersion) {
        m_firmwareVersion = receivedFirmwareVersion;
        emit firmwareVersionChanged(m_firmwareVersion);
    }
}

void SolaxModbusRtuConnection::processInverterTypeRegisterValues(const QVector<quint16> values)
{
    quint16 receivedInverterType = ModbusDataUtils::convertToUInt16(values);
    emit inverterTypeReadFinished(receivedInverterType);

    if (m_inverterType != receivedInverterType) {
        m_inverterType = receivedInverterType;
        emit inverterTypeChanged(m_inverterType);
    }
}

void SolaxModbusRtuConnection::processSerialNumberRegisterValues(const QVector<quint16> values)
{
    QString receivedSerialNumber = ModbusDataUtils::convertToString(values);
    emit serialNumberReadFinished(receivedSerialNumber);

    if (m_serialNumber != receivedSerialNumber) {
        m_serialNumber = receivedSerialNumber;
        emit serialNumberChanged(m_serialNumber);
    }
}

void SolaxModbusRtuConnection::processFactoryNameRegisterValues(const QVector<quint16> values)
{
    QString receivedFactoryName = ModbusDataUtils::convertToString(values);
    emit factoryNameReadFinished(receivedFactoryName);

    if (m_factoryName != receivedFactoryName) {
        m_factoryName = receivedFactoryName;
        emit factoryNameChanged(m_factoryName);
    }
}

void SolaxModbusRtuConnection::processModuleNameRegisterValues(const QVector<quint16> values)
{
    QString receivedModuleName = ModbusDataUtils::convertToString(values);
    emit moduleNameReadFinished(receivedModuleName);

    if (m_moduleName != receivedModuleName) {
        m_moduleName = receivedModuleName;
        emit moduleNameChanged(m_moduleName);
    }
}

void SolaxModbusRtuConnection::processInverterVoltageRegisterValues(const QVector<quint16> values)
{
    float receivedInverterVoltage = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -1);
    emit inverterVoltageReadFinished(receivedInverterVoltage);

    if (m_inverterVoltage != receivedInverterVoltage) {
        m_inverterVoltage = receivedInverterVoltage;
        emit inverterVoltageChanged(m_inverterVoltage);
    }
}

void SolaxModbusRtuConnection::processInverterCurrentRegisterValues(const QVector<quint16> values)
{
    float receivedInverterCurrent = ModbusDataUtils::convertToInt16(values) * 1.0 * pow(10, -1);
    emit inverterCurrentReadFinished(receivedInverterCurrent);

    if (m_inverterCurrent != receivedInverterCurrent) {
        m_inverterCurrent = receivedInverterCurrent;
        emit inverterCurrentChanged(m_inverterCurrent);
    }
}

void SolaxModbusRtuConnection::processInverterPowerRegisterValues(const QVector<quint16> values)
{
    qint16 receivedInverterPower = ModbusDataUtils::convertToInt16(values);
    emit inverterPowerReadFinished(receivedInverterPower);

    if (m_inverterPower != receivedInverterPower) {
        m_inverterPower = receivedInverterPower;
        emit inverterPowerChanged(m_inverterPower);
    }
}

void SolaxModbusRtuConnection::processPvVoltage1RegisterValues(const QVector<quint16> values)
{
    float receivedPvVoltage1 = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -1);
    emit pvVoltage1ReadFinished(receivedPvVoltage1);

    if (m_pvVoltage1 != receivedPvVoltage1) {
        m_pvVoltage1 = receivedPvVoltage1;
        emit pvVoltage1Changed(m_pvVoltage1);
    }
}

void SolaxModbusRtuConnection::processPvVoltage2RegisterValues(const QVector<quint16> values)
{
    float receivedPvVoltage2 = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -1);
    emit pvVoltage2ReadFinished(receivedPvVoltage2);

    if (m_pvVoltage2 != receivedPvVoltage2) {
        m_pvVoltage2 = receivedPvVoltage2;
        emit pvVoltage2Changed(m_pvVoltage2);
    }
}

void SolaxModbusRtuConnection::processPvCurrent1RegisterValues(const QVector<quint16> values)
{
    float receivedPvCurrent1 = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -1);
    emit pvCurrent1ReadFinished(receivedPvCurrent1);

    if (m_pvCurrent1 != receivedPvCurrent1) {
        m_pvCurrent1 = receivedPvCurrent1;
        emit pvCurrent1Changed(m_pvCurrent1);
    }
}

void SolaxModbusRtuConnection::processPvCurrent2RegisterValues(const QVector<quint16> values)
{
    float receivedPvCurrent2 = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -1);
    emit pvCurrent2ReadFinished(receivedPvCurrent2);

    if (m_pvCurrent2 != receivedPvCurrent2) {
        m_pvCurrent2 = receivedPvCurrent2;
        emit pvCurrent2Changed(m_pvCurrent2);
    }
}

void SolaxModbusRtuConnection::processInverterFrequencyRegisterValues(const QVector<quint16> values)
{
    float receivedInverterFrequency = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -2);
    emit inverterFrequencyReadFinished(receivedInverterFrequency);

    if (m_inverterFrequency != receivedInverterFrequency) {
        m_inverterFrequency = receivedInverterFrequency;
        emit inverterFrequencyChanged(m_inverterFrequency);
    }
}

void SolaxModbusRtuConnection::processTemperatureRegisterValues(const QVector<quint16> values)
{
    qint16 receivedTemperature = ModbusDataUtils::convertToInt16(values);
    emit temperatureReadFinished(receivedTemperature);

    if (m_temperature != receivedTemperature) {
        m_temperature = receivedTemperature;
        emit temperatureChanged(m_temperature);
    }
}

void SolaxModbusRtuConnection::processRunModeRegisterValues(const QVector<quint16> values)
{
    RunMode receivedRunMode = static_cast<RunMode>(ModbusDataUtils::convertToUInt16(values));
    emit runModeReadFinished(receivedRunMode);

    if (m_runMode != receivedRunMode) {
        m_runMode = receivedRunMode;
        emit runModeChanged(m_runMode);
    }
}

void SolaxModbusRtuConnection::processPowerDc1RegisterValues(const QVector<quint16> values)
{
    quint16 receivedPowerDc1 = ModbusDataUtils::convertToUInt16(values);
    emit powerDc1ReadFinished(receivedPowerDc1);

    if (m_powerDc1 != receivedPowerDc1) {
        m_powerDc1 = receivedPowerDc1;
        emit powerDc1Changed(m_powerDc1);
    }
}

void SolaxModbusRtuConnection::processPowerDc2RegisterValues(const QVector<quint16> values)
{
    quint16 receivedPowerDc2 = ModbusDataUtils::convertToUInt16(values);
    emit powerDc2ReadFinished(receivedPowerDc2);

    if (m_powerDc2 != receivedPowerDc2) {
        m_powerDc2 = receivedPowerDc2;
        emit powerDc2Changed(m_powerDc2);
    }
}

void SolaxModbusRtuConnection::processBatVoltageCharge1RegisterValues(const QVector<quint16> values)
{
    float receivedBatVoltageCharge1 = ModbusDataUtils::convertToInt16(values) * 1.0 * pow(10, -1);
    emit batVoltageCharge1ReadFinished(receivedBatVoltageCharge1);

    if (m_batVoltageCharge1 != receivedBatVoltageCharge1) {
        m_batVoltageCharge1 = receivedBatVoltageCharge1;
        emit batVoltageCharge1Changed(m_batVoltageCharge1);
    }
}

void SolaxModbusRtuConnection::processBatCurrentCharge1RegisterValues(const QVector<quint16> values)
{
    float receivedBatCurrentCharge1 = ModbusDataUtils::convertToInt16(values) * 1.0 * pow(10, -1);
    emit batCurrentCharge1ReadFinished(receivedBatCurrentCharge1);

    if (m_batCurrentCharge1 != receivedBatCurrentCharge1) {
        m_batCurrentCharge1 = receivedBatCurrentCharge1;
        emit batCurrentCharge1Changed(m_batCurrentCharge1);
    }
}

void SolaxModbusRtuConnection::processBatPowerCharge1RegisterValues(const QVector<quint16> values)
{
    qint16 receivedBatPowerCharge1 = ModbusDataUtils::convertToInt16(values);
    emit batPowerCharge1ReadFinished(receivedBatPowerCharge1);

    if (m_batPowerCharge1 != receivedBatPowerCharge1) {
        m_batPowerCharge1 = receivedBatPowerCharge1;
        emit batPowerCharge1Changed(m_batPowerCharge1);
    }
}

void SolaxModbusRtuConnection::processBmsConnectStateRegisterValues(const QVector<quint16> values)
{
    quint16 receivedBmsConnectState = ModbusDataUtils::convertToUInt16(values);
    emit bmsConnectStateReadFinished(receivedBmsConnectState);

    if (m_bmsConnectState != receivedBmsConnectState) {
        m_bmsConnectState = receivedBmsConnectState;
        emit bmsConnectStateChanged(m_bmsConnectState);
    }
}

void SolaxModbusRtuConnection::processTemperatureBatRegisterValues(const QVector<quint16> values)
{
    qint16 receivedTemperatureBat = ModbusDataUtils::convertToInt16(values);
    emit temperatureBatReadFinished(receivedTemperatureBat);

    if (m_temperatureBat != receivedTemperatureBat) {
        m_temperatureBat = receivedTemperatureBat;
        emit temperatureBatChanged(m_temperatureBat);
    }
}

void SolaxModbusRtuConnection::processFeedinPowerRegisterValues(const QVector<quint16> values)
{
    qint32 receivedFeedinPower = ModbusDataUtils::convertToInt32(values, m_endianness);
    emit feedinPowerReadFinished(receivedFeedinPower);

    if (m_feedinPower != receivedFeedinPower) {
        m_feedinPower = receivedFeedinPower;
        emit feedinPowerChanged(m_feedinPower);
    }
}

void SolaxModbusRtuConnection::processFeedinEnergyTotalRegisterValues(const QVector<quint16> values)
{
    float receivedFeedinEnergyTotal = ModbusDataUtils::convertToUInt32(values, m_endianness) * 1.0 * pow(10, -2);
    emit feedinEnergyTotalReadFinished(receivedFeedinEnergyTotal);

    if (m_feedinEnergyTotal != receivedFeedinEnergyTotal) {
        m_feedinEnergyTotal = receivedFeedinEnergyTotal;
        emit feedinEnergyTotalChanged(m_feedinEnergyTotal);
    }
}

void SolaxModbusRtuConnection::processConsumEnergyTotalRegisterValues(const QVector<quint16> values)
{
    float receivedConsumEnergyTotal = ModbusDataUtils::convertToUInt32(values, m_endianness) * 1.0 * pow(10, -2);
    emit consumEnergyTotalReadFinished(receivedConsumEnergyTotal);

    if (m_consumEnergyTotal != receivedConsumEnergyTotal) {
        m_consumEnergyTotal = receivedConsumEnergyTotal;
        emit consumEnergyTotalChanged(m_consumEnergyTotal);
    }
}

void SolaxModbusRtuConnection::processGridVoltageRRegisterValues(const QVector<quint16> values)
{
    float receivedGridVoltageR = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -1);
    emit gridVoltageRReadFinished(receivedGridVoltageR);

    if (m_gridVoltageR != receivedGridVoltageR) {
        m_gridVoltageR = receivedGridVoltageR;
        emit gridVoltageRChanged(m_gridVoltageR);
    }
}

void SolaxModbusRtuConnection::processGridCurrentRRegisterValues(const QVector<quint16> values)
{
    float receivedGridCurrentR = ModbusDataUtils::convertToInt16(values) * 1.0 * pow(10, -1);
    emit gridCurrentRReadFinished(receivedGridCurrentR);

    if (m_gridCurrentR != receivedGridCurrentR) {
        m_gridCurrentR = receivedGridCurrentR;
        emit gridCurrentRChanged(m_gridCurrentR);
    }
}

void SolaxModbusRtuConnection::processGridPowerRRegisterValues(const QVector<quint16> values)
{
    qint16 receivedGridPowerR = ModbusDataUtils::convertToInt16(values);
    emit gridPowerRReadFinished(receivedGridPowerR);

    if (m_gridPowerR != receivedGridPowerR) {
        m_gridPowerR = receivedGridPowerR;
        emit gridPowerRChanged(m_gridPowerR);
    }
}

void SolaxModbusRtuConnection::processGridFrequencyRRegisterValues(const QVector<quint16> values)
{
    float receivedGridFrequencyR = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -2);
    emit gridFrequencyRReadFinished(receivedGridFrequencyR);

    if (m_gridFrequencyR != receivedGridFrequencyR) {
        m_gridFrequencyR = receivedGridFrequencyR;
        emit gridFrequencyRChanged(m_gridFrequencyR);
    }
}

void SolaxModbusRtuConnection::processGridVoltageSRegisterValues(const QVector<quint16> values)
{
    float receivedGridVoltageS = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -1);
    emit gridVoltageSReadFinished(receivedGridVoltageS);

    if (m_gridVoltageS != receivedGridVoltageS) {
        m_gridVoltageS = receivedGridVoltageS;
        emit gridVoltageSChanged(m_gridVoltageS);
    }
}

void SolaxModbusRtuConnection::processGridCurrentSRegisterValues(const QVector<quint16> values)
{
    float receivedGridCurrentS = ModbusDataUtils::convertToInt16(values) * 1.0 * pow(10, -1);
    emit gridCurrentSReadFinished(receivedGridCurrentS);

    if (m_gridCurrentS != receivedGridCurrentS) {
        m_gridCurrentS = receivedGridCurrentS;
        emit gridCurrentSChanged(m_gridCurrentS);
    }
}

void SolaxModbusRtuConnection::processGridPowerSRegisterValues(const QVector<quint16> values)
{
    qint16 receivedGridPowerS = ModbusDataUtils::convertToInt16(values);
    emit gridPowerSReadFinished(receivedGridPowerS);

    if (m_gridPowerS != receivedGridPowerS) {
        m_gridPowerS = receivedGridPowerS;
        emit gridPowerSChanged(m_gridPowerS);
    }
}

void SolaxModbusRtuConnection::processGridFrequencySRegisterValues(const QVector<quint16> values)
{
    float receivedGridFrequencyS = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -2);
    emit gridFrequencySReadFinished(receivedGridFrequencyS);

    if (m_gridFrequencyS != receivedGridFrequencyS) {
        m_gridFrequencyS = receivedGridFrequencyS;
        emit gridFrequencySChanged(m_gridFrequencyS);
    }
}

void SolaxModbusRtuConnection::processGridVoltageTRegisterValues(const QVector<quint16> values)
{
    float receivedGridVoltageT = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -1);
    emit gridVoltageTReadFinished(receivedGridVoltageT);

    if (m_gridVoltageT != receivedGridVoltageT) {
        m_gridVoltageT = receivedGridVoltageT;
        emit gridVoltageTChanged(m_gridVoltageT);
    }
}

void SolaxModbusRtuConnection::processGridCurrentTRegisterValues(const QVector<quint16> values)
{
    float receivedGridCurrentT = ModbusDataUtils::convertToInt16(values) * 1.0 * pow(10, -1);
    emit gridCurrentTReadFinished(receivedGridCurrentT);

    if (m_gridCurrentT != receivedGridCurrentT) {
        m_gridCurrentT = receivedGridCurrentT;
        emit gridCurrentTChanged(m_gridCurrentT);
    }
}

void SolaxModbusRtuConnection::processGridPowerTRegisterValues(const QVector<quint16> values)
{
    qint16 receivedGridPowerT = ModbusDataUtils::convertToInt16(values);
    emit gridPowerTReadFinished(receivedGridPowerT);

    if (m_gridPowerT != receivedGridPowerT) {
        m_gridPowerT = receivedGridPowerT;
        emit gridPowerTChanged(m_gridPowerT);
    }
}

void SolaxModbusRtuConnection::processGridFrequencyTRegisterValues(const QVector<quint16> values)
{
    float receivedGridFrequencyT = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -2);
    emit gridFrequencyTReadFinished(receivedGridFrequencyT);

    if (m_gridFrequencyT != receivedGridFrequencyT) {
        m_gridFrequencyT = receivedGridFrequencyT;
        emit gridFrequencyTChanged(m_gridFrequencyT);
    }
}

void SolaxModbusRtuConnection::processSolarEnergyTotalRegisterValues(const QVector<quint16> values)
{
    float receivedSolarEnergyTotal = ModbusDataUtils::convertToUInt32(values, m_endianness) * 1.0 * pow(10, -1);
    emit solarEnergyTotalReadFinished(receivedSolarEnergyTotal);

    if (m_solarEnergyTotal != receivedSolarEnergyTotal) {
        m_solarEnergyTotal = receivedSolarEnergyTotal;
        emit solarEnergyTotalChanged(m_solarEnergyTotal);
    }
}

void SolaxModbusRtuConnection::processSolarEnergyTodayRegisterValues(const QVector<quint16> values)
{
    float receivedSolarEnergyToday = ModbusDataUtils::convertToUInt16(values) * 1.0 * pow(10, -1);
    emit solarEnergyTodayReadFinished(receivedSolarEnergyToday);

    if (m_solarEnergyToday != receivedSolarEnergyToday) {
        m_solarEnergyToday = receivedSolarEnergyToday;
        emit solarEnergyTodayChanged(m_solarEnergyToday);
    }
}

void SolaxModbusRtuConnection::handleModbusError(ModbusRtuReply::Error error)
{
    if (error == ModbusRtuReply::NoError) {
        // Reset the communication counter and we know we can reach the device
        m_communicationFailedCounter = 0;
        if (!m_communicationWorking)
            qCDebug(dcSolaxModbusRtuConnection()) << "Received a reply without any errors. The communication with the device seems to work now.";

        m_communicationWorking = true;
        evaluateReachableState();
    } else {
        m_communicationFailedCounter++;
        if (m_communicationWorking && m_communicationFailedCounter >= m_communicationFailedMax) {
            m_communicationWorking = false;
            qCWarning(dcSolaxModbusRtuConnection()) << "Received" << m_communicationFailedCounter << "errors while communicating with the RTU master. Mark as not reachable until the communication works again.";
            evaluateReachableState();
        }
    }
}

void SolaxModbusRtuConnection::testReachability()
{
    if (m_checkRechableReply)
        return;

    // Try to read the check reachability register inverterType in order to verify if the communication is working or not.
    qCDebug(dcSolaxModbusRtuConnection()) << "--> Test reachability by reading \"Inverter rated power (0xBA)\" register:" << 186 << "size:" << 1;
    m_checkRechableReply = readInverterType();
    if (!m_checkRechableReply) {
        qCDebug(dcSolaxModbusRtuConnection()) << "Error occurred verifying reachability by reading \"Inverter rated power (0xBA)\" register";
        onReachabilityCheckFailed();
        return;
    }

    if (m_checkRechableReply->isFinished()) {
        m_checkRechableReply = nullptr;
        onReachabilityCheckFailed();
        return;
    }

    connect(m_checkRechableReply, &ModbusRtuReply::finished, this, [this](){
        // Note: we don't care about the result here, only the error
        handleModbusError(m_checkRechableReply->error());
        if (m_checkRechableReply->error() != ModbusRtuReply::NoError)
            onReachabilityCheckFailed();

        m_checkRechableReply = nullptr;
    });

    connect(m_checkRechableReply, &ModbusRtuReply::errorOccurred, this, [this] (ModbusRtuReply::Error error){
        qCDebug(dcSolaxModbusRtuConnection()) << "ModbusRtu reply error occurred while verifying reachability by reading \"Inverter rated power (0xBA)\" register" << error << m_checkRechableReply->errorString();
    });
}

void SolaxModbusRtuConnection::verifyInitFinished()
{
    if (m_pendingInitReplies.isEmpty()) {
        finishInitialization(true);
    }
}

void SolaxModbusRtuConnection::finishInitialization(bool success)
{
    if (success) {
        qCDebug(dcSolaxModbusRtuConnection()) << "Initialization finished of SolaxModbusRtuConnection finished successfully";
    } else {
        qCWarning(dcSolaxModbusRtuConnection()) << "Initialization finished of SolaxModbusRtuConnection failed.";
    }

    // Cleanup init
    delete m_initObject;
    m_initObject = nullptr;
    m_pendingInitReplies.clear();

    emit initializationFinished(success);
}

void SolaxModbusRtuConnection::verifyUpdateFinished()
{
    if (m_pendingUpdateReplies.isEmpty()) {
        emit updateFinished();
    }
}

void SolaxModbusRtuConnection::onReachabilityCheckFailed()
{
    m_checkReachableRetriesCount++;

    if (m_checkReachableRetriesCount <= m_checkReachableRetries) {
        qCDebug(dcSolaxModbusRtuConnection()) << "Reachability test failed. Retry in on second" << m_checkReachableRetriesCount << "/" << m_checkReachableRetries;
        QTimer::singleShot(1000, this, &SolaxModbusRtuConnection::testReachability);
        return;
    }

    // The test reachability method failed, not retrying any more
    emit checkReachabilityFailed();
}

void SolaxModbusRtuConnection::evaluateReachableState()
{
    bool reachable = m_communicationWorking && m_modbusRtuMaster->connected();
    if (m_reachable == reachable)
        return;

    m_reachable = reachable;
    emit reachableChanged(m_reachable);
    m_checkReachableRetriesCount = 0;
}

QDebug operator<<(QDebug debug, SolaxModbusRtuConnection *solaxModbusRtuConnection)
{
    debug.nospace().noquote() << "SolaxModbusRtuConnection(" << solaxModbusRtuConnection->modbusRtuMaster()->modbusUuid().toString() << ", " << solaxModbusRtuConnection->modbusRtuMaster()->serialPort() << ", slave ID:" << solaxModbusRtuConnection->slaveId() << ")" << "\n";
    debug.nospace().noquote() << "    - Battery state of charge (0x1C): " << solaxModbusRtuConnection->batteryCapacity() << " [%]" << "\n";
    debug.nospace().noquote() << "    - BMS warning bits lsb (0x1F): " << solaxModbusRtuConnection->bmsWarningLsb() << "\n";
    debug.nospace().noquote() << "    - BMS warning bits msb (0x26): " << solaxModbusRtuConnection->bmsWarningMsb() << "\n";
    debug.nospace().noquote() << "    - Inverter fault bits (0x40): " << solaxModbusRtuConnection->inverterFaultBits() << "\n";
    debug.nospace().noquote() << "    - Meter 1 communication status (0xB8): " << solaxModbusRtuConnection->meter1CommunicationSate() << "\n";
    debug.nospace().noquote() << "    - Active power limit (0x25): " << solaxModbusRtuConnection->activePowerLimit() << " [%]" << "\n";
    debug.nospace().noquote() << "    - Firmware version (0x7D): " << solaxModbusRtuConnection->firmwareVersion() << "\n";
    debug.nospace().noquote() << "    - Inverter rated power (0xBA): " << solaxModbusRtuConnection->inverterType() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Serial number (0x00): " << solaxModbusRtuConnection->serialNumber() << "\n";
    debug.nospace().noquote() << "    - Factory name (0x07): " << solaxModbusRtuConnection->factoryName() << "\n";
    debug.nospace().noquote() << "    - Module name (0x0E): " << solaxModbusRtuConnection->moduleName() << "\n";
    debug.nospace().noquote() << "    - Inverter voltage (0x00): " << solaxModbusRtuConnection->inverterVoltage() << " [V]" << "\n";
    debug.nospace().noquote() << "    - Inverter current (0x01): " << solaxModbusRtuConnection->inverterCurrent() << " [A]" << "\n";
    debug.nospace().noquote() << "    - Inverter power (0x02): " << solaxModbusRtuConnection->inverterPower() << " [W]" << "\n";
    debug.nospace().noquote() << "    - PV voltage 1 (0x03): " << solaxModbusRtuConnection->pvVoltage1() << " [V]" << "\n";
    debug.nospace().noquote() << "    - PV voltage 2 (0x04): " << solaxModbusRtuConnection->pvVoltage2() << " [V]" << "\n";
    debug.nospace().noquote() << "    - PV current 1 (0x05): " << solaxModbusRtuConnection->pvCurrent1() << " [A]" << "\n";
    debug.nospace().noquote() << "    - PV current 2 (0x06): " << solaxModbusRtuConnection->pvCurrent2() << " [A]" << "\n";
    debug.nospace().noquote() << "    - Inverter frequenxy (0x07): " << solaxModbusRtuConnection->inverterFrequency() << " [Hz]" << "\n";
    debug.nospace().noquote() << "    - Radiator temperature (0x08): " << solaxModbusRtuConnection->temperature() << " [°C]" << "\n";
    debug.nospace().noquote() << "    - Run mode (0x09): " << solaxModbusRtuConnection->runMode() << "\n";
    debug.nospace().noquote() << "    - Power DC 1 (0x0A): " << solaxModbusRtuConnection->powerDc1() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Power DC 2 (0x0B): " << solaxModbusRtuConnection->powerDc2() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Battery voltage charge 1 (0x14): " << solaxModbusRtuConnection->batVoltageCharge1() << " [V]" << "\n";
    debug.nospace().noquote() << "    - Battery current charge 1 (0x15): " << solaxModbusRtuConnection->batCurrentCharge1() << " [A]" << "\n";
    debug.nospace().noquote() << "    - Battery power charge1 (0x16): " << solaxModbusRtuConnection->batPowerCharge1() << " [W]" << "\n";
    debug.nospace().noquote() << "    - BMS connected state (0x17): " << solaxModbusRtuConnection->bmsConnectState() << "\n";
    debug.nospace().noquote() << "    - Battery temperature: " << solaxModbusRtuConnection->temperatureBat() << " [°C]" << "\n";
    debug.nospace().noquote() << "    - Power to grid (0x46). Positive means exported power, negative means consumed power.: " << solaxModbusRtuConnection->feedinPower() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Exported energy, total (0x48): " << solaxModbusRtuConnection->feedinEnergyTotal() << " [kWh]" << "\n";
    debug.nospace().noquote() << "    - Consumed energy, total (0x4A): " << solaxModbusRtuConnection->consumEnergyTotal() << " [kWh]" << "\n";
    debug.nospace().noquote() << "    - Phase R voltage (0x6A): " << solaxModbusRtuConnection->gridVoltageR() << " [V]" << "\n";
    debug.nospace().noquote() << "    - Phase R current (0x6B): " << solaxModbusRtuConnection->gridCurrentR() << " [A]" << "\n";
    debug.nospace().noquote() << "    - Phase R power (0x6C): " << solaxModbusRtuConnection->gridPowerR() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Phase R frequency (0x6D): " << solaxModbusRtuConnection->gridFrequencyR() << " [Hz]" << "\n";
    debug.nospace().noquote() << "    - Phase S voltage (0x6E): " << solaxModbusRtuConnection->gridVoltageS() << " [V]" << "\n";
    debug.nospace().noquote() << "    - Phase S current (0x6F): " << solaxModbusRtuConnection->gridCurrentS() << " [A]" << "\n";
    debug.nospace().noquote() << "    - Phase S power (0x70): " << solaxModbusRtuConnection->gridPowerS() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Phase S frequency (0x71): " << solaxModbusRtuConnection->gridFrequencyS() << " [Hz]" << "\n";
    debug.nospace().noquote() << "    - Phase T voltage (0x72): " << solaxModbusRtuConnection->gridVoltageT() << " [V]" << "\n";
    debug.nospace().noquote() << "    - Phase T current (0x73): " << solaxModbusRtuConnection->gridCurrentT() << " [A]" << "\n";
    debug.nospace().noquote() << "    - Phase T power (0x74): " << solaxModbusRtuConnection->gridPowerT() << " [W]" << "\n";
    debug.nospace().noquote() << "    - Phase T frequency (0x75): " << solaxModbusRtuConnection->gridFrequencyT() << " [Hz]" << "\n";
    debug.nospace().noquote() << "    - Solar energy produced total (0x94): " << solaxModbusRtuConnection->solarEnergyTotal() << " [kWh]" << "\n";
    debug.nospace().noquote() << "    - Solar energy produced today (0x96): " << solaxModbusRtuConnection->solarEnergyToday() << " [kWh]" << "\n";
    return debug.quote().space();
}

