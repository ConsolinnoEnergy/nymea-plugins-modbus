/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Copyright 2013 - 2022, nymea GmbH
* Contact: contact@nymea.io
*
* This fileDescriptor is part of nymea.
* This project including source code and documentation is protected by
* copyright law, and remains the property of nymea GmbH. All rights, including
* reproduction, publication, editing and translation, are reserved. The use of
* this project is subject to the terms of a license agreement to be concluded
* with nymea GmbH in accordance with the terms of use of nymea GmbH, available
* under https://nymea.io/license
*
* GNU Lesser General Public License Usage
* Alternatively, this project may be redistributed and/or modified under the
* terms of the GNU Lesser General Public License as published by the Free
* Software Foundation; version 3. This project is distributed in the hope that
* it will be useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this project. If not, see <https://www.gnu.org/licenses/>.
*
* For any further details and any questions please contact us under
* contact@nymea.io or see our FAQ/Licensing Information on
* https://nymea.io/license/faq
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* WARNING
*
* This file has been autogenerated. Any changes in this file may be overwritten.
* If you want to change something, update the register json or the tool.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#include "schneideriemmodbusrtuconnection.h"
#include <loggingcategories.h>
#include <math.h>

NYMEA_LOGGING_CATEGORY(dcSchneiderIEMModbusRtuConnection, "SchneiderIEMModbusRtuConnection")

SchneiderIEMModbusRtuConnection::SchneiderIEMModbusRtuConnection(ModbusRtuMaster *modbusRtuMaster, quint16 slaveId, QObject *parent) :
    QObject(parent),
    m_modbusRtuMaster(modbusRtuMaster),
    m_slaveId(slaveId)
{
    
}

ModbusRtuMaster *SchneiderIEMModbusRtuConnection::modbusRtuMaster() const
{
    return m_modbusRtuMaster;
}
quint16 SchneiderIEMModbusRtuConnection::slaveId() const
{
    return m_slaveId;
}
ModbusDataUtils::ByteOrder SchneiderIEMModbusRtuConnection::endianness() const
{
    return m_endianness;
}
void SchneiderIEMModbusRtuConnection::setEndianness(ModbusDataUtils::ByteOrder endianness)
{
    if (m_endianness == endianness)
        return;

    m_endianness = endianness;
    emit endiannessChanged(m_endianness);
}
float SchneiderIEMModbusRtuConnection::totalCurrentPower() const
{
    return m_totalCurrentPower;
}

float SchneiderIEMModbusRtuConnection::voltagePhaseA() const
{
    return m_voltagePhaseA;
}

float SchneiderIEMModbusRtuConnection::voltagePhaseB() const
{
    return m_voltagePhaseB;
}

float SchneiderIEMModbusRtuConnection::voltagePhaseC() const
{
    return m_voltagePhaseC;
}

float SchneiderIEMModbusRtuConnection::currentPhaseA() const
{
    return m_currentPhaseA;
}

float SchneiderIEMModbusRtuConnection::currentPhaseB() const
{
    return m_currentPhaseB;
}

float SchneiderIEMModbusRtuConnection::currentPhaseC() const
{
    return m_currentPhaseC;
}

float SchneiderIEMModbusRtuConnection::powerPhaseA() const
{
    return m_powerPhaseA;
}

float SchneiderIEMModbusRtuConnection::powerPhaseB() const
{
    return m_powerPhaseB;
}

float SchneiderIEMModbusRtuConnection::powerPhaseC() const
{
    return m_powerPhaseC;
}

float SchneiderIEMModbusRtuConnection::frequency() const
{
    return m_frequency;
}

qint64 SchneiderIEMModbusRtuConnection::totalEnergyConsumed() const
{
    return m_totalEnergyConsumed;
}

qint64 SchneiderIEMModbusRtuConnection::totalEnergyProduced() const
{
    return m_totalEnergyProduced;
}

qint64 SchneiderIEMModbusRtuConnection::energyConsumedPhaseA() const
{
    return m_energyConsumedPhaseA;
}

qint64 SchneiderIEMModbusRtuConnection::energyConsumedPhaseB() const
{
    return m_energyConsumedPhaseB;
}

qint64 SchneiderIEMModbusRtuConnection::energyConsumedPhaseC() const
{
    return m_energyConsumedPhaseC;
}

void SchneiderIEMModbusRtuConnection::initialize()
{
    // No init registers defined. Nothing to be done and we are finished.
    emit initializationFinished();
}

void SchneiderIEMModbusRtuConnection::update()
{
    updateTotalCurrentPower();
    updateVoltagePhaseA();
    updateVoltagePhaseB();
    updateVoltagePhaseC();
    updateCurrentPhaseA();
    updateCurrentPhaseB();
    updateCurrentPhaseC();
    updatePowerPhaseA();
    updatePowerPhaseB();
    updatePowerPhaseC();
    updateFrequency();
    updateTotalEnergyConsumed();
    updateTotalEnergyProduced();
    updateEnergyConsumedPhaseA();
    updateEnergyConsumedPhaseB();
    updateEnergyConsumedPhaseC();
}

void SchneiderIEMModbusRtuConnection::updateTotalCurrentPower()
{
    // Update registers from Total system power
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Total system power\" register:" << 3060 << "size:" << 2;
    ModbusRtuReply *reply = readTotalCurrentPower();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Total system power\" register" << 3060 << "size:" << 2 << values;
                    processTotalCurrentPowerRegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Total system power\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Total system power\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updateVoltagePhaseA()
{
    // Update registers from Voltage phase L1
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Voltage phase L1\" register:" << 3020 << "size:" << 2;
    ModbusRtuReply *reply = readVoltagePhaseA();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Voltage phase L1\" register" << 3020 << "size:" << 2 << values;
                    processVoltagePhaseARegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Voltage phase L1\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Voltage phase L1\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updateVoltagePhaseB()
{
    // Update registers from Voltage phase L2
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Voltage phase L2\" register:" << 3022 << "size:" << 2;
    ModbusRtuReply *reply = readVoltagePhaseB();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Voltage phase L2\" register" << 3022 << "size:" << 2 << values;
                    processVoltagePhaseBRegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Voltage phase L2\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Voltage phase L2\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updateVoltagePhaseC()
{
    // Update registers from Voltage phase L3
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Voltage phase L3\" register:" << 3024 << "size:" << 2;
    ModbusRtuReply *reply = readVoltagePhaseC();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Voltage phase L3\" register" << 3024 << "size:" << 2 << values;
                    processVoltagePhaseCRegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Voltage phase L3\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Voltage phase L3\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updateCurrentPhaseA()
{
    // Update registers from Current phase L1
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Current phase L1\" register:" << 3000 << "size:" << 2;
    ModbusRtuReply *reply = readCurrentPhaseA();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Current phase L1\" register" << 3000 << "size:" << 2 << values;
                    processCurrentPhaseARegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Current phase L1\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Current phase L1\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updateCurrentPhaseB()
{
    // Update registers from Current phase L2
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Current phase L2\" register:" << 3002 << "size:" << 2;
    ModbusRtuReply *reply = readCurrentPhaseB();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Current phase L2\" register" << 3002 << "size:" << 2 << values;
                    processCurrentPhaseBRegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Current phase L2\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Current phase L2\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updateCurrentPhaseC()
{
    // Update registers from Current phase L3
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Current phase L3\" register:" << 3004 << "size:" << 2;
    ModbusRtuReply *reply = readCurrentPhaseC();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Current phase L3\" register" << 3004 << "size:" << 2 << values;
                    processCurrentPhaseCRegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Current phase L3\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Current phase L3\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updatePowerPhaseA()
{
    // Update registers from Power phase L1
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Power phase L1\" register:" << 3054 << "size:" << 2;
    ModbusRtuReply *reply = readPowerPhaseA();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Power phase L1\" register" << 3054 << "size:" << 2 << values;
                    processPowerPhaseARegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Power phase L1\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Power phase L1\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updatePowerPhaseB()
{
    // Update registers from Power phase L2
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Power phase L2\" register:" << 3056 << "size:" << 2;
    ModbusRtuReply *reply = readPowerPhaseB();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Power phase L2\" register" << 3056 << "size:" << 2 << values;
                    processPowerPhaseBRegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Power phase L2\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Power phase L2\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updatePowerPhaseC()
{
    // Update registers from Power phase L3
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Power phase L3\" register:" << 3058 << "size:" << 2;
    ModbusRtuReply *reply = readPowerPhaseC();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Power phase L3\" register" << 3058 << "size:" << 2 << values;
                    processPowerPhaseCRegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Power phase L3\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Power phase L3\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updateFrequency()
{
    // Update registers from Frequency
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Frequency\" register:" << 3110 << "size:" << 2;
    ModbusRtuReply *reply = readFrequency();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Frequency\" register" << 3110 << "size:" << 2 << values;
                    processFrequencyRegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Frequency\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Frequency\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updateTotalEnergyConsumed()
{
    // Update registers from Total energy consumed
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Total energy consumed\" register:" << 3204 << "size:" << 4;
    ModbusRtuReply *reply = readTotalEnergyConsumed();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Total energy consumed\" register" << 3204 << "size:" << 4 << values;
                    processTotalEnergyConsumedRegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Total energy consumed\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Total energy consumed\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updateTotalEnergyProduced()
{
    // Update registers from Total energy produced
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Total energy produced\" register:" << 3208 << "size:" << 4;
    ModbusRtuReply *reply = readTotalEnergyProduced();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Total energy produced\" register" << 3208 << "size:" << 4 << values;
                    processTotalEnergyProducedRegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Total energy produced\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Total energy produced\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updateEnergyConsumedPhaseA()
{
    // Update registers from Energy consumed phase A
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Energy consumed phase A\" register:" << 3518 << "size:" << 4;
    ModbusRtuReply *reply = readEnergyConsumedPhaseA();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Energy consumed phase A\" register" << 3518 << "size:" << 4 << values;
                    processEnergyConsumedPhaseARegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Energy consumed phase A\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Energy consumed phase A\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updateEnergyConsumedPhaseB()
{
    // Update registers from Energy consumed phase B
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Energy consumed phase B\" register:" << 3522 << "size:" << 4;
    ModbusRtuReply *reply = readEnergyConsumedPhaseB();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Energy consumed phase B\" register" << 3522 << "size:" << 4 << values;
                    processEnergyConsumedPhaseBRegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Energy consumed phase B\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Energy consumed phase B\" registers";
    }
}

void SchneiderIEMModbusRtuConnection::updateEnergyConsumedPhaseC()
{
    // Update registers from Energy consumed phase C
    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "--> Read \"Energy consumed phase C\" register:" << 3526 << "size:" << 4;
    ModbusRtuReply *reply = readEnergyConsumedPhaseC();
    if (reply) {
        if (!reply->isFinished()) {
            connect(reply, &ModbusRtuReply::finished, this, [this, reply](){
                if (reply->error() == ModbusRtuReply::NoError) {
                    QVector<quint16> values = reply->result();
                    qCDebug(dcSchneiderIEMModbusRtuConnection()) << "<-- Response from \"Energy consumed phase C\" register" << 3526 << "size:" << 4 << values;
                    processEnergyConsumedPhaseCRegisterValues(values);
                }
            });

            connect(reply, &ModbusRtuReply::errorOccurred, this, [reply] (ModbusRtuReply::Error error){
                qCWarning(dcSchneiderIEMModbusRtuConnection()) << "ModbusRtu reply error occurred while updating \"Energy consumed phase C\" registers" << error << reply->errorString();
            });
        }
    } else {
        qCWarning(dcSchneiderIEMModbusRtuConnection()) << "Error occurred while reading \"Energy consumed phase C\" registers";
    }
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readTotalCurrentPower()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3060, 2);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readVoltagePhaseA()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3020, 2);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readVoltagePhaseB()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3022, 2);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readVoltagePhaseC()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3024, 2);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readCurrentPhaseA()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3000, 2);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readCurrentPhaseB()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3002, 2);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readCurrentPhaseC()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3004, 2);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readPowerPhaseA()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3054, 2);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readPowerPhaseB()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3056, 2);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readPowerPhaseC()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3058, 2);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readFrequency()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3110, 2);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readTotalEnergyConsumed()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3204, 4);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readTotalEnergyProduced()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3208, 4);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readEnergyConsumedPhaseA()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3518, 4);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readEnergyConsumedPhaseB()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3522, 4);
}

ModbusRtuReply *SchneiderIEMModbusRtuConnection::readEnergyConsumedPhaseC()
{
    return m_modbusRtuMaster->readInputRegister(m_slaveId, 3526, 4);
}

void SchneiderIEMModbusRtuConnection::processTotalCurrentPowerRegisterValues(const QVector<quint16> values)
{
    float receivedTotalCurrentPower = ModbusDataUtils::convertToFloat32(values, m_endianness);
    if (m_totalCurrentPower != receivedTotalCurrentPower) {
        m_totalCurrentPower = receivedTotalCurrentPower;
        emit totalCurrentPowerChanged(m_totalCurrentPower);
    }
}

void SchneiderIEMModbusRtuConnection::processVoltagePhaseARegisterValues(const QVector<quint16> values)
{
    float receivedVoltagePhaseA = ModbusDataUtils::convertToFloat32(values, m_endianness);
    if (m_voltagePhaseA != receivedVoltagePhaseA) {
        m_voltagePhaseA = receivedVoltagePhaseA;
        emit voltagePhaseAChanged(m_voltagePhaseA);
    }
}

void SchneiderIEMModbusRtuConnection::processVoltagePhaseBRegisterValues(const QVector<quint16> values)
{
    float receivedVoltagePhaseB = ModbusDataUtils::convertToFloat32(values, m_endianness);
    if (m_voltagePhaseB != receivedVoltagePhaseB) {
        m_voltagePhaseB = receivedVoltagePhaseB;
        emit voltagePhaseBChanged(m_voltagePhaseB);
    }
}

void SchneiderIEMModbusRtuConnection::processVoltagePhaseCRegisterValues(const QVector<quint16> values)
{
    float receivedVoltagePhaseC = ModbusDataUtils::convertToFloat32(values, m_endianness);
    if (m_voltagePhaseC != receivedVoltagePhaseC) {
        m_voltagePhaseC = receivedVoltagePhaseC;
        emit voltagePhaseCChanged(m_voltagePhaseC);
    }
}

void SchneiderIEMModbusRtuConnection::processCurrentPhaseARegisterValues(const QVector<quint16> values)
{
    float receivedCurrentPhaseA = ModbusDataUtils::convertToFloat32(values, m_endianness);
    if (m_currentPhaseA != receivedCurrentPhaseA) {
        m_currentPhaseA = receivedCurrentPhaseA;
        emit currentPhaseAChanged(m_currentPhaseA);
    }
}

void SchneiderIEMModbusRtuConnection::processCurrentPhaseBRegisterValues(const QVector<quint16> values)
{
    float receivedCurrentPhaseB = ModbusDataUtils::convertToFloat32(values, m_endianness);
    if (m_currentPhaseB != receivedCurrentPhaseB) {
        m_currentPhaseB = receivedCurrentPhaseB;
        emit currentPhaseBChanged(m_currentPhaseB);
    }
}

void SchneiderIEMModbusRtuConnection::processCurrentPhaseCRegisterValues(const QVector<quint16> values)
{
    float receivedCurrentPhaseC = ModbusDataUtils::convertToFloat32(values, m_endianness);
    if (m_currentPhaseC != receivedCurrentPhaseC) {
        m_currentPhaseC = receivedCurrentPhaseC;
        emit currentPhaseCChanged(m_currentPhaseC);
    }
}

void SchneiderIEMModbusRtuConnection::processPowerPhaseARegisterValues(const QVector<quint16> values)
{
    float receivedPowerPhaseA = ModbusDataUtils::convertToFloat32(values, m_endianness);
    if (m_powerPhaseA != receivedPowerPhaseA) {
        m_powerPhaseA = receivedPowerPhaseA;
        emit powerPhaseAChanged(m_powerPhaseA);
    }
}

void SchneiderIEMModbusRtuConnection::processPowerPhaseBRegisterValues(const QVector<quint16> values)
{
    float receivedPowerPhaseB = ModbusDataUtils::convertToFloat32(values, m_endianness);
    if (m_powerPhaseB != receivedPowerPhaseB) {
        m_powerPhaseB = receivedPowerPhaseB;
        emit powerPhaseBChanged(m_powerPhaseB);
    }
}

void SchneiderIEMModbusRtuConnection::processPowerPhaseCRegisterValues(const QVector<quint16> values)
{
    float receivedPowerPhaseC = ModbusDataUtils::convertToFloat32(values, m_endianness);
    if (m_powerPhaseC != receivedPowerPhaseC) {
        m_powerPhaseC = receivedPowerPhaseC;
        emit powerPhaseCChanged(m_powerPhaseC);
    }
}

void SchneiderIEMModbusRtuConnection::processFrequencyRegisterValues(const QVector<quint16> values)
{
    float receivedFrequency = ModbusDataUtils::convertToFloat32(values, m_endianness);
    if (m_frequency != receivedFrequency) {
        m_frequency = receivedFrequency;
        emit frequencyChanged(m_frequency);
    }
}

void SchneiderIEMModbusRtuConnection::processTotalEnergyConsumedRegisterValues(const QVector<quint16> values)
{
    qint64 receivedTotalEnergyConsumed = ModbusDataUtils::convertToInt64(values, m_endianness);
    if (m_totalEnergyConsumed != receivedTotalEnergyConsumed) {
        m_totalEnergyConsumed = receivedTotalEnergyConsumed;
        emit totalEnergyConsumedChanged(m_totalEnergyConsumed);
    }
}

void SchneiderIEMModbusRtuConnection::processTotalEnergyProducedRegisterValues(const QVector<quint16> values)
{
    qint64 receivedTotalEnergyProduced = ModbusDataUtils::convertToInt64(values, m_endianness);
    if (m_totalEnergyProduced != receivedTotalEnergyProduced) {
        m_totalEnergyProduced = receivedTotalEnergyProduced;
        emit totalEnergyProducedChanged(m_totalEnergyProduced);
    }
}

void SchneiderIEMModbusRtuConnection::processEnergyConsumedPhaseARegisterValues(const QVector<quint16> values)
{
    qint64 receivedEnergyConsumedPhaseA = ModbusDataUtils::convertToInt64(values, m_endianness);
    if (m_energyConsumedPhaseA != receivedEnergyConsumedPhaseA) {
        m_energyConsumedPhaseA = receivedEnergyConsumedPhaseA;
        emit energyConsumedPhaseAChanged(m_energyConsumedPhaseA);
    }
}

void SchneiderIEMModbusRtuConnection::processEnergyConsumedPhaseBRegisterValues(const QVector<quint16> values)
{
    qint64 receivedEnergyConsumedPhaseB = ModbusDataUtils::convertToInt64(values, m_endianness);
    if (m_energyConsumedPhaseB != receivedEnergyConsumedPhaseB) {
        m_energyConsumedPhaseB = receivedEnergyConsumedPhaseB;
        emit energyConsumedPhaseBChanged(m_energyConsumedPhaseB);
    }
}

void SchneiderIEMModbusRtuConnection::processEnergyConsumedPhaseCRegisterValues(const QVector<quint16> values)
{
    qint64 receivedEnergyConsumedPhaseC = ModbusDataUtils::convertToInt64(values, m_endianness);
    if (m_energyConsumedPhaseC != receivedEnergyConsumedPhaseC) {
        m_energyConsumedPhaseC = receivedEnergyConsumedPhaseC;
        emit energyConsumedPhaseCChanged(m_energyConsumedPhaseC);
    }
}

void SchneiderIEMModbusRtuConnection::verifyInitFinished()
{
    if (m_pendingInitReplies.isEmpty()) {
        qCDebug(dcSchneiderIEMModbusRtuConnection()) << "Initialization finished of SchneiderIEMModbusRtuConnection";
        emit initializationFinished();
    }
}

QDebug operator<<(QDebug debug, SchneiderIEMModbusRtuConnection *schneiderIEMModbusRtuConnection)
{
    debug.nospace().noquote() << "SchneiderIEMModbusRtuConnection(" << schneiderIEMModbusRtuConnection->modbusRtuMaster()->modbusUuid().toString() << ", " << schneiderIEMModbusRtuConnection->modbusRtuMaster()->serialPort() << ", slave ID:" << schneiderIEMModbusRtuConnection->slaveId() << ")" << "\n";
    debug.nospace().noquote() << "    - Total system power:" << schneiderIEMModbusRtuConnection->totalCurrentPower() << " [kW]" << "\n";
    debug.nospace().noquote() << "    - Voltage phase L1:" << schneiderIEMModbusRtuConnection->voltagePhaseA() << " [V]" << "\n";
    debug.nospace().noquote() << "    - Voltage phase L2:" << schneiderIEMModbusRtuConnection->voltagePhaseB() << " [V]" << "\n";
    debug.nospace().noquote() << "    - Voltage phase L3:" << schneiderIEMModbusRtuConnection->voltagePhaseC() << " [V]" << "\n";
    debug.nospace().noquote() << "    - Current phase L1:" << schneiderIEMModbusRtuConnection->currentPhaseA() << " [A]" << "\n";
    debug.nospace().noquote() << "    - Current phase L2:" << schneiderIEMModbusRtuConnection->currentPhaseB() << " [A]" << "\n";
    debug.nospace().noquote() << "    - Current phase L3:" << schneiderIEMModbusRtuConnection->currentPhaseC() << " [A]" << "\n";
    debug.nospace().noquote() << "    - Power phase L1:" << schneiderIEMModbusRtuConnection->powerPhaseA() << " [kW]" << "\n";
    debug.nospace().noquote() << "    - Power phase L2:" << schneiderIEMModbusRtuConnection->powerPhaseB() << " [kW]" << "\n";
    debug.nospace().noquote() << "    - Power phase L3:" << schneiderIEMModbusRtuConnection->powerPhaseC() << " [kW]" << "\n";
    debug.nospace().noquote() << "    - Frequency:" << schneiderIEMModbusRtuConnection->frequency() << " [Hz]" << "\n";
    debug.nospace().noquote() << "    - Total energy consumed:" << schneiderIEMModbusRtuConnection->totalEnergyConsumed() << " [Wh]" << "\n";
    debug.nospace().noquote() << "    - Total energy produced:" << schneiderIEMModbusRtuConnection->totalEnergyProduced() << " [Wh]" << "\n";
    debug.nospace().noquote() << "    - Energy consumed phase A:" << schneiderIEMModbusRtuConnection->energyConsumedPhaseA() << " [Wh]" << "\n";
    debug.nospace().noquote() << "    - Energy consumed phase B:" << schneiderIEMModbusRtuConnection->energyConsumedPhaseB() << " [Wh]" << "\n";
    debug.nospace().noquote() << "    - Energy consumed phase C:" << schneiderIEMModbusRtuConnection->energyConsumedPhaseC() << " [Wh]" << "\n";
    return debug.quote().space();
}

